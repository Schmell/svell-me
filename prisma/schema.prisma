generator client {
  provider = "prisma-client-js"
}

generator json {
  provider  = "prisma-json-types-generator"
  namespace = "PrismaJson"
}

// VERCEL
datasource db {
  provider          = "postgresql"
  url               = env("CUSTOM_POSTGRES_POOL")
  directUrl         = env("POSTGRES_URL_NON_POOLING")
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING")
}

// // LOCALHOST
// datasource db {
//   provider = "postgresql"
//   url      = env("LOCAL_DATABASE_URL")
// }

model Series {
  id             String        @id @unique @default(cuid())
  name           String
  description    String?
  rest           Json?
  organizationId String?
  publisherId    String?
  createdAt      DateTime?     @default(now())
  updatedAt      DateTime?     @updatedAt
  Events         Event[]
  Org            Organization? @relation(fields: [organizationId], references: [id])
  Publisher      User?         @relation(fields: [publisherId], references: [id])
  follow         follow[]
  like           like[]
  Venues         Venue[]       @relation("SeriesToVenue")
}

model Event {
  id             String        @id @default(cuid())
  eventeid       String
  uniqueIdString String        @unique
  name           String
  eventwebsite   String?
  venueName      String?
  description    String?
  titleImage     String?
  public         Boolean       @default(true)
  /// [fileInfo]
  fileInfo       Json?
  /// [resultColumns]
  resultColumns  Json?
  /// [eventRest]
  rest           Json?
  publisherId    String?
  venueId        String?
  organizationId String?
  createdAt      DateTime?     @default(now())
  updatedAt      DateTime?     @updatedAt
  seriesId       String?
  email          String?
  // Comps          Comp[]
  Organization   Organization? @relation(fields: [organizationId], references: [id])
  Publisher      User?         @relation(fields: [publisherId], references: [id])
  Series         Series?       @relation(fields: [seriesId], references: [id])
  Venue          Venue?        @relation(fields: [venueId], references: [id])
  Races          Race[]
  Results        Result[]
  follow         follow[]
  like           like[]
  Comps          Comp[]
  // compId         String?
}

model Race {
  id               String    @id @unique @default(cuid())
  raceId           String?
  uniqueRaceString String    @unique
  name             String?
  starts           Json?
  rank             String?
  date             String?
  time             String?
  notes            String?
  sailed           String?
  resultColumns    Json?
  /// [raceRest]
  rest             Json?
  eventId          String?
  publisherId      String?
  createdAt        DateTime? @default(now())
  updatedAt        DateTime? @updatedAt
  Event            Event?    @relation(fields: [eventId], references: [id])
  Publisher        User?     @relation(fields: [publisherId], references: [id])
  Results          Result[]
  follow           follow[]
  like             like[]
  Comps            Comp[]

  compId String?
}

model Comp {
  id          String    @id @default(cuid())
  compId      String    @unique // right now this will only be unique on the same event
  // uniqueCompId String @unique // need to generate a string that will remain unique from event to event
  // problem is that lots of events will only have one info (boat or skipper or etc.)
  club        String?
  boat        String?
  skipper     String?
  fleet       String?
  division    String?
  rating      String?
  rank        String?
  nett        String?
  total       String?
  /// [compRest]
  rest        Json?
  publisherId String?
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt
  Events      Event[]
  Publisher   User?     @relation(fields: [publisherId], references: [id])
  Results     Result[]
  follow      follow[]
  like        like[]
  Races       Race[]

  raceId String?

  @@index([compId])
}

model Result {
  id             String    @id @unique @default(cuid())
  resultId       String?
  finish         String?
  start          String?
  points         String?
  position       String?
  discard        String?
  corrected      String?
  resultType     String?
  elasped        String?
  supposedRating String?
  elapsedWin     String?
  ratingWin      String?
  rrset          String?
  publisherId    String
  eventId        String?
  compId         String?
  raceId         String?
  createdAt      DateTime? @default(now())
  updatedAt      DateTime? @updatedAt
  Comp           Comp?     @relation(fields: [compId], references: [id])
  Event          Event?    @relation(fields: [eventId], references: [id])
  Publisher      User      @relation(fields: [publisherId], references: [id])
  Race           Race?     @relation(fields: [raceId], references: [id])

  @@index([raceId])
}

model Organization {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  tag         String?
  website     String?
  email       String?
  contact     Json?
  titleImage  String?
  ownerId     String?
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt
  Events      Event[]
  Owner       User?     @relation(fields: [ownerId], references: [id])
  Series      Series[]
  follow      follow[]
  like        like[]
}

model follow {
  id             String        @id @unique @default(cuid())
  userId         String
  type           String
  seriesId       String?
  eventId        String?
  organizationId String?
  raceId         String?
  compId         String?
  updatedAt      DateTime      @updatedAt
  createdAt      DateTime      @default(now())
  Comp           Comp?         @relation(fields: [compId], references: [id])
  Event          Event?        @relation(fields: [eventId], references: [id])
  Organization   Organization? @relation(fields: [organizationId], references: [id])
  Race           Race?         @relation(fields: [raceId], references: [id])
  Series         Series?       @relation(fields: [seriesId], references: [id])
  User           User          @relation(fields: [userId], references: [id])
}

model like {
  id             String        @id @unique @default(cuid())
  userId         String
  type           String
  seriesId       String?
  eventId        String?
  organizationId String?
  raceId         String?
  compId         String?
  updatedAt      DateTime      @updatedAt
  createdAt      DateTime      @default(now())
  Comp           Comp?         @relation(fields: [compId], references: [id])
  Event          Event?        @relation(fields: [eventId], references: [id])
  Organization   Organization? @relation(fields: [organizationId], references: [id])
  Race           Race?         @relation(fields: [raceId], references: [id])
  Series         Series?       @relation(fields: [seriesId], references: [id])
  User           User          @relation(fields: [userId], references: [id])
}

model Venue {
  id          String    @id @unique @default(cuid())
  name        String    @unique
  website     String?
  email       String?
  burgee      String?
  publisherId String?
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt
  Event       Event[]
  Publisher   User?     @relation(fields: [publisherId], references: [id])
  Series      Series[]  @relation("SeriesToVenue")
}

model User {
  id           String         @id @unique
  name         String
  username     String         @unique
  email        String?        @unique
  avatar       String?
  Article      Article[]
  Comp         Comp[]
  Event        Event[]
  Organization Organization[]
  Race         Race[]
  Result       Result[]
  Series       Series[]
  UserSettings UserSettings?
  Venue        Venue[]
  follow       follow[]
  Key          Key[]
  like         like[]
  session      Session[]

  @@map("user")
}

model UserSettings {
  id       String  @id @unique @default(cuid())
  theme    String?
  language Lang?   @default(english)
  userId   String? @unique
  user     User?   @relation(fields: [userId], references: [id])
}

model Session {
  id             String @id @unique
  user_id        String
  active_expires BigInt
  idle_expires   BigInt
  user           User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
  @@map("session")
}

model Key {
  id              String  @id @unique
  hashed_password String?
  user_id         String
  primary         Boolean
  user            User    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
  @@map("key")
}

model Article {
  id        String    @id @unique @default(cuid())
  title     String
  content   String?
  userId    String?
  bogus     String?
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  user      User?     @relation(fields: [userId], references: [id])
}

enum Lang {
  english
  french
  spanish
  german
  dutch
  swedish
  russian
  chinese
  japanese
  norweigen
  italian
  portugese
}
