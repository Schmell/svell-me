// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgres"
    url      = "postgresql://postgres:Beatbr0s@localhost:5432/otw"
}

model Event {
    id           String    @id @unique @default(cuid())
    name         String
    eventeid     String
    eventwebsite String?
    public       Boolean?  @default(true)
    fileInfo     Json?
    rest         Json?
    userId       String?
    user         User?     @relation(fields: [userId], references: [id])
    seriesId     String?
    venueName    String?
    venueId      String?
    venue        Venue?    @relation(fields: [venueId], references: [id])
    createdAt    DateTime? @default(now())
    updatedAt    DateTime? @updatedAt
    Race         Race[]
    Result       Result[]
    Comp         Comp[]
}

model Organization {
    id          String   @id @unique @default(cuid())
    name        String
    description String?
    tag         String?
    website     String?
    contact     Json?
    Series      Series[]
}

model Race {
    id      String   @id @unique @default(cuid())
    raceId  String?
    name    String?
    starts  Json?
    rank    String?
    date    String?
    time    String?
    notes   String?
    sailed  String?
    rest    Json?
    results Result[]
    eventId String?
    event   Event?   @relation(fields: [eventId], references: [id])
}

model Result {
    id        String  @id @unique @default(cuid())
    eventId   String?
    event     Event?  @relation(fields: [eventId], references: [id])
    resultId  String?
    compId    String?
    comp      Comp?   @relation(fields: [compId], references: [id])
    raceId    String?
    race      Race?   @relation(fields: [raceId], references: [id])
    finish    String?
    start     String?
    points    String?
    position  String?
    discard   String?
    corrected String?
    rrestyp   String?
    elasped   String?
    srat      String?
    rewin     String?
    rrwin     String?
    rrset     String?
    rest      Json?
}

model Series {
    id             String        @id @unique @default(cuid())
    name           String
    org            Organization? @relation(fields: [organizationId], references: [id])
    venues         Venue[]
    organizationId String?
    User           User?         @relation(fields: [userId], references: [id])
    userId         String?
    rest           Json?
}

model Venue {
    id           String  @id @unique @default(cuid())
    name         String  @unique
    venueWebsite String? @unique
    email        String? @unique
    Series       Series? @relation(fields: [seriesId], references: [id])
    seriesId     String?
    Event        Event[]
}

model Comp {
    id        String    @id
    compId    String?
    boat      String?
    skipper   String?
    fleet     String?
    club      String?
    rest      Json?
    createdAt DateTime? @default(now())
    updatedAt DateTime? @updatedAt
    eventId   String?
    event     Event?    @relation(fields: [eventId], references: [id])
    userId    String?
    Result    Result[]
}

model User {
    id       String    @id @unique
    name     String
    username String    @unique
    session  Session[]
    Key      Key[]
    Article  Article[]
    Series   Series[]
    Event    Event[]

    @@map("user")
}

model Session {
    id             String @id @unique
    user_id        String
    active_expires BigInt
    idle_expires   BigInt
    user           User   @relation(references: [id], fields: [user_id], onDelete: Cascade)

    @@index([user_id])
    @@map("session")
}

model Key {
    id              String  @id @unique
    hashed_password String?
    user_id         String
    primary         Boolean
    user            User    @relation(references: [id], fields: [user_id], onDelete: Cascade)

    @@index([user_id])
    @@map("key")
}

model Article {
    id      String  @id @unique @default(cuid())
    title   String
    content String?
    user    User?   @relation(fields: [userId], references: [id])
    userId  String?
    bogus   String?
}
