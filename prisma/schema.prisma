// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

// Always after the prisma-client-js generator
generator json {
    provider  = "prisma-json-types-generator"
    namespace = "PrismaJson"
    // clientOutput = "<finds it automatically>"
    // (./ -> relative to schema, or an importable path to require() it)
}

// datasource db {
//     provider = "postgres"
//     url      = env("DATABASE_URL")
// }
datasource db {
    provider          = "postgresql"
    url               = env("POSTGRES_PRISMA_URL") // uses connection pooling
    directUrl         = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
    shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

model Series {
    id             String        @id @unique @default(cuid())
    name           String
    description    String?
    rest           Json?
    organizationId String?
    Org            Organization? @relation(fields: [organizationId], references: [id])
    publisherId    String?
    Publisher      User?         @relation(fields: [publisherId], references: [id])
    Venues         Venue[]
    Events         Event[]
    createdAt      DateTime?     @default(now())
    updatedAt      DateTime?     @updatedAt
    follow         follow[]
    like           like[]
}

model Event {
    id             String        @id @default(cuid())
    eventeid       String
    uniqueIdString String        @unique
    name           String
    eventwebsite   String?
    email          String?
    venueName      String?
    description    String?
    titleImage     String?
    public         Boolean       @default(true)
    /// [fileInfo]
    fileInfo       Json?
    /// [resultColumns]
    resultColumns  Json? //     @default("{\"points\": false, \"nett\": false, \"total\": false, \"skipper\": false, \"place\": false}")
    /// [eventRest]
    rest           Json?
    publisherId    String?
    Publisher      User?         @relation(fields: [publisherId], references: [id])
    venueId        String?
    Venue          Venue?        @relation(fields: [venueId], references: [id])
    organizationId String?
    Organization   Organization? @relation(fields: [organizationId], references: [id])
    // Series         Series[]
    Races          Race[]
    Results        Result[]
    Comps          Comp[]
    createdAt      DateTime?     @default(now())
    updatedAt      DateTime?     @updatedAt
    Series         Series?       @relation(fields: [seriesId], references: [id])
    seriesId       String?
    follow         follow[]
    like           like[]
}

model Race {
    id               String    @id @unique @default(cuid())
    raceId           String?
    uniqueRaceString String?
    name             String?
    starts           Json?
    rank             String?
    date             String?
    time             String?
    notes            String?
    sailed           String?
    resultColumns    Json?
    /// [raceRest]
    rest             Json?
    Event            Event?    @relation(fields: [eventId], references: [id])
    eventId          String?
    Publisher        User?     @relation(fields: [publisherId], references: [id])
    publisherId      String?
    Comps            Comp[]
    Results          Result[]
    createdAt        DateTime? @default(now())
    updatedAt        DateTime? @updatedAt
    // compId      String?
    follow           follow[]
    like             like[]
}

model Comp {
    id          String    @id @default(cuid())
    compId      String    @unique
    club        String?
    boat        String?
    skipper     String? // helmname
    fleet       String?
    division    String?
    rating      String?
    rank        String?
    nett        String?
    total       String?
    /// [compRest]
    rest        Json?
    Publisher   User?     @relation(fields: [publisherId], references: [id])
    publisherId String?
    Event       Event?    @relation(fields: [eventId], references: [id])
    eventId     String?
    Results     Result[]
    Races       Race[]
    createdAt   DateTime? @default(now())
    updatedAt   DateTime? @updatedAt
    follow      follow[]
    like        like[]

    @@index([compId, eventId])
}

model Result {
    id         String  @id @unique @default(cuid())
    resultId   String?
    finish     String?
    start      String?
    // needs to be number
    points     String?
    position   String?
    discard    String?
    corrected  String?
    resultType String?

    elasped        String?
    supposedRating String?
    elapsedWin     String?
    ratingWin      String?
    rrset          String?
    Publisher      User      @relation(fields: [publisherId], references: [id])
    publisherId    String
    Event          Event?    @relation(fields: [eventId], references: [id])
    eventId        String?
    Comp           Comp?     @relation(fields: [compId], references: [id])
    compId         String?
    Race           Race?     @relation(fields: [raceId], references: [id])
    raceId         String?
    createdAt      DateTime? @default(now())
    updatedAt      DateTime? @updatedAt

    @@index([raceId])
}

model Organization {
    id          String    @id @default(cuid())
    name        String    @unique
    description String?
    tag         String?
    website     String?
    email       String?
    contact     Json?
    titleImage  String?
    ownerId     String?
    Owner       User?     @relation(fields: [ownerId], references: [id])
    Series      Series[]
    Events      Event[]
    createdAt   DateTime? @default(now())
    updatedAt   DateTime? @updatedAt
    follow      follow[]
    like        like[]
}

model follow {
    id             String        @id @unique @default(cuid())
    User           User          @relation(fields: [userId], references: [id])
    userId         String
    type           String // series | event | race | comp | organization
    Series         Series?       @relation(fields: [seriesId], references: [id])
    seriesId       String?
    Event          Event?        @relation(fields: [eventId], references: [id])
    eventId        String?
    Organization   Organization? @relation(fields: [organizationId], references: [id])
    organizationId String?
    Race           Race?         @relation(fields: [raceId], references: [id])
    raceId         String?
    Comp           Comp?         @relation(fields: [compId], references: [id])
    compId         String?
    updatedAt      DateTime      @updatedAt
    createdAt      DateTime      @default(now())
}

model like {
    id             String        @id @unique @default(cuid())
    User           User          @relation(fields: [userId], references: [id])
    userId         String
    type           String // series | event | race | comp | organization
    Series         Series?       @relation(fields: [seriesId], references: [id])
    seriesId       String?
    Event          Event?        @relation(fields: [eventId], references: [id])
    eventId        String?
    Organization   Organization? @relation(fields: [organizationId], references: [id])
    organizationId String?
    Race           Race?         @relation(fields: [raceId], references: [id])
    raceId         String?
    Comp           Comp?         @relation(fields: [compId], references: [id])
    compId         String?
    updatedAt      DateTime      @updatedAt
    createdAt      DateTime      @default(now())
}

model Venue {
    id          String    @id @unique @default(cuid())
    name        String    @unique
    website     String?
    email       String?
    burgee      String?
    publisherId String?
    Publisher   User?     @relation(fields: [publisherId], references: [id])
    Series      Series[]
    Event       Event[]
    createdAt   DateTime? @default(now())
    updatedAt   DateTime? @updatedAt
}

model User {
    id           String         @id @unique
    name         String
    username     String         @unique
    email        String?        @unique
    avatar       String?
    session      Session[]
    Key          Key[]
    Article      Article[]
    Series       Series[]
    Event        Event[]
    Organization Organization[]
    Comp         Comp[]
    Venue        Venue[]
    UserSettings UserSettings?
    Race         Race[]
    Result       Result[]
    follow       follow[]
    like         like[]

    @@map("user")
}

model UserSettings {
    id       String  @id @unique @default(cuid())
    theme    String?
    language Lang?   @default(english)
    user     User?   @relation(fields: [userId], references: [id])
    userId   String? @unique
}

enum Lang {
    english
    french
    spanish
    german
    dutch
    swedish
    russian
    chinese
    japanese
    norweigen
    italian
    portugese
}

model Session {
    id             String @id @unique
    user_id        String
    active_expires BigInt
    idle_expires   BigInt
    user           User   @relation(references: [id], fields: [user_id], onDelete: Cascade)

    @@index([user_id])
    @@map("session")
}

model Key {
    id              String  @id @unique
    hashed_password String?
    user_id         String
    primary         Boolean
    user            User    @relation(references: [id], fields: [user_id], onDelete: Cascade)

    @@index([user_id])
    @@map("key")
}

model Article {
    id        String    @id @unique @default(cuid())
    title     String
    content   String?
    user      User?     @relation(fields: [userId], references: [id])
    userId    String?
    bogus     String?
    createdAt DateTime? @default(now())
    updatedAt DateTime? @updatedAt
}
