
/**
 * Client
**/

import * as runtime from './runtime/library';
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends Prisma.PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};

export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>


/**
 * Model Series
 * 
 */
export type Series = {
  id: string
  name: string
  description: string | null
  rest: Prisma.JsonValue | null
  organizationId: string | null
  publisherId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

/**
 * Model Event
 * 
 */
export type Event = {
  id: string
  eventeid: string
  uniqueIdString: string
  name: string
  eventwebsite: string | null
  email: string | null
  venueName: string | null
  description: string | null
  titleImage: string | null
  public: boolean
  /**
   * [fileInfo]
   */
  fileInfo: Prisma.JsonValue | null
  /**
   * [resultColumns]
   */
  resultColumns: Prisma.JsonValue | null
  /**
   * [eventRest]
   */
  rest: Prisma.JsonValue | null
  publisherId: string | null
  venueId: string | null
  organizationId: string | null
  createdAt: Date | null
  updatedAt: Date | null
  seriesId: string | null
}

/**
 * Model Race
 * 
 */
export type Race = {
  id: string
  raceId: string | null
  uniqueRaceString: string | null
  name: string | null
  starts: Prisma.JsonValue | null
  rank: string | null
  date: string | null
  time: string | null
  notes: string | null
  sailed: string | null
  resultColumns: Prisma.JsonValue | null
  /**
   * [raceRest]
   */
  rest: Prisma.JsonValue | null
  eventId: string | null
  publisherId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

/**
 * Model Comp
 * 
 */
export type Comp = {
  id: string
  compId: string
  club: string | null
  boat: string | null
  skipper: string | null
  fleet: string | null
  division: string | null
  rating: string | null
  rank: string | null
  nett: string | null
  total: string | null
  /**
   * [compRest]
   */
  rest: Prisma.JsonValue | null
  publisherId: string | null
  eventId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

/**
 * Model Result
 * 
 */
export type Result = {
  id: string
  resultId: string | null
  finish: string | null
  start: string | null
  points: string | null
  position: string | null
  discard: string | null
  corrected: string | null
  resultType: string | null
  elasped: string | null
  supposedRating: string | null
  elapsedWin: string | null
  ratingWin: string | null
  rrset: string | null
  publisherId: string
  eventId: string | null
  compId: string | null
  raceId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

/**
 * Model Organization
 * 
 */
export type Organization = {
  id: string
  name: string
  description: string | null
  tag: string | null
  website: string | null
  email: string | null
  contact: Prisma.JsonValue | null
  titleImage: string | null
  ownerId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

/**
 * Model follow
 * 
 */
export type follow = {
  id: string
  userId: string
  type: string
  seriesId: string | null
  eventId: string | null
  organizationId: string | null
  raceId: string | null
  compId: string | null
  updatedAt: Date
  createdAt: Date
}

/**
 * Model like
 * 
 */
export type like = {
  id: string
  userId: string
  type: string
  seriesId: string | null
  eventId: string | null
  organizationId: string | null
  raceId: string | null
  compId: string | null
  updatedAt: Date
  createdAt: Date
}

/**
 * Model Venue
 * 
 */
export type Venue = {
  id: string
  name: string
  website: string | null
  email: string | null
  burgee: string | null
  publisherId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

/**
 * Model User
 * 
 */
export type User = {
  id: string
  name: string
  username: string
  email: string | null
  avatar: string | null
}

/**
 * Model UserSettings
 * 
 */
export type UserSettings = {
  id: string
  theme: string | null
  language: Lang | null
  userId: string | null
}

/**
 * Model Session
 * 
 */
export type Session = {
  id: string
  user_id: string
  active_expires: bigint
  idle_expires: bigint
}

/**
 * Model Key
 * 
 */
export type Key = {
  id: string
  hashed_password: string | null
  user_id: string
  primary: boolean
}

/**
 * Model Article
 * 
 */
export type Article = {
  id: string
  title: string
  content: string | null
  userId: string | null
  bogus: string | null
  createdAt: Date | null
  updatedAt: Date | null
}


/**
 * Enums
 */

// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

export const Lang: {
  english: 'english',
  french: 'french',
  spanish: 'spanish',
  german: 'german',
  dutch: 'dutch',
  swedish: 'swedish',
  russian: 'russian',
  chinese: 'chinese',
  japanese: 'japanese',
  norweigen: 'norweigen',
  italian: 'italian',
  portugese: 'portugese'
};

export type Lang = (typeof Lang)[keyof typeof Lang]


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Series
 * const series = await prisma.series.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Series
   * const series = await prisma.series.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<this, "$connect" | "$disconnect" | "$on" | "$transaction" | "$use">) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>

      /**
   * `prisma.series`: Exposes CRUD operations for the **Series** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Series
    * const series = await prisma.series.findMany()
    * ```
    */
  get series(): Prisma.SeriesDelegate<GlobalReject>;

  /**
   * `prisma.event`: Exposes CRUD operations for the **Event** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Events
    * const events = await prisma.event.findMany()
    * ```
    */
  get event(): Prisma.EventDelegate<GlobalReject>;

  /**
   * `prisma.race`: Exposes CRUD operations for the **Race** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Races
    * const races = await prisma.race.findMany()
    * ```
    */
  get race(): Prisma.RaceDelegate<GlobalReject>;

  /**
   * `prisma.comp`: Exposes CRUD operations for the **Comp** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Comps
    * const comps = await prisma.comp.findMany()
    * ```
    */
  get comp(): Prisma.CompDelegate<GlobalReject>;

  /**
   * `prisma.result`: Exposes CRUD operations for the **Result** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Results
    * const results = await prisma.result.findMany()
    * ```
    */
  get result(): Prisma.ResultDelegate<GlobalReject>;

  /**
   * `prisma.organization`: Exposes CRUD operations for the **Organization** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Organizations
    * const organizations = await prisma.organization.findMany()
    * ```
    */
  get organization(): Prisma.OrganizationDelegate<GlobalReject>;

  /**
   * `prisma.follow`: Exposes CRUD operations for the **follow** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Follows
    * const follows = await prisma.follow.findMany()
    * ```
    */
  get follow(): Prisma.followDelegate<GlobalReject>;

  /**
   * `prisma.like`: Exposes CRUD operations for the **like** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Likes
    * const likes = await prisma.like.findMany()
    * ```
    */
  get like(): Prisma.likeDelegate<GlobalReject>;

  /**
   * `prisma.venue`: Exposes CRUD operations for the **Venue** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Venues
    * const venues = await prisma.venue.findMany()
    * ```
    */
  get venue(): Prisma.VenueDelegate<GlobalReject>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;

  /**
   * `prisma.userSettings`: Exposes CRUD operations for the **UserSettings** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserSettings
    * const userSettings = await prisma.userSettings.findMany()
    * ```
    */
  get userSettings(): Prisma.UserSettingsDelegate<GlobalReject>;

  /**
   * `prisma.session`: Exposes CRUD operations for the **Session** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sessions
    * const sessions = await prisma.session.findMany()
    * ```
    */
  get session(): Prisma.SessionDelegate<GlobalReject>;

  /**
   * `prisma.key`: Exposes CRUD operations for the **Key** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Keys
    * const keys = await prisma.key.findMany()
    * ```
    */
  get key(): Prisma.KeyDelegate<GlobalReject>;

  /**
   * `prisma.article`: Exposes CRUD operations for the **Article** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Articles
    * const articles = await prisma.article.findMany()
    * ```
    */
  get article(): Prisma.ArticleDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.12.0
   * Query Engine version: 659ef412370fa3b41cd7bf6e94587c1dfb7f67e7
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: runtime.Types.Utils.LegacyExact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Series: 'Series',
    Event: 'Event',
    Race: 'Race',
    Comp: 'Comp',
    Result: 'Result',
    Organization: 'Organization',
    follow: 'follow',
    like: 'like',
    Venue: 'Venue',
    User: 'User',
    UserSettings: 'UserSettings',
    Session: 'Session',
    Key: 'Key',
    Article: 'Article'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type SeriesCountOutputType
   */


  export type SeriesCountOutputType = {
    Venues: number
    Events: number
    follow: number
    like: number
  }

  export type SeriesCountOutputTypeSelect = {
    Venues?: boolean
    Events?: boolean
    follow?: boolean
    like?: boolean
  }

  export type SeriesCountOutputTypeGetPayload<S extends boolean | null | undefined | SeriesCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? SeriesCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (SeriesCountOutputTypeArgs)
    ? SeriesCountOutputType 
    : S extends { select: any } & (SeriesCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof SeriesCountOutputType ? SeriesCountOutputType[P] : never
  } 
      : SeriesCountOutputType




  // Custom InputTypes

  /**
   * SeriesCountOutputType without action
   */
  export type SeriesCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the SeriesCountOutputType
     */
    select?: SeriesCountOutputTypeSelect | null
  }



  /**
   * Count Type EventCountOutputType
   */


  export type EventCountOutputType = {
    Races: number
    Results: number
    Comps: number
    follow: number
    like: number
  }

  export type EventCountOutputTypeSelect = {
    Races?: boolean
    Results?: boolean
    Comps?: boolean
    follow?: boolean
    like?: boolean
  }

  export type EventCountOutputTypeGetPayload<S extends boolean | null | undefined | EventCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? EventCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (EventCountOutputTypeArgs)
    ? EventCountOutputType 
    : S extends { select: any } & (EventCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof EventCountOutputType ? EventCountOutputType[P] : never
  } 
      : EventCountOutputType




  // Custom InputTypes

  /**
   * EventCountOutputType without action
   */
  export type EventCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the EventCountOutputType
     */
    select?: EventCountOutputTypeSelect | null
  }



  /**
   * Count Type RaceCountOutputType
   */


  export type RaceCountOutputType = {
    Comps: number
    Results: number
    follow: number
    like: number
  }

  export type RaceCountOutputTypeSelect = {
    Comps?: boolean
    Results?: boolean
    follow?: boolean
    like?: boolean
  }

  export type RaceCountOutputTypeGetPayload<S extends boolean | null | undefined | RaceCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? RaceCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (RaceCountOutputTypeArgs)
    ? RaceCountOutputType 
    : S extends { select: any } & (RaceCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof RaceCountOutputType ? RaceCountOutputType[P] : never
  } 
      : RaceCountOutputType




  // Custom InputTypes

  /**
   * RaceCountOutputType without action
   */
  export type RaceCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the RaceCountOutputType
     */
    select?: RaceCountOutputTypeSelect | null
  }



  /**
   * Count Type CompCountOutputType
   */


  export type CompCountOutputType = {
    Results: number
    Races: number
    follow: number
    like: number
  }

  export type CompCountOutputTypeSelect = {
    Results?: boolean
    Races?: boolean
    follow?: boolean
    like?: boolean
  }

  export type CompCountOutputTypeGetPayload<S extends boolean | null | undefined | CompCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? CompCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (CompCountOutputTypeArgs)
    ? CompCountOutputType 
    : S extends { select: any } & (CompCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof CompCountOutputType ? CompCountOutputType[P] : never
  } 
      : CompCountOutputType




  // Custom InputTypes

  /**
   * CompCountOutputType without action
   */
  export type CompCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the CompCountOutputType
     */
    select?: CompCountOutputTypeSelect | null
  }



  /**
   * Count Type OrganizationCountOutputType
   */


  export type OrganizationCountOutputType = {
    Series: number
    Events: number
    follow: number
    like: number
  }

  export type OrganizationCountOutputTypeSelect = {
    Series?: boolean
    Events?: boolean
    follow?: boolean
    like?: boolean
  }

  export type OrganizationCountOutputTypeGetPayload<S extends boolean | null | undefined | OrganizationCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? OrganizationCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (OrganizationCountOutputTypeArgs)
    ? OrganizationCountOutputType 
    : S extends { select: any } & (OrganizationCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof OrganizationCountOutputType ? OrganizationCountOutputType[P] : never
  } 
      : OrganizationCountOutputType




  // Custom InputTypes

  /**
   * OrganizationCountOutputType without action
   */
  export type OrganizationCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the OrganizationCountOutputType
     */
    select?: OrganizationCountOutputTypeSelect | null
  }



  /**
   * Count Type VenueCountOutputType
   */


  export type VenueCountOutputType = {
    Series: number
    Event: number
  }

  export type VenueCountOutputTypeSelect = {
    Series?: boolean
    Event?: boolean
  }

  export type VenueCountOutputTypeGetPayload<S extends boolean | null | undefined | VenueCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? VenueCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (VenueCountOutputTypeArgs)
    ? VenueCountOutputType 
    : S extends { select: any } & (VenueCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof VenueCountOutputType ? VenueCountOutputType[P] : never
  } 
      : VenueCountOutputType




  // Custom InputTypes

  /**
   * VenueCountOutputType without action
   */
  export type VenueCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the VenueCountOutputType
     */
    select?: VenueCountOutputTypeSelect | null
  }



  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    session: number
    Key: number
    Article: number
    Series: number
    Event: number
    Organization: number
    Comp: number
    Venue: number
    Race: number
    Result: number
    follow: number
    like: number
  }

  export type UserCountOutputTypeSelect = {
    session?: boolean
    Key?: boolean
    Article?: boolean
    Series?: boolean
    Event?: boolean
    Organization?: boolean
    Comp?: boolean
    Venue?: boolean
    Race?: boolean
    Result?: boolean
    follow?: boolean
    like?: boolean
  }

  export type UserCountOutputTypeGetPayload<S extends boolean | null | undefined | UserCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? UserCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (UserCountOutputTypeArgs)
    ? UserCountOutputType 
    : S extends { select: any } & (UserCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof UserCountOutputType ? UserCountOutputType[P] : never
  } 
      : UserCountOutputType




  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model Series
   */


  export type AggregateSeries = {
    _count: SeriesCountAggregateOutputType | null
    _min: SeriesMinAggregateOutputType | null
    _max: SeriesMaxAggregateOutputType | null
  }

  export type SeriesMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    organizationId: string | null
    publisherId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SeriesMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    organizationId: string | null
    publisherId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SeriesCountAggregateOutputType = {
    id: number
    name: number
    description: number
    rest: number
    organizationId: number
    publisherId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SeriesMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    organizationId?: true
    publisherId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SeriesMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    organizationId?: true
    publisherId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SeriesCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    rest?: true
    organizationId?: true
    publisherId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SeriesAggregateArgs = {
    /**
     * Filter which Series to aggregate.
     */
    where?: SeriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Series to fetch.
     */
    orderBy?: Enumerable<SeriesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SeriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Series from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Series.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Series
    **/
    _count?: true | SeriesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SeriesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SeriesMaxAggregateInputType
  }

  export type GetSeriesAggregateType<T extends SeriesAggregateArgs> = {
        [P in keyof T & keyof AggregateSeries]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSeries[P]>
      : GetScalarType<T[P], AggregateSeries[P]>
  }




  export type SeriesGroupByArgs = {
    where?: SeriesWhereInput
    orderBy?: Enumerable<SeriesOrderByWithAggregationInput>
    by: SeriesScalarFieldEnum[]
    having?: SeriesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SeriesCountAggregateInputType | true
    _min?: SeriesMinAggregateInputType
    _max?: SeriesMaxAggregateInputType
  }


  export type SeriesGroupByOutputType = {
    id: string
    name: string
    description: string | null
    rest: JsonValue | null
    organizationId: string | null
    publisherId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    _count: SeriesCountAggregateOutputType | null
    _min: SeriesMinAggregateOutputType | null
    _max: SeriesMaxAggregateOutputType | null
  }

  type GetSeriesGroupByPayload<T extends SeriesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<SeriesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SeriesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SeriesGroupByOutputType[P]>
            : GetScalarType<T[P], SeriesGroupByOutputType[P]>
        }
      >
    >


  export type SeriesSelect = {
    id?: boolean
    name?: boolean
    description?: boolean
    rest?: boolean
    organizationId?: boolean
    publisherId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    Org?: boolean | OrganizationArgs
    Publisher?: boolean | UserArgs
    Venues?: boolean | Series$VenuesArgs
    Events?: boolean | Series$EventsArgs
    follow?: boolean | Series$followArgs
    like?: boolean | Series$likeArgs
    _count?: boolean | SeriesCountOutputTypeArgs
  }


  export type SeriesInclude = {
    Org?: boolean | OrganizationArgs
    Publisher?: boolean | UserArgs
    Venues?: boolean | Series$VenuesArgs
    Events?: boolean | Series$EventsArgs
    follow?: boolean | Series$followArgs
    like?: boolean | Series$likeArgs
    _count?: boolean | SeriesCountOutputTypeArgs
  }

  export type SeriesGetPayload<S extends boolean | null | undefined | SeriesArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Series :
    S extends undefined ? never :
    S extends { include: any } & (SeriesArgs | SeriesFindManyArgs)
    ? Series  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'Org' ? OrganizationGetPayload<S['include'][P]> | null :
        P extends 'Publisher' ? UserGetPayload<S['include'][P]> | null :
        P extends 'Venues' ? Array < VenueGetPayload<S['include'][P]>>  :
        P extends 'Events' ? Array < EventGetPayload<S['include'][P]>>  :
        P extends 'follow' ? Array < followGetPayload<S['include'][P]>>  :
        P extends 'like' ? Array < likeGetPayload<S['include'][P]>>  :
        P extends '_count' ? SeriesCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (SeriesArgs | SeriesFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'Org' ? OrganizationGetPayload<S['select'][P]> | null :
        P extends 'Publisher' ? UserGetPayload<S['select'][P]> | null :
        P extends 'Venues' ? Array < VenueGetPayload<S['select'][P]>>  :
        P extends 'Events' ? Array < EventGetPayload<S['select'][P]>>  :
        P extends 'follow' ? Array < followGetPayload<S['select'][P]>>  :
        P extends 'like' ? Array < likeGetPayload<S['select'][P]>>  :
        P extends '_count' ? SeriesCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Series ? Series[P] : never
  } 
      : Series


  type SeriesCountArgs = 
    Omit<SeriesFindManyArgs, 'select' | 'include'> & {
      select?: SeriesCountAggregateInputType | true
    }

  export interface SeriesDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Series that matches the filter.
     * @param {SeriesFindUniqueArgs} args - Arguments to find a Series
     * @example
     * // Get one Series
     * const series = await prisma.series.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SeriesFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, SeriesFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Series'> extends True ? Prisma__SeriesClient<SeriesGetPayload<T>> : Prisma__SeriesClient<SeriesGetPayload<T> | null, null>

    /**
     * Find one Series that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SeriesFindUniqueOrThrowArgs} args - Arguments to find a Series
     * @example
     * // Get one Series
     * const series = await prisma.series.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SeriesFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, SeriesFindUniqueOrThrowArgs>
    ): Prisma__SeriesClient<SeriesGetPayload<T>>

    /**
     * Find the first Series that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeriesFindFirstArgs} args - Arguments to find a Series
     * @example
     * // Get one Series
     * const series = await prisma.series.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SeriesFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, SeriesFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Series'> extends True ? Prisma__SeriesClient<SeriesGetPayload<T>> : Prisma__SeriesClient<SeriesGetPayload<T> | null, null>

    /**
     * Find the first Series that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeriesFindFirstOrThrowArgs} args - Arguments to find a Series
     * @example
     * // Get one Series
     * const series = await prisma.series.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SeriesFindFirstOrThrowArgs>(
      args?: SelectSubset<T, SeriesFindFirstOrThrowArgs>
    ): Prisma__SeriesClient<SeriesGetPayload<T>>

    /**
     * Find zero or more Series that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeriesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Series
     * const series = await prisma.series.findMany()
     * 
     * // Get first 10 Series
     * const series = await prisma.series.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const seriesWithIdOnly = await prisma.series.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SeriesFindManyArgs>(
      args?: SelectSubset<T, SeriesFindManyArgs>
    ): Prisma.PrismaPromise<Array<SeriesGetPayload<T>>>

    /**
     * Create a Series.
     * @param {SeriesCreateArgs} args - Arguments to create a Series.
     * @example
     * // Create one Series
     * const Series = await prisma.series.create({
     *   data: {
     *     // ... data to create a Series
     *   }
     * })
     * 
    **/
    create<T extends SeriesCreateArgs>(
      args: SelectSubset<T, SeriesCreateArgs>
    ): Prisma__SeriesClient<SeriesGetPayload<T>>

    /**
     * Create many Series.
     *     @param {SeriesCreateManyArgs} args - Arguments to create many Series.
     *     @example
     *     // Create many Series
     *     const series = await prisma.series.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SeriesCreateManyArgs>(
      args?: SelectSubset<T, SeriesCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Series.
     * @param {SeriesDeleteArgs} args - Arguments to delete one Series.
     * @example
     * // Delete one Series
     * const Series = await prisma.series.delete({
     *   where: {
     *     // ... filter to delete one Series
     *   }
     * })
     * 
    **/
    delete<T extends SeriesDeleteArgs>(
      args: SelectSubset<T, SeriesDeleteArgs>
    ): Prisma__SeriesClient<SeriesGetPayload<T>>

    /**
     * Update one Series.
     * @param {SeriesUpdateArgs} args - Arguments to update one Series.
     * @example
     * // Update one Series
     * const series = await prisma.series.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SeriesUpdateArgs>(
      args: SelectSubset<T, SeriesUpdateArgs>
    ): Prisma__SeriesClient<SeriesGetPayload<T>>

    /**
     * Delete zero or more Series.
     * @param {SeriesDeleteManyArgs} args - Arguments to filter Series to delete.
     * @example
     * // Delete a few Series
     * const { count } = await prisma.series.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SeriesDeleteManyArgs>(
      args?: SelectSubset<T, SeriesDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Series.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeriesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Series
     * const series = await prisma.series.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SeriesUpdateManyArgs>(
      args: SelectSubset<T, SeriesUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Series.
     * @param {SeriesUpsertArgs} args - Arguments to update or create a Series.
     * @example
     * // Update or create a Series
     * const series = await prisma.series.upsert({
     *   create: {
     *     // ... data to create a Series
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Series we want to update
     *   }
     * })
    **/
    upsert<T extends SeriesUpsertArgs>(
      args: SelectSubset<T, SeriesUpsertArgs>
    ): Prisma__SeriesClient<SeriesGetPayload<T>>

    /**
     * Count the number of Series.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeriesCountArgs} args - Arguments to filter Series to count.
     * @example
     * // Count the number of Series
     * const count = await prisma.series.count({
     *   where: {
     *     // ... the filter for the Series we want to count
     *   }
     * })
    **/
    count<T extends SeriesCountArgs>(
      args?: Subset<T, SeriesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SeriesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Series.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeriesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SeriesAggregateArgs>(args: Subset<T, SeriesAggregateArgs>): Prisma.PrismaPromise<GetSeriesAggregateType<T>>

    /**
     * Group by Series.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeriesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SeriesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SeriesGroupByArgs['orderBy'] }
        : { orderBy?: SeriesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SeriesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSeriesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Series.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__SeriesClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    Org<T extends OrganizationArgs= {}>(args?: Subset<T, OrganizationArgs>): Prisma__OrganizationClient<OrganizationGetPayload<T> | Null>;

    Publisher<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    Venues<T extends Series$VenuesArgs= {}>(args?: Subset<T, Series$VenuesArgs>): Prisma.PrismaPromise<Array<VenueGetPayload<T>>| Null>;

    Events<T extends Series$EventsArgs= {}>(args?: Subset<T, Series$EventsArgs>): Prisma.PrismaPromise<Array<EventGetPayload<T>>| Null>;

    follow<T extends Series$followArgs= {}>(args?: Subset<T, Series$followArgs>): Prisma.PrismaPromise<Array<followGetPayload<T>>| Null>;

    like<T extends Series$likeArgs= {}>(args?: Subset<T, Series$likeArgs>): Prisma.PrismaPromise<Array<likeGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Series base type for findUnique actions
   */
  export type SeriesFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Series
     */
    select?: SeriesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SeriesInclude | null
    /**
     * Filter, which Series to fetch.
     */
    where: SeriesWhereUniqueInput
  }

  /**
   * Series findUnique
   */
  export interface SeriesFindUniqueArgs extends SeriesFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Series findUniqueOrThrow
   */
  export type SeriesFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Series
     */
    select?: SeriesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SeriesInclude | null
    /**
     * Filter, which Series to fetch.
     */
    where: SeriesWhereUniqueInput
  }


  /**
   * Series base type for findFirst actions
   */
  export type SeriesFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Series
     */
    select?: SeriesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SeriesInclude | null
    /**
     * Filter, which Series to fetch.
     */
    where?: SeriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Series to fetch.
     */
    orderBy?: Enumerable<SeriesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Series.
     */
    cursor?: SeriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Series from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Series.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Series.
     */
    distinct?: Enumerable<SeriesScalarFieldEnum>
  }

  /**
   * Series findFirst
   */
  export interface SeriesFindFirstArgs extends SeriesFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Series findFirstOrThrow
   */
  export type SeriesFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Series
     */
    select?: SeriesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SeriesInclude | null
    /**
     * Filter, which Series to fetch.
     */
    where?: SeriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Series to fetch.
     */
    orderBy?: Enumerable<SeriesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Series.
     */
    cursor?: SeriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Series from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Series.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Series.
     */
    distinct?: Enumerable<SeriesScalarFieldEnum>
  }


  /**
   * Series findMany
   */
  export type SeriesFindManyArgs = {
    /**
     * Select specific fields to fetch from the Series
     */
    select?: SeriesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SeriesInclude | null
    /**
     * Filter, which Series to fetch.
     */
    where?: SeriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Series to fetch.
     */
    orderBy?: Enumerable<SeriesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Series.
     */
    cursor?: SeriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Series from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Series.
     */
    skip?: number
    distinct?: Enumerable<SeriesScalarFieldEnum>
  }


  /**
   * Series create
   */
  export type SeriesCreateArgs = {
    /**
     * Select specific fields to fetch from the Series
     */
    select?: SeriesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SeriesInclude | null
    /**
     * The data needed to create a Series.
     */
    data: XOR<SeriesCreateInput, SeriesUncheckedCreateInput>
  }


  /**
   * Series createMany
   */
  export type SeriesCreateManyArgs = {
    /**
     * The data used to create many Series.
     */
    data: Enumerable<SeriesCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Series update
   */
  export type SeriesUpdateArgs = {
    /**
     * Select specific fields to fetch from the Series
     */
    select?: SeriesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SeriesInclude | null
    /**
     * The data needed to update a Series.
     */
    data: XOR<SeriesUpdateInput, SeriesUncheckedUpdateInput>
    /**
     * Choose, which Series to update.
     */
    where: SeriesWhereUniqueInput
  }


  /**
   * Series updateMany
   */
  export type SeriesUpdateManyArgs = {
    /**
     * The data used to update Series.
     */
    data: XOR<SeriesUpdateManyMutationInput, SeriesUncheckedUpdateManyInput>
    /**
     * Filter which Series to update
     */
    where?: SeriesWhereInput
  }


  /**
   * Series upsert
   */
  export type SeriesUpsertArgs = {
    /**
     * Select specific fields to fetch from the Series
     */
    select?: SeriesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SeriesInclude | null
    /**
     * The filter to search for the Series to update in case it exists.
     */
    where: SeriesWhereUniqueInput
    /**
     * In case the Series found by the `where` argument doesn't exist, create a new Series with this data.
     */
    create: XOR<SeriesCreateInput, SeriesUncheckedCreateInput>
    /**
     * In case the Series was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SeriesUpdateInput, SeriesUncheckedUpdateInput>
  }


  /**
   * Series delete
   */
  export type SeriesDeleteArgs = {
    /**
     * Select specific fields to fetch from the Series
     */
    select?: SeriesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SeriesInclude | null
    /**
     * Filter which Series to delete.
     */
    where: SeriesWhereUniqueInput
  }


  /**
   * Series deleteMany
   */
  export type SeriesDeleteManyArgs = {
    /**
     * Filter which Series to delete
     */
    where?: SeriesWhereInput
  }


  /**
   * Series.Venues
   */
  export type Series$VenuesArgs = {
    /**
     * Select specific fields to fetch from the Venue
     */
    select?: VenueSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VenueInclude | null
    where?: VenueWhereInput
    orderBy?: Enumerable<VenueOrderByWithRelationInput>
    cursor?: VenueWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<VenueScalarFieldEnum>
  }


  /**
   * Series.Events
   */
  export type Series$EventsArgs = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EventInclude | null
    where?: EventWhereInput
    orderBy?: Enumerable<EventOrderByWithRelationInput>
    cursor?: EventWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<EventScalarFieldEnum>
  }


  /**
   * Series.follow
   */
  export type Series$followArgs = {
    /**
     * Select specific fields to fetch from the follow
     */
    select?: followSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: followInclude | null
    where?: followWhereInput
    orderBy?: Enumerable<followOrderByWithRelationInput>
    cursor?: followWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<FollowScalarFieldEnum>
  }


  /**
   * Series.like
   */
  export type Series$likeArgs = {
    /**
     * Select specific fields to fetch from the like
     */
    select?: likeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: likeInclude | null
    where?: likeWhereInput
    orderBy?: Enumerable<likeOrderByWithRelationInput>
    cursor?: likeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<LikeScalarFieldEnum>
  }


  /**
   * Series without action
   */
  export type SeriesArgs = {
    /**
     * Select specific fields to fetch from the Series
     */
    select?: SeriesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SeriesInclude | null
  }



  /**
   * Model Event
   */


  export type AggregateEvent = {
    _count: EventCountAggregateOutputType | null
    _min: EventMinAggregateOutputType | null
    _max: EventMaxAggregateOutputType | null
  }

  export type EventMinAggregateOutputType = {
    id: string | null
    eventeid: string | null
    uniqueIdString: string | null
    name: string | null
    eventwebsite: string | null
    email: string | null
    venueName: string | null
    description: string | null
    titleImage: string | null
    public: boolean | null
    publisherId: string | null
    venueId: string | null
    organizationId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    seriesId: string | null
  }

  export type EventMaxAggregateOutputType = {
    id: string | null
    eventeid: string | null
    uniqueIdString: string | null
    name: string | null
    eventwebsite: string | null
    email: string | null
    venueName: string | null
    description: string | null
    titleImage: string | null
    public: boolean | null
    publisherId: string | null
    venueId: string | null
    organizationId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    seriesId: string | null
  }

  export type EventCountAggregateOutputType = {
    id: number
    eventeid: number
    uniqueIdString: number
    name: number
    eventwebsite: number
    email: number
    venueName: number
    description: number
    titleImage: number
    public: number
    fileInfo: number
    resultColumns: number
    rest: number
    publisherId: number
    venueId: number
    organizationId: number
    createdAt: number
    updatedAt: number
    seriesId: number
    _all: number
  }


  export type EventMinAggregateInputType = {
    id?: true
    eventeid?: true
    uniqueIdString?: true
    name?: true
    eventwebsite?: true
    email?: true
    venueName?: true
    description?: true
    titleImage?: true
    public?: true
    publisherId?: true
    venueId?: true
    organizationId?: true
    createdAt?: true
    updatedAt?: true
    seriesId?: true
  }

  export type EventMaxAggregateInputType = {
    id?: true
    eventeid?: true
    uniqueIdString?: true
    name?: true
    eventwebsite?: true
    email?: true
    venueName?: true
    description?: true
    titleImage?: true
    public?: true
    publisherId?: true
    venueId?: true
    organizationId?: true
    createdAt?: true
    updatedAt?: true
    seriesId?: true
  }

  export type EventCountAggregateInputType = {
    id?: true
    eventeid?: true
    uniqueIdString?: true
    name?: true
    eventwebsite?: true
    email?: true
    venueName?: true
    description?: true
    titleImage?: true
    public?: true
    fileInfo?: true
    resultColumns?: true
    rest?: true
    publisherId?: true
    venueId?: true
    organizationId?: true
    createdAt?: true
    updatedAt?: true
    seriesId?: true
    _all?: true
  }

  export type EventAggregateArgs = {
    /**
     * Filter which Event to aggregate.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: Enumerable<EventOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Events
    **/
    _count?: true | EventCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EventMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EventMaxAggregateInputType
  }

  export type GetEventAggregateType<T extends EventAggregateArgs> = {
        [P in keyof T & keyof AggregateEvent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEvent[P]>
      : GetScalarType<T[P], AggregateEvent[P]>
  }




  export type EventGroupByArgs = {
    where?: EventWhereInput
    orderBy?: Enumerable<EventOrderByWithAggregationInput>
    by: EventScalarFieldEnum[]
    having?: EventScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EventCountAggregateInputType | true
    _min?: EventMinAggregateInputType
    _max?: EventMaxAggregateInputType
  }


  export type EventGroupByOutputType = {
    id: string
    eventeid: string
    uniqueIdString: string
    name: string
    eventwebsite: string | null
    email: string | null
    venueName: string | null
    description: string | null
    titleImage: string | null
    public: boolean
    fileInfo: JsonValue | null
    resultColumns: JsonValue | null
    rest: JsonValue | null
    publisherId: string | null
    venueId: string | null
    organizationId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    seriesId: string | null
    _count: EventCountAggregateOutputType | null
    _min: EventMinAggregateOutputType | null
    _max: EventMaxAggregateOutputType | null
  }

  type GetEventGroupByPayload<T extends EventGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<EventGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EventGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EventGroupByOutputType[P]>
            : GetScalarType<T[P], EventGroupByOutputType[P]>
        }
      >
    >


  export type EventSelect = {
    id?: boolean
    eventeid?: boolean
    uniqueIdString?: boolean
    name?: boolean
    eventwebsite?: boolean
    email?: boolean
    venueName?: boolean
    description?: boolean
    titleImage?: boolean
    public?: boolean
    fileInfo?: boolean
    resultColumns?: boolean
    rest?: boolean
    publisherId?: boolean
    venueId?: boolean
    organizationId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    seriesId?: boolean
    Publisher?: boolean | UserArgs
    Venue?: boolean | VenueArgs
    Organization?: boolean | OrganizationArgs
    Races?: boolean | Event$RacesArgs
    Results?: boolean | Event$ResultsArgs
    Comps?: boolean | Event$CompsArgs
    Series?: boolean | SeriesArgs
    follow?: boolean | Event$followArgs
    like?: boolean | Event$likeArgs
    _count?: boolean | EventCountOutputTypeArgs
  }


  export type EventInclude = {
    Publisher?: boolean | UserArgs
    Venue?: boolean | VenueArgs
    Organization?: boolean | OrganizationArgs
    Races?: boolean | Event$RacesArgs
    Results?: boolean | Event$ResultsArgs
    Comps?: boolean | Event$CompsArgs
    Series?: boolean | SeriesArgs
    follow?: boolean | Event$followArgs
    like?: boolean | Event$likeArgs
    _count?: boolean | EventCountOutputTypeArgs
  }

  export type EventGetPayload<S extends boolean | null | undefined | EventArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Event :
    S extends undefined ? never :
    S extends { include: any } & (EventArgs | EventFindManyArgs)
    ? Event  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'Publisher' ? UserGetPayload<S['include'][P]> | null :
        P extends 'Venue' ? VenueGetPayload<S['include'][P]> | null :
        P extends 'Organization' ? OrganizationGetPayload<S['include'][P]> | null :
        P extends 'Races' ? Array < RaceGetPayload<S['include'][P]>>  :
        P extends 'Results' ? Array < ResultGetPayload<S['include'][P]>>  :
        P extends 'Comps' ? Array < CompGetPayload<S['include'][P]>>  :
        P extends 'Series' ? SeriesGetPayload<S['include'][P]> | null :
        P extends 'follow' ? Array < followGetPayload<S['include'][P]>>  :
        P extends 'like' ? Array < likeGetPayload<S['include'][P]>>  :
        P extends '_count' ? EventCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (EventArgs | EventFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'Publisher' ? UserGetPayload<S['select'][P]> | null :
        P extends 'Venue' ? VenueGetPayload<S['select'][P]> | null :
        P extends 'Organization' ? OrganizationGetPayload<S['select'][P]> | null :
        P extends 'Races' ? Array < RaceGetPayload<S['select'][P]>>  :
        P extends 'Results' ? Array < ResultGetPayload<S['select'][P]>>  :
        P extends 'Comps' ? Array < CompGetPayload<S['select'][P]>>  :
        P extends 'Series' ? SeriesGetPayload<S['select'][P]> | null :
        P extends 'follow' ? Array < followGetPayload<S['select'][P]>>  :
        P extends 'like' ? Array < likeGetPayload<S['select'][P]>>  :
        P extends '_count' ? EventCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Event ? Event[P] : never
  } 
      : Event


  type EventCountArgs = 
    Omit<EventFindManyArgs, 'select' | 'include'> & {
      select?: EventCountAggregateInputType | true
    }

  export interface EventDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Event that matches the filter.
     * @param {EventFindUniqueArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends EventFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, EventFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Event'> extends True ? Prisma__EventClient<EventGetPayload<T>> : Prisma__EventClient<EventGetPayload<T> | null, null>

    /**
     * Find one Event that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {EventFindUniqueOrThrowArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends EventFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, EventFindUniqueOrThrowArgs>
    ): Prisma__EventClient<EventGetPayload<T>>

    /**
     * Find the first Event that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventFindFirstArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends EventFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, EventFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Event'> extends True ? Prisma__EventClient<EventGetPayload<T>> : Prisma__EventClient<EventGetPayload<T> | null, null>

    /**
     * Find the first Event that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventFindFirstOrThrowArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends EventFindFirstOrThrowArgs>(
      args?: SelectSubset<T, EventFindFirstOrThrowArgs>
    ): Prisma__EventClient<EventGetPayload<T>>

    /**
     * Find zero or more Events that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Events
     * const events = await prisma.event.findMany()
     * 
     * // Get first 10 Events
     * const events = await prisma.event.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const eventWithIdOnly = await prisma.event.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends EventFindManyArgs>(
      args?: SelectSubset<T, EventFindManyArgs>
    ): Prisma.PrismaPromise<Array<EventGetPayload<T>>>

    /**
     * Create a Event.
     * @param {EventCreateArgs} args - Arguments to create a Event.
     * @example
     * // Create one Event
     * const Event = await prisma.event.create({
     *   data: {
     *     // ... data to create a Event
     *   }
     * })
     * 
    **/
    create<T extends EventCreateArgs>(
      args: SelectSubset<T, EventCreateArgs>
    ): Prisma__EventClient<EventGetPayload<T>>

    /**
     * Create many Events.
     *     @param {EventCreateManyArgs} args - Arguments to create many Events.
     *     @example
     *     // Create many Events
     *     const event = await prisma.event.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends EventCreateManyArgs>(
      args?: SelectSubset<T, EventCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Event.
     * @param {EventDeleteArgs} args - Arguments to delete one Event.
     * @example
     * // Delete one Event
     * const Event = await prisma.event.delete({
     *   where: {
     *     // ... filter to delete one Event
     *   }
     * })
     * 
    **/
    delete<T extends EventDeleteArgs>(
      args: SelectSubset<T, EventDeleteArgs>
    ): Prisma__EventClient<EventGetPayload<T>>

    /**
     * Update one Event.
     * @param {EventUpdateArgs} args - Arguments to update one Event.
     * @example
     * // Update one Event
     * const event = await prisma.event.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends EventUpdateArgs>(
      args: SelectSubset<T, EventUpdateArgs>
    ): Prisma__EventClient<EventGetPayload<T>>

    /**
     * Delete zero or more Events.
     * @param {EventDeleteManyArgs} args - Arguments to filter Events to delete.
     * @example
     * // Delete a few Events
     * const { count } = await prisma.event.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends EventDeleteManyArgs>(
      args?: SelectSubset<T, EventDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Events.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Events
     * const event = await prisma.event.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends EventUpdateManyArgs>(
      args: SelectSubset<T, EventUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Event.
     * @param {EventUpsertArgs} args - Arguments to update or create a Event.
     * @example
     * // Update or create a Event
     * const event = await prisma.event.upsert({
     *   create: {
     *     // ... data to create a Event
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Event we want to update
     *   }
     * })
    **/
    upsert<T extends EventUpsertArgs>(
      args: SelectSubset<T, EventUpsertArgs>
    ): Prisma__EventClient<EventGetPayload<T>>

    /**
     * Count the number of Events.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventCountArgs} args - Arguments to filter Events to count.
     * @example
     * // Count the number of Events
     * const count = await prisma.event.count({
     *   where: {
     *     // ... the filter for the Events we want to count
     *   }
     * })
    **/
    count<T extends EventCountArgs>(
      args?: Subset<T, EventCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EventCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Event.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EventAggregateArgs>(args: Subset<T, EventAggregateArgs>): Prisma.PrismaPromise<GetEventAggregateType<T>>

    /**
     * Group by Event.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EventGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EventGroupByArgs['orderBy'] }
        : { orderBy?: EventGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EventGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEventGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Event.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__EventClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    Publisher<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    Venue<T extends VenueArgs= {}>(args?: Subset<T, VenueArgs>): Prisma__VenueClient<VenueGetPayload<T> | Null>;

    Organization<T extends OrganizationArgs= {}>(args?: Subset<T, OrganizationArgs>): Prisma__OrganizationClient<OrganizationGetPayload<T> | Null>;

    Races<T extends Event$RacesArgs= {}>(args?: Subset<T, Event$RacesArgs>): Prisma.PrismaPromise<Array<RaceGetPayload<T>>| Null>;

    Results<T extends Event$ResultsArgs= {}>(args?: Subset<T, Event$ResultsArgs>): Prisma.PrismaPromise<Array<ResultGetPayload<T>>| Null>;

    Comps<T extends Event$CompsArgs= {}>(args?: Subset<T, Event$CompsArgs>): Prisma.PrismaPromise<Array<CompGetPayload<T>>| Null>;

    Series<T extends SeriesArgs= {}>(args?: Subset<T, SeriesArgs>): Prisma__SeriesClient<SeriesGetPayload<T> | Null>;

    follow<T extends Event$followArgs= {}>(args?: Subset<T, Event$followArgs>): Prisma.PrismaPromise<Array<followGetPayload<T>>| Null>;

    like<T extends Event$likeArgs= {}>(args?: Subset<T, Event$likeArgs>): Prisma.PrismaPromise<Array<likeGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Event base type for findUnique actions
   */
  export type EventFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EventInclude | null
    /**
     * Filter, which Event to fetch.
     */
    where: EventWhereUniqueInput
  }

  /**
   * Event findUnique
   */
  export interface EventFindUniqueArgs extends EventFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Event findUniqueOrThrow
   */
  export type EventFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EventInclude | null
    /**
     * Filter, which Event to fetch.
     */
    where: EventWhereUniqueInput
  }


  /**
   * Event base type for findFirst actions
   */
  export type EventFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EventInclude | null
    /**
     * Filter, which Event to fetch.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: Enumerable<EventOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Events.
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Events.
     */
    distinct?: Enumerable<EventScalarFieldEnum>
  }

  /**
   * Event findFirst
   */
  export interface EventFindFirstArgs extends EventFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Event findFirstOrThrow
   */
  export type EventFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EventInclude | null
    /**
     * Filter, which Event to fetch.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: Enumerable<EventOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Events.
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Events.
     */
    distinct?: Enumerable<EventScalarFieldEnum>
  }


  /**
   * Event findMany
   */
  export type EventFindManyArgs = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EventInclude | null
    /**
     * Filter, which Events to fetch.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: Enumerable<EventOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Events.
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    distinct?: Enumerable<EventScalarFieldEnum>
  }


  /**
   * Event create
   */
  export type EventCreateArgs = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EventInclude | null
    /**
     * The data needed to create a Event.
     */
    data: XOR<EventCreateInput, EventUncheckedCreateInput>
  }


  /**
   * Event createMany
   */
  export type EventCreateManyArgs = {
    /**
     * The data used to create many Events.
     */
    data: Enumerable<EventCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Event update
   */
  export type EventUpdateArgs = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EventInclude | null
    /**
     * The data needed to update a Event.
     */
    data: XOR<EventUpdateInput, EventUncheckedUpdateInput>
    /**
     * Choose, which Event to update.
     */
    where: EventWhereUniqueInput
  }


  /**
   * Event updateMany
   */
  export type EventUpdateManyArgs = {
    /**
     * The data used to update Events.
     */
    data: XOR<EventUpdateManyMutationInput, EventUncheckedUpdateManyInput>
    /**
     * Filter which Events to update
     */
    where?: EventWhereInput
  }


  /**
   * Event upsert
   */
  export type EventUpsertArgs = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EventInclude | null
    /**
     * The filter to search for the Event to update in case it exists.
     */
    where: EventWhereUniqueInput
    /**
     * In case the Event found by the `where` argument doesn't exist, create a new Event with this data.
     */
    create: XOR<EventCreateInput, EventUncheckedCreateInput>
    /**
     * In case the Event was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EventUpdateInput, EventUncheckedUpdateInput>
  }


  /**
   * Event delete
   */
  export type EventDeleteArgs = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EventInclude | null
    /**
     * Filter which Event to delete.
     */
    where: EventWhereUniqueInput
  }


  /**
   * Event deleteMany
   */
  export type EventDeleteManyArgs = {
    /**
     * Filter which Events to delete
     */
    where?: EventWhereInput
  }


  /**
   * Event.Races
   */
  export type Event$RacesArgs = {
    /**
     * Select specific fields to fetch from the Race
     */
    select?: RaceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RaceInclude | null
    where?: RaceWhereInput
    orderBy?: Enumerable<RaceOrderByWithRelationInput>
    cursor?: RaceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<RaceScalarFieldEnum>
  }


  /**
   * Event.Results
   */
  export type Event$ResultsArgs = {
    /**
     * Select specific fields to fetch from the Result
     */
    select?: ResultSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResultInclude | null
    where?: ResultWhereInput
    orderBy?: Enumerable<ResultOrderByWithRelationInput>
    cursor?: ResultWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ResultScalarFieldEnum>
  }


  /**
   * Event.Comps
   */
  export type Event$CompsArgs = {
    /**
     * Select specific fields to fetch from the Comp
     */
    select?: CompSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompInclude | null
    where?: CompWhereInput
    orderBy?: Enumerable<CompOrderByWithRelationInput>
    cursor?: CompWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<CompScalarFieldEnum>
  }


  /**
   * Event.follow
   */
  export type Event$followArgs = {
    /**
     * Select specific fields to fetch from the follow
     */
    select?: followSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: followInclude | null
    where?: followWhereInput
    orderBy?: Enumerable<followOrderByWithRelationInput>
    cursor?: followWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<FollowScalarFieldEnum>
  }


  /**
   * Event.like
   */
  export type Event$likeArgs = {
    /**
     * Select specific fields to fetch from the like
     */
    select?: likeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: likeInclude | null
    where?: likeWhereInput
    orderBy?: Enumerable<likeOrderByWithRelationInput>
    cursor?: likeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<LikeScalarFieldEnum>
  }


  /**
   * Event without action
   */
  export type EventArgs = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EventInclude | null
  }



  /**
   * Model Race
   */


  export type AggregateRace = {
    _count: RaceCountAggregateOutputType | null
    _min: RaceMinAggregateOutputType | null
    _max: RaceMaxAggregateOutputType | null
  }

  export type RaceMinAggregateOutputType = {
    id: string | null
    raceId: string | null
    uniqueRaceString: string | null
    name: string | null
    rank: string | null
    date: string | null
    time: string | null
    notes: string | null
    sailed: string | null
    eventId: string | null
    publisherId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RaceMaxAggregateOutputType = {
    id: string | null
    raceId: string | null
    uniqueRaceString: string | null
    name: string | null
    rank: string | null
    date: string | null
    time: string | null
    notes: string | null
    sailed: string | null
    eventId: string | null
    publisherId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RaceCountAggregateOutputType = {
    id: number
    raceId: number
    uniqueRaceString: number
    name: number
    starts: number
    rank: number
    date: number
    time: number
    notes: number
    sailed: number
    resultColumns: number
    rest: number
    eventId: number
    publisherId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type RaceMinAggregateInputType = {
    id?: true
    raceId?: true
    uniqueRaceString?: true
    name?: true
    rank?: true
    date?: true
    time?: true
    notes?: true
    sailed?: true
    eventId?: true
    publisherId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RaceMaxAggregateInputType = {
    id?: true
    raceId?: true
    uniqueRaceString?: true
    name?: true
    rank?: true
    date?: true
    time?: true
    notes?: true
    sailed?: true
    eventId?: true
    publisherId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RaceCountAggregateInputType = {
    id?: true
    raceId?: true
    uniqueRaceString?: true
    name?: true
    starts?: true
    rank?: true
    date?: true
    time?: true
    notes?: true
    sailed?: true
    resultColumns?: true
    rest?: true
    eventId?: true
    publisherId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type RaceAggregateArgs = {
    /**
     * Filter which Race to aggregate.
     */
    where?: RaceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Races to fetch.
     */
    orderBy?: Enumerable<RaceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RaceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Races from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Races.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Races
    **/
    _count?: true | RaceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RaceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RaceMaxAggregateInputType
  }

  export type GetRaceAggregateType<T extends RaceAggregateArgs> = {
        [P in keyof T & keyof AggregateRace]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRace[P]>
      : GetScalarType<T[P], AggregateRace[P]>
  }




  export type RaceGroupByArgs = {
    where?: RaceWhereInput
    orderBy?: Enumerable<RaceOrderByWithAggregationInput>
    by: RaceScalarFieldEnum[]
    having?: RaceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RaceCountAggregateInputType | true
    _min?: RaceMinAggregateInputType
    _max?: RaceMaxAggregateInputType
  }


  export type RaceGroupByOutputType = {
    id: string
    raceId: string | null
    uniqueRaceString: string | null
    name: string | null
    starts: JsonValue | null
    rank: string | null
    date: string | null
    time: string | null
    notes: string | null
    sailed: string | null
    resultColumns: JsonValue | null
    rest: JsonValue | null
    eventId: string | null
    publisherId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    _count: RaceCountAggregateOutputType | null
    _min: RaceMinAggregateOutputType | null
    _max: RaceMaxAggregateOutputType | null
  }

  type GetRaceGroupByPayload<T extends RaceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<RaceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RaceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RaceGroupByOutputType[P]>
            : GetScalarType<T[P], RaceGroupByOutputType[P]>
        }
      >
    >


  export type RaceSelect = {
    id?: boolean
    raceId?: boolean
    uniqueRaceString?: boolean
    name?: boolean
    starts?: boolean
    rank?: boolean
    date?: boolean
    time?: boolean
    notes?: boolean
    sailed?: boolean
    resultColumns?: boolean
    rest?: boolean
    eventId?: boolean
    publisherId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    Event?: boolean | EventArgs
    Publisher?: boolean | UserArgs
    Comps?: boolean | Race$CompsArgs
    Results?: boolean | Race$ResultsArgs
    follow?: boolean | Race$followArgs
    like?: boolean | Race$likeArgs
    _count?: boolean | RaceCountOutputTypeArgs
  }


  export type RaceInclude = {
    Event?: boolean | EventArgs
    Publisher?: boolean | UserArgs
    Comps?: boolean | Race$CompsArgs
    Results?: boolean | Race$ResultsArgs
    follow?: boolean | Race$followArgs
    like?: boolean | Race$likeArgs
    _count?: boolean | RaceCountOutputTypeArgs
  }

  export type RaceGetPayload<S extends boolean | null | undefined | RaceArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Race :
    S extends undefined ? never :
    S extends { include: any } & (RaceArgs | RaceFindManyArgs)
    ? Race  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'Event' ? EventGetPayload<S['include'][P]> | null :
        P extends 'Publisher' ? UserGetPayload<S['include'][P]> | null :
        P extends 'Comps' ? Array < CompGetPayload<S['include'][P]>>  :
        P extends 'Results' ? Array < ResultGetPayload<S['include'][P]>>  :
        P extends 'follow' ? Array < followGetPayload<S['include'][P]>>  :
        P extends 'like' ? Array < likeGetPayload<S['include'][P]>>  :
        P extends '_count' ? RaceCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (RaceArgs | RaceFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'Event' ? EventGetPayload<S['select'][P]> | null :
        P extends 'Publisher' ? UserGetPayload<S['select'][P]> | null :
        P extends 'Comps' ? Array < CompGetPayload<S['select'][P]>>  :
        P extends 'Results' ? Array < ResultGetPayload<S['select'][P]>>  :
        P extends 'follow' ? Array < followGetPayload<S['select'][P]>>  :
        P extends 'like' ? Array < likeGetPayload<S['select'][P]>>  :
        P extends '_count' ? RaceCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Race ? Race[P] : never
  } 
      : Race


  type RaceCountArgs = 
    Omit<RaceFindManyArgs, 'select' | 'include'> & {
      select?: RaceCountAggregateInputType | true
    }

  export interface RaceDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Race that matches the filter.
     * @param {RaceFindUniqueArgs} args - Arguments to find a Race
     * @example
     * // Get one Race
     * const race = await prisma.race.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends RaceFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, RaceFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Race'> extends True ? Prisma__RaceClient<RaceGetPayload<T>> : Prisma__RaceClient<RaceGetPayload<T> | null, null>

    /**
     * Find one Race that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {RaceFindUniqueOrThrowArgs} args - Arguments to find a Race
     * @example
     * // Get one Race
     * const race = await prisma.race.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends RaceFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, RaceFindUniqueOrThrowArgs>
    ): Prisma__RaceClient<RaceGetPayload<T>>

    /**
     * Find the first Race that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RaceFindFirstArgs} args - Arguments to find a Race
     * @example
     * // Get one Race
     * const race = await prisma.race.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends RaceFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, RaceFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Race'> extends True ? Prisma__RaceClient<RaceGetPayload<T>> : Prisma__RaceClient<RaceGetPayload<T> | null, null>

    /**
     * Find the first Race that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RaceFindFirstOrThrowArgs} args - Arguments to find a Race
     * @example
     * // Get one Race
     * const race = await prisma.race.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends RaceFindFirstOrThrowArgs>(
      args?: SelectSubset<T, RaceFindFirstOrThrowArgs>
    ): Prisma__RaceClient<RaceGetPayload<T>>

    /**
     * Find zero or more Races that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RaceFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Races
     * const races = await prisma.race.findMany()
     * 
     * // Get first 10 Races
     * const races = await prisma.race.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const raceWithIdOnly = await prisma.race.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends RaceFindManyArgs>(
      args?: SelectSubset<T, RaceFindManyArgs>
    ): Prisma.PrismaPromise<Array<RaceGetPayload<T>>>

    /**
     * Create a Race.
     * @param {RaceCreateArgs} args - Arguments to create a Race.
     * @example
     * // Create one Race
     * const Race = await prisma.race.create({
     *   data: {
     *     // ... data to create a Race
     *   }
     * })
     * 
    **/
    create<T extends RaceCreateArgs>(
      args: SelectSubset<T, RaceCreateArgs>
    ): Prisma__RaceClient<RaceGetPayload<T>>

    /**
     * Create many Races.
     *     @param {RaceCreateManyArgs} args - Arguments to create many Races.
     *     @example
     *     // Create many Races
     *     const race = await prisma.race.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends RaceCreateManyArgs>(
      args?: SelectSubset<T, RaceCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Race.
     * @param {RaceDeleteArgs} args - Arguments to delete one Race.
     * @example
     * // Delete one Race
     * const Race = await prisma.race.delete({
     *   where: {
     *     // ... filter to delete one Race
     *   }
     * })
     * 
    **/
    delete<T extends RaceDeleteArgs>(
      args: SelectSubset<T, RaceDeleteArgs>
    ): Prisma__RaceClient<RaceGetPayload<T>>

    /**
     * Update one Race.
     * @param {RaceUpdateArgs} args - Arguments to update one Race.
     * @example
     * // Update one Race
     * const race = await prisma.race.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends RaceUpdateArgs>(
      args: SelectSubset<T, RaceUpdateArgs>
    ): Prisma__RaceClient<RaceGetPayload<T>>

    /**
     * Delete zero or more Races.
     * @param {RaceDeleteManyArgs} args - Arguments to filter Races to delete.
     * @example
     * // Delete a few Races
     * const { count } = await prisma.race.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends RaceDeleteManyArgs>(
      args?: SelectSubset<T, RaceDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Races.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RaceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Races
     * const race = await prisma.race.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends RaceUpdateManyArgs>(
      args: SelectSubset<T, RaceUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Race.
     * @param {RaceUpsertArgs} args - Arguments to update or create a Race.
     * @example
     * // Update or create a Race
     * const race = await prisma.race.upsert({
     *   create: {
     *     // ... data to create a Race
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Race we want to update
     *   }
     * })
    **/
    upsert<T extends RaceUpsertArgs>(
      args: SelectSubset<T, RaceUpsertArgs>
    ): Prisma__RaceClient<RaceGetPayload<T>>

    /**
     * Count the number of Races.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RaceCountArgs} args - Arguments to filter Races to count.
     * @example
     * // Count the number of Races
     * const count = await prisma.race.count({
     *   where: {
     *     // ... the filter for the Races we want to count
     *   }
     * })
    **/
    count<T extends RaceCountArgs>(
      args?: Subset<T, RaceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RaceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Race.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RaceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RaceAggregateArgs>(args: Subset<T, RaceAggregateArgs>): Prisma.PrismaPromise<GetRaceAggregateType<T>>

    /**
     * Group by Race.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RaceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RaceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RaceGroupByArgs['orderBy'] }
        : { orderBy?: RaceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RaceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRaceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Race.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__RaceClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    Event<T extends EventArgs= {}>(args?: Subset<T, EventArgs>): Prisma__EventClient<EventGetPayload<T> | Null>;

    Publisher<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    Comps<T extends Race$CompsArgs= {}>(args?: Subset<T, Race$CompsArgs>): Prisma.PrismaPromise<Array<CompGetPayload<T>>| Null>;

    Results<T extends Race$ResultsArgs= {}>(args?: Subset<T, Race$ResultsArgs>): Prisma.PrismaPromise<Array<ResultGetPayload<T>>| Null>;

    follow<T extends Race$followArgs= {}>(args?: Subset<T, Race$followArgs>): Prisma.PrismaPromise<Array<followGetPayload<T>>| Null>;

    like<T extends Race$likeArgs= {}>(args?: Subset<T, Race$likeArgs>): Prisma.PrismaPromise<Array<likeGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Race base type for findUnique actions
   */
  export type RaceFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Race
     */
    select?: RaceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RaceInclude | null
    /**
     * Filter, which Race to fetch.
     */
    where: RaceWhereUniqueInput
  }

  /**
   * Race findUnique
   */
  export interface RaceFindUniqueArgs extends RaceFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Race findUniqueOrThrow
   */
  export type RaceFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Race
     */
    select?: RaceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RaceInclude | null
    /**
     * Filter, which Race to fetch.
     */
    where: RaceWhereUniqueInput
  }


  /**
   * Race base type for findFirst actions
   */
  export type RaceFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Race
     */
    select?: RaceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RaceInclude | null
    /**
     * Filter, which Race to fetch.
     */
    where?: RaceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Races to fetch.
     */
    orderBy?: Enumerable<RaceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Races.
     */
    cursor?: RaceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Races from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Races.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Races.
     */
    distinct?: Enumerable<RaceScalarFieldEnum>
  }

  /**
   * Race findFirst
   */
  export interface RaceFindFirstArgs extends RaceFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Race findFirstOrThrow
   */
  export type RaceFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Race
     */
    select?: RaceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RaceInclude | null
    /**
     * Filter, which Race to fetch.
     */
    where?: RaceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Races to fetch.
     */
    orderBy?: Enumerable<RaceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Races.
     */
    cursor?: RaceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Races from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Races.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Races.
     */
    distinct?: Enumerable<RaceScalarFieldEnum>
  }


  /**
   * Race findMany
   */
  export type RaceFindManyArgs = {
    /**
     * Select specific fields to fetch from the Race
     */
    select?: RaceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RaceInclude | null
    /**
     * Filter, which Races to fetch.
     */
    where?: RaceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Races to fetch.
     */
    orderBy?: Enumerable<RaceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Races.
     */
    cursor?: RaceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Races from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Races.
     */
    skip?: number
    distinct?: Enumerable<RaceScalarFieldEnum>
  }


  /**
   * Race create
   */
  export type RaceCreateArgs = {
    /**
     * Select specific fields to fetch from the Race
     */
    select?: RaceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RaceInclude | null
    /**
     * The data needed to create a Race.
     */
    data: XOR<RaceCreateInput, RaceUncheckedCreateInput>
  }


  /**
   * Race createMany
   */
  export type RaceCreateManyArgs = {
    /**
     * The data used to create many Races.
     */
    data: Enumerable<RaceCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Race update
   */
  export type RaceUpdateArgs = {
    /**
     * Select specific fields to fetch from the Race
     */
    select?: RaceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RaceInclude | null
    /**
     * The data needed to update a Race.
     */
    data: XOR<RaceUpdateInput, RaceUncheckedUpdateInput>
    /**
     * Choose, which Race to update.
     */
    where: RaceWhereUniqueInput
  }


  /**
   * Race updateMany
   */
  export type RaceUpdateManyArgs = {
    /**
     * The data used to update Races.
     */
    data: XOR<RaceUpdateManyMutationInput, RaceUncheckedUpdateManyInput>
    /**
     * Filter which Races to update
     */
    where?: RaceWhereInput
  }


  /**
   * Race upsert
   */
  export type RaceUpsertArgs = {
    /**
     * Select specific fields to fetch from the Race
     */
    select?: RaceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RaceInclude | null
    /**
     * The filter to search for the Race to update in case it exists.
     */
    where: RaceWhereUniqueInput
    /**
     * In case the Race found by the `where` argument doesn't exist, create a new Race with this data.
     */
    create: XOR<RaceCreateInput, RaceUncheckedCreateInput>
    /**
     * In case the Race was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RaceUpdateInput, RaceUncheckedUpdateInput>
  }


  /**
   * Race delete
   */
  export type RaceDeleteArgs = {
    /**
     * Select specific fields to fetch from the Race
     */
    select?: RaceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RaceInclude | null
    /**
     * Filter which Race to delete.
     */
    where: RaceWhereUniqueInput
  }


  /**
   * Race deleteMany
   */
  export type RaceDeleteManyArgs = {
    /**
     * Filter which Races to delete
     */
    where?: RaceWhereInput
  }


  /**
   * Race.Comps
   */
  export type Race$CompsArgs = {
    /**
     * Select specific fields to fetch from the Comp
     */
    select?: CompSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompInclude | null
    where?: CompWhereInput
    orderBy?: Enumerable<CompOrderByWithRelationInput>
    cursor?: CompWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<CompScalarFieldEnum>
  }


  /**
   * Race.Results
   */
  export type Race$ResultsArgs = {
    /**
     * Select specific fields to fetch from the Result
     */
    select?: ResultSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResultInclude | null
    where?: ResultWhereInput
    orderBy?: Enumerable<ResultOrderByWithRelationInput>
    cursor?: ResultWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ResultScalarFieldEnum>
  }


  /**
   * Race.follow
   */
  export type Race$followArgs = {
    /**
     * Select specific fields to fetch from the follow
     */
    select?: followSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: followInclude | null
    where?: followWhereInput
    orderBy?: Enumerable<followOrderByWithRelationInput>
    cursor?: followWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<FollowScalarFieldEnum>
  }


  /**
   * Race.like
   */
  export type Race$likeArgs = {
    /**
     * Select specific fields to fetch from the like
     */
    select?: likeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: likeInclude | null
    where?: likeWhereInput
    orderBy?: Enumerable<likeOrderByWithRelationInput>
    cursor?: likeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<LikeScalarFieldEnum>
  }


  /**
   * Race without action
   */
  export type RaceArgs = {
    /**
     * Select specific fields to fetch from the Race
     */
    select?: RaceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RaceInclude | null
  }



  /**
   * Model Comp
   */


  export type AggregateComp = {
    _count: CompCountAggregateOutputType | null
    _min: CompMinAggregateOutputType | null
    _max: CompMaxAggregateOutputType | null
  }

  export type CompMinAggregateOutputType = {
    id: string | null
    compId: string | null
    club: string | null
    boat: string | null
    skipper: string | null
    fleet: string | null
    division: string | null
    rating: string | null
    rank: string | null
    nett: string | null
    total: string | null
    publisherId: string | null
    eventId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CompMaxAggregateOutputType = {
    id: string | null
    compId: string | null
    club: string | null
    boat: string | null
    skipper: string | null
    fleet: string | null
    division: string | null
    rating: string | null
    rank: string | null
    nett: string | null
    total: string | null
    publisherId: string | null
    eventId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CompCountAggregateOutputType = {
    id: number
    compId: number
    club: number
    boat: number
    skipper: number
    fleet: number
    division: number
    rating: number
    rank: number
    nett: number
    total: number
    rest: number
    publisherId: number
    eventId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CompMinAggregateInputType = {
    id?: true
    compId?: true
    club?: true
    boat?: true
    skipper?: true
    fleet?: true
    division?: true
    rating?: true
    rank?: true
    nett?: true
    total?: true
    publisherId?: true
    eventId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CompMaxAggregateInputType = {
    id?: true
    compId?: true
    club?: true
    boat?: true
    skipper?: true
    fleet?: true
    division?: true
    rating?: true
    rank?: true
    nett?: true
    total?: true
    publisherId?: true
    eventId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CompCountAggregateInputType = {
    id?: true
    compId?: true
    club?: true
    boat?: true
    skipper?: true
    fleet?: true
    division?: true
    rating?: true
    rank?: true
    nett?: true
    total?: true
    rest?: true
    publisherId?: true
    eventId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CompAggregateArgs = {
    /**
     * Filter which Comp to aggregate.
     */
    where?: CompWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comps to fetch.
     */
    orderBy?: Enumerable<CompOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CompWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Comps
    **/
    _count?: true | CompCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CompMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CompMaxAggregateInputType
  }

  export type GetCompAggregateType<T extends CompAggregateArgs> = {
        [P in keyof T & keyof AggregateComp]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateComp[P]>
      : GetScalarType<T[P], AggregateComp[P]>
  }




  export type CompGroupByArgs = {
    where?: CompWhereInput
    orderBy?: Enumerable<CompOrderByWithAggregationInput>
    by: CompScalarFieldEnum[]
    having?: CompScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CompCountAggregateInputType | true
    _min?: CompMinAggregateInputType
    _max?: CompMaxAggregateInputType
  }


  export type CompGroupByOutputType = {
    id: string
    compId: string
    club: string | null
    boat: string | null
    skipper: string | null
    fleet: string | null
    division: string | null
    rating: string | null
    rank: string | null
    nett: string | null
    total: string | null
    rest: JsonValue | null
    publisherId: string | null
    eventId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    _count: CompCountAggregateOutputType | null
    _min: CompMinAggregateOutputType | null
    _max: CompMaxAggregateOutputType | null
  }

  type GetCompGroupByPayload<T extends CompGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<CompGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CompGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CompGroupByOutputType[P]>
            : GetScalarType<T[P], CompGroupByOutputType[P]>
        }
      >
    >


  export type CompSelect = {
    id?: boolean
    compId?: boolean
    club?: boolean
    boat?: boolean
    skipper?: boolean
    fleet?: boolean
    division?: boolean
    rating?: boolean
    rank?: boolean
    nett?: boolean
    total?: boolean
    rest?: boolean
    publisherId?: boolean
    eventId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    Publisher?: boolean | UserArgs
    Event?: boolean | EventArgs
    Results?: boolean | Comp$ResultsArgs
    Races?: boolean | Comp$RacesArgs
    follow?: boolean | Comp$followArgs
    like?: boolean | Comp$likeArgs
    _count?: boolean | CompCountOutputTypeArgs
  }


  export type CompInclude = {
    Publisher?: boolean | UserArgs
    Event?: boolean | EventArgs
    Results?: boolean | Comp$ResultsArgs
    Races?: boolean | Comp$RacesArgs
    follow?: boolean | Comp$followArgs
    like?: boolean | Comp$likeArgs
    _count?: boolean | CompCountOutputTypeArgs
  }

  export type CompGetPayload<S extends boolean | null | undefined | CompArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Comp :
    S extends undefined ? never :
    S extends { include: any } & (CompArgs | CompFindManyArgs)
    ? Comp  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'Publisher' ? UserGetPayload<S['include'][P]> | null :
        P extends 'Event' ? EventGetPayload<S['include'][P]> | null :
        P extends 'Results' ? Array < ResultGetPayload<S['include'][P]>>  :
        P extends 'Races' ? Array < RaceGetPayload<S['include'][P]>>  :
        P extends 'follow' ? Array < followGetPayload<S['include'][P]>>  :
        P extends 'like' ? Array < likeGetPayload<S['include'][P]>>  :
        P extends '_count' ? CompCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (CompArgs | CompFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'Publisher' ? UserGetPayload<S['select'][P]> | null :
        P extends 'Event' ? EventGetPayload<S['select'][P]> | null :
        P extends 'Results' ? Array < ResultGetPayload<S['select'][P]>>  :
        P extends 'Races' ? Array < RaceGetPayload<S['select'][P]>>  :
        P extends 'follow' ? Array < followGetPayload<S['select'][P]>>  :
        P extends 'like' ? Array < likeGetPayload<S['select'][P]>>  :
        P extends '_count' ? CompCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Comp ? Comp[P] : never
  } 
      : Comp


  type CompCountArgs = 
    Omit<CompFindManyArgs, 'select' | 'include'> & {
      select?: CompCountAggregateInputType | true
    }

  export interface CompDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Comp that matches the filter.
     * @param {CompFindUniqueArgs} args - Arguments to find a Comp
     * @example
     * // Get one Comp
     * const comp = await prisma.comp.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CompFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CompFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Comp'> extends True ? Prisma__CompClient<CompGetPayload<T>> : Prisma__CompClient<CompGetPayload<T> | null, null>

    /**
     * Find one Comp that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CompFindUniqueOrThrowArgs} args - Arguments to find a Comp
     * @example
     * // Get one Comp
     * const comp = await prisma.comp.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CompFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, CompFindUniqueOrThrowArgs>
    ): Prisma__CompClient<CompGetPayload<T>>

    /**
     * Find the first Comp that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompFindFirstArgs} args - Arguments to find a Comp
     * @example
     * // Get one Comp
     * const comp = await prisma.comp.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CompFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CompFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Comp'> extends True ? Prisma__CompClient<CompGetPayload<T>> : Prisma__CompClient<CompGetPayload<T> | null, null>

    /**
     * Find the first Comp that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompFindFirstOrThrowArgs} args - Arguments to find a Comp
     * @example
     * // Get one Comp
     * const comp = await prisma.comp.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CompFindFirstOrThrowArgs>(
      args?: SelectSubset<T, CompFindFirstOrThrowArgs>
    ): Prisma__CompClient<CompGetPayload<T>>

    /**
     * Find zero or more Comps that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Comps
     * const comps = await prisma.comp.findMany()
     * 
     * // Get first 10 Comps
     * const comps = await prisma.comp.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const compWithIdOnly = await prisma.comp.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CompFindManyArgs>(
      args?: SelectSubset<T, CompFindManyArgs>
    ): Prisma.PrismaPromise<Array<CompGetPayload<T>>>

    /**
     * Create a Comp.
     * @param {CompCreateArgs} args - Arguments to create a Comp.
     * @example
     * // Create one Comp
     * const Comp = await prisma.comp.create({
     *   data: {
     *     // ... data to create a Comp
     *   }
     * })
     * 
    **/
    create<T extends CompCreateArgs>(
      args: SelectSubset<T, CompCreateArgs>
    ): Prisma__CompClient<CompGetPayload<T>>

    /**
     * Create many Comps.
     *     @param {CompCreateManyArgs} args - Arguments to create many Comps.
     *     @example
     *     // Create many Comps
     *     const comp = await prisma.comp.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CompCreateManyArgs>(
      args?: SelectSubset<T, CompCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Comp.
     * @param {CompDeleteArgs} args - Arguments to delete one Comp.
     * @example
     * // Delete one Comp
     * const Comp = await prisma.comp.delete({
     *   where: {
     *     // ... filter to delete one Comp
     *   }
     * })
     * 
    **/
    delete<T extends CompDeleteArgs>(
      args: SelectSubset<T, CompDeleteArgs>
    ): Prisma__CompClient<CompGetPayload<T>>

    /**
     * Update one Comp.
     * @param {CompUpdateArgs} args - Arguments to update one Comp.
     * @example
     * // Update one Comp
     * const comp = await prisma.comp.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CompUpdateArgs>(
      args: SelectSubset<T, CompUpdateArgs>
    ): Prisma__CompClient<CompGetPayload<T>>

    /**
     * Delete zero or more Comps.
     * @param {CompDeleteManyArgs} args - Arguments to filter Comps to delete.
     * @example
     * // Delete a few Comps
     * const { count } = await prisma.comp.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CompDeleteManyArgs>(
      args?: SelectSubset<T, CompDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Comps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Comps
     * const comp = await prisma.comp.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CompUpdateManyArgs>(
      args: SelectSubset<T, CompUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Comp.
     * @param {CompUpsertArgs} args - Arguments to update or create a Comp.
     * @example
     * // Update or create a Comp
     * const comp = await prisma.comp.upsert({
     *   create: {
     *     // ... data to create a Comp
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Comp we want to update
     *   }
     * })
    **/
    upsert<T extends CompUpsertArgs>(
      args: SelectSubset<T, CompUpsertArgs>
    ): Prisma__CompClient<CompGetPayload<T>>

    /**
     * Count the number of Comps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompCountArgs} args - Arguments to filter Comps to count.
     * @example
     * // Count the number of Comps
     * const count = await prisma.comp.count({
     *   where: {
     *     // ... the filter for the Comps we want to count
     *   }
     * })
    **/
    count<T extends CompCountArgs>(
      args?: Subset<T, CompCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CompCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Comp.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CompAggregateArgs>(args: Subset<T, CompAggregateArgs>): Prisma.PrismaPromise<GetCompAggregateType<T>>

    /**
     * Group by Comp.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CompGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CompGroupByArgs['orderBy'] }
        : { orderBy?: CompGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CompGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCompGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Comp.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CompClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    Publisher<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    Event<T extends EventArgs= {}>(args?: Subset<T, EventArgs>): Prisma__EventClient<EventGetPayload<T> | Null>;

    Results<T extends Comp$ResultsArgs= {}>(args?: Subset<T, Comp$ResultsArgs>): Prisma.PrismaPromise<Array<ResultGetPayload<T>>| Null>;

    Races<T extends Comp$RacesArgs= {}>(args?: Subset<T, Comp$RacesArgs>): Prisma.PrismaPromise<Array<RaceGetPayload<T>>| Null>;

    follow<T extends Comp$followArgs= {}>(args?: Subset<T, Comp$followArgs>): Prisma.PrismaPromise<Array<followGetPayload<T>>| Null>;

    like<T extends Comp$likeArgs= {}>(args?: Subset<T, Comp$likeArgs>): Prisma.PrismaPromise<Array<likeGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Comp base type for findUnique actions
   */
  export type CompFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Comp
     */
    select?: CompSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompInclude | null
    /**
     * Filter, which Comp to fetch.
     */
    where: CompWhereUniqueInput
  }

  /**
   * Comp findUnique
   */
  export interface CompFindUniqueArgs extends CompFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Comp findUniqueOrThrow
   */
  export type CompFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Comp
     */
    select?: CompSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompInclude | null
    /**
     * Filter, which Comp to fetch.
     */
    where: CompWhereUniqueInput
  }


  /**
   * Comp base type for findFirst actions
   */
  export type CompFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Comp
     */
    select?: CompSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompInclude | null
    /**
     * Filter, which Comp to fetch.
     */
    where?: CompWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comps to fetch.
     */
    orderBy?: Enumerable<CompOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Comps.
     */
    cursor?: CompWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Comps.
     */
    distinct?: Enumerable<CompScalarFieldEnum>
  }

  /**
   * Comp findFirst
   */
  export interface CompFindFirstArgs extends CompFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Comp findFirstOrThrow
   */
  export type CompFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Comp
     */
    select?: CompSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompInclude | null
    /**
     * Filter, which Comp to fetch.
     */
    where?: CompWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comps to fetch.
     */
    orderBy?: Enumerable<CompOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Comps.
     */
    cursor?: CompWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Comps.
     */
    distinct?: Enumerable<CompScalarFieldEnum>
  }


  /**
   * Comp findMany
   */
  export type CompFindManyArgs = {
    /**
     * Select specific fields to fetch from the Comp
     */
    select?: CompSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompInclude | null
    /**
     * Filter, which Comps to fetch.
     */
    where?: CompWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comps to fetch.
     */
    orderBy?: Enumerable<CompOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Comps.
     */
    cursor?: CompWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comps.
     */
    skip?: number
    distinct?: Enumerable<CompScalarFieldEnum>
  }


  /**
   * Comp create
   */
  export type CompCreateArgs = {
    /**
     * Select specific fields to fetch from the Comp
     */
    select?: CompSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompInclude | null
    /**
     * The data needed to create a Comp.
     */
    data: XOR<CompCreateInput, CompUncheckedCreateInput>
  }


  /**
   * Comp createMany
   */
  export type CompCreateManyArgs = {
    /**
     * The data used to create many Comps.
     */
    data: Enumerable<CompCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Comp update
   */
  export type CompUpdateArgs = {
    /**
     * Select specific fields to fetch from the Comp
     */
    select?: CompSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompInclude | null
    /**
     * The data needed to update a Comp.
     */
    data: XOR<CompUpdateInput, CompUncheckedUpdateInput>
    /**
     * Choose, which Comp to update.
     */
    where: CompWhereUniqueInput
  }


  /**
   * Comp updateMany
   */
  export type CompUpdateManyArgs = {
    /**
     * The data used to update Comps.
     */
    data: XOR<CompUpdateManyMutationInput, CompUncheckedUpdateManyInput>
    /**
     * Filter which Comps to update
     */
    where?: CompWhereInput
  }


  /**
   * Comp upsert
   */
  export type CompUpsertArgs = {
    /**
     * Select specific fields to fetch from the Comp
     */
    select?: CompSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompInclude | null
    /**
     * The filter to search for the Comp to update in case it exists.
     */
    where: CompWhereUniqueInput
    /**
     * In case the Comp found by the `where` argument doesn't exist, create a new Comp with this data.
     */
    create: XOR<CompCreateInput, CompUncheckedCreateInput>
    /**
     * In case the Comp was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CompUpdateInput, CompUncheckedUpdateInput>
  }


  /**
   * Comp delete
   */
  export type CompDeleteArgs = {
    /**
     * Select specific fields to fetch from the Comp
     */
    select?: CompSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompInclude | null
    /**
     * Filter which Comp to delete.
     */
    where: CompWhereUniqueInput
  }


  /**
   * Comp deleteMany
   */
  export type CompDeleteManyArgs = {
    /**
     * Filter which Comps to delete
     */
    where?: CompWhereInput
  }


  /**
   * Comp.Results
   */
  export type Comp$ResultsArgs = {
    /**
     * Select specific fields to fetch from the Result
     */
    select?: ResultSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResultInclude | null
    where?: ResultWhereInput
    orderBy?: Enumerable<ResultOrderByWithRelationInput>
    cursor?: ResultWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ResultScalarFieldEnum>
  }


  /**
   * Comp.Races
   */
  export type Comp$RacesArgs = {
    /**
     * Select specific fields to fetch from the Race
     */
    select?: RaceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RaceInclude | null
    where?: RaceWhereInput
    orderBy?: Enumerable<RaceOrderByWithRelationInput>
    cursor?: RaceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<RaceScalarFieldEnum>
  }


  /**
   * Comp.follow
   */
  export type Comp$followArgs = {
    /**
     * Select specific fields to fetch from the follow
     */
    select?: followSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: followInclude | null
    where?: followWhereInput
    orderBy?: Enumerable<followOrderByWithRelationInput>
    cursor?: followWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<FollowScalarFieldEnum>
  }


  /**
   * Comp.like
   */
  export type Comp$likeArgs = {
    /**
     * Select specific fields to fetch from the like
     */
    select?: likeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: likeInclude | null
    where?: likeWhereInput
    orderBy?: Enumerable<likeOrderByWithRelationInput>
    cursor?: likeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<LikeScalarFieldEnum>
  }


  /**
   * Comp without action
   */
  export type CompArgs = {
    /**
     * Select specific fields to fetch from the Comp
     */
    select?: CompSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompInclude | null
  }



  /**
   * Model Result
   */


  export type AggregateResult = {
    _count: ResultCountAggregateOutputType | null
    _min: ResultMinAggregateOutputType | null
    _max: ResultMaxAggregateOutputType | null
  }

  export type ResultMinAggregateOutputType = {
    id: string | null
    resultId: string | null
    finish: string | null
    start: string | null
    points: string | null
    position: string | null
    discard: string | null
    corrected: string | null
    resultType: string | null
    elasped: string | null
    supposedRating: string | null
    elapsedWin: string | null
    ratingWin: string | null
    rrset: string | null
    publisherId: string | null
    eventId: string | null
    compId: string | null
    raceId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ResultMaxAggregateOutputType = {
    id: string | null
    resultId: string | null
    finish: string | null
    start: string | null
    points: string | null
    position: string | null
    discard: string | null
    corrected: string | null
    resultType: string | null
    elasped: string | null
    supposedRating: string | null
    elapsedWin: string | null
    ratingWin: string | null
    rrset: string | null
    publisherId: string | null
    eventId: string | null
    compId: string | null
    raceId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ResultCountAggregateOutputType = {
    id: number
    resultId: number
    finish: number
    start: number
    points: number
    position: number
    discard: number
    corrected: number
    resultType: number
    elasped: number
    supposedRating: number
    elapsedWin: number
    ratingWin: number
    rrset: number
    publisherId: number
    eventId: number
    compId: number
    raceId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ResultMinAggregateInputType = {
    id?: true
    resultId?: true
    finish?: true
    start?: true
    points?: true
    position?: true
    discard?: true
    corrected?: true
    resultType?: true
    elasped?: true
    supposedRating?: true
    elapsedWin?: true
    ratingWin?: true
    rrset?: true
    publisherId?: true
    eventId?: true
    compId?: true
    raceId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ResultMaxAggregateInputType = {
    id?: true
    resultId?: true
    finish?: true
    start?: true
    points?: true
    position?: true
    discard?: true
    corrected?: true
    resultType?: true
    elasped?: true
    supposedRating?: true
    elapsedWin?: true
    ratingWin?: true
    rrset?: true
    publisherId?: true
    eventId?: true
    compId?: true
    raceId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ResultCountAggregateInputType = {
    id?: true
    resultId?: true
    finish?: true
    start?: true
    points?: true
    position?: true
    discard?: true
    corrected?: true
    resultType?: true
    elasped?: true
    supposedRating?: true
    elapsedWin?: true
    ratingWin?: true
    rrset?: true
    publisherId?: true
    eventId?: true
    compId?: true
    raceId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ResultAggregateArgs = {
    /**
     * Filter which Result to aggregate.
     */
    where?: ResultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Results to fetch.
     */
    orderBy?: Enumerable<ResultOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ResultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Results from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Results.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Results
    **/
    _count?: true | ResultCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ResultMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ResultMaxAggregateInputType
  }

  export type GetResultAggregateType<T extends ResultAggregateArgs> = {
        [P in keyof T & keyof AggregateResult]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateResult[P]>
      : GetScalarType<T[P], AggregateResult[P]>
  }




  export type ResultGroupByArgs = {
    where?: ResultWhereInput
    orderBy?: Enumerable<ResultOrderByWithAggregationInput>
    by: ResultScalarFieldEnum[]
    having?: ResultScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ResultCountAggregateInputType | true
    _min?: ResultMinAggregateInputType
    _max?: ResultMaxAggregateInputType
  }


  export type ResultGroupByOutputType = {
    id: string
    resultId: string | null
    finish: string | null
    start: string | null
    points: string | null
    position: string | null
    discard: string | null
    corrected: string | null
    resultType: string | null
    elasped: string | null
    supposedRating: string | null
    elapsedWin: string | null
    ratingWin: string | null
    rrset: string | null
    publisherId: string
    eventId: string | null
    compId: string | null
    raceId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    _count: ResultCountAggregateOutputType | null
    _min: ResultMinAggregateOutputType | null
    _max: ResultMaxAggregateOutputType | null
  }

  type GetResultGroupByPayload<T extends ResultGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ResultGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ResultGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ResultGroupByOutputType[P]>
            : GetScalarType<T[P], ResultGroupByOutputType[P]>
        }
      >
    >


  export type ResultSelect = {
    id?: boolean
    resultId?: boolean
    finish?: boolean
    start?: boolean
    points?: boolean
    position?: boolean
    discard?: boolean
    corrected?: boolean
    resultType?: boolean
    elasped?: boolean
    supposedRating?: boolean
    elapsedWin?: boolean
    ratingWin?: boolean
    rrset?: boolean
    publisherId?: boolean
    eventId?: boolean
    compId?: boolean
    raceId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    Publisher?: boolean | UserArgs
    Event?: boolean | EventArgs
    Comp?: boolean | CompArgs
    Race?: boolean | RaceArgs
  }


  export type ResultInclude = {
    Publisher?: boolean | UserArgs
    Event?: boolean | EventArgs
    Comp?: boolean | CompArgs
    Race?: boolean | RaceArgs
  }

  export type ResultGetPayload<S extends boolean | null | undefined | ResultArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Result :
    S extends undefined ? never :
    S extends { include: any } & (ResultArgs | ResultFindManyArgs)
    ? Result  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'Publisher' ? UserGetPayload<S['include'][P]> :
        P extends 'Event' ? EventGetPayload<S['include'][P]> | null :
        P extends 'Comp' ? CompGetPayload<S['include'][P]> | null :
        P extends 'Race' ? RaceGetPayload<S['include'][P]> | null :  never
  } 
    : S extends { select: any } & (ResultArgs | ResultFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'Publisher' ? UserGetPayload<S['select'][P]> :
        P extends 'Event' ? EventGetPayload<S['select'][P]> | null :
        P extends 'Comp' ? CompGetPayload<S['select'][P]> | null :
        P extends 'Race' ? RaceGetPayload<S['select'][P]> | null :  P extends keyof Result ? Result[P] : never
  } 
      : Result


  type ResultCountArgs = 
    Omit<ResultFindManyArgs, 'select' | 'include'> & {
      select?: ResultCountAggregateInputType | true
    }

  export interface ResultDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Result that matches the filter.
     * @param {ResultFindUniqueArgs} args - Arguments to find a Result
     * @example
     * // Get one Result
     * const result = await prisma.result.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ResultFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ResultFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Result'> extends True ? Prisma__ResultClient<ResultGetPayload<T>> : Prisma__ResultClient<ResultGetPayload<T> | null, null>

    /**
     * Find one Result that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ResultFindUniqueOrThrowArgs} args - Arguments to find a Result
     * @example
     * // Get one Result
     * const result = await prisma.result.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ResultFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ResultFindUniqueOrThrowArgs>
    ): Prisma__ResultClient<ResultGetPayload<T>>

    /**
     * Find the first Result that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResultFindFirstArgs} args - Arguments to find a Result
     * @example
     * // Get one Result
     * const result = await prisma.result.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ResultFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ResultFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Result'> extends True ? Prisma__ResultClient<ResultGetPayload<T>> : Prisma__ResultClient<ResultGetPayload<T> | null, null>

    /**
     * Find the first Result that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResultFindFirstOrThrowArgs} args - Arguments to find a Result
     * @example
     * // Get one Result
     * const result = await prisma.result.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ResultFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ResultFindFirstOrThrowArgs>
    ): Prisma__ResultClient<ResultGetPayload<T>>

    /**
     * Find zero or more Results that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResultFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Results
     * const results = await prisma.result.findMany()
     * 
     * // Get first 10 Results
     * const results = await prisma.result.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const resultWithIdOnly = await prisma.result.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ResultFindManyArgs>(
      args?: SelectSubset<T, ResultFindManyArgs>
    ): Prisma.PrismaPromise<Array<ResultGetPayload<T>>>

    /**
     * Create a Result.
     * @param {ResultCreateArgs} args - Arguments to create a Result.
     * @example
     * // Create one Result
     * const Result = await prisma.result.create({
     *   data: {
     *     // ... data to create a Result
     *   }
     * })
     * 
    **/
    create<T extends ResultCreateArgs>(
      args: SelectSubset<T, ResultCreateArgs>
    ): Prisma__ResultClient<ResultGetPayload<T>>

    /**
     * Create many Results.
     *     @param {ResultCreateManyArgs} args - Arguments to create many Results.
     *     @example
     *     // Create many Results
     *     const result = await prisma.result.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ResultCreateManyArgs>(
      args?: SelectSubset<T, ResultCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Result.
     * @param {ResultDeleteArgs} args - Arguments to delete one Result.
     * @example
     * // Delete one Result
     * const Result = await prisma.result.delete({
     *   where: {
     *     // ... filter to delete one Result
     *   }
     * })
     * 
    **/
    delete<T extends ResultDeleteArgs>(
      args: SelectSubset<T, ResultDeleteArgs>
    ): Prisma__ResultClient<ResultGetPayload<T>>

    /**
     * Update one Result.
     * @param {ResultUpdateArgs} args - Arguments to update one Result.
     * @example
     * // Update one Result
     * const result = await prisma.result.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ResultUpdateArgs>(
      args: SelectSubset<T, ResultUpdateArgs>
    ): Prisma__ResultClient<ResultGetPayload<T>>

    /**
     * Delete zero or more Results.
     * @param {ResultDeleteManyArgs} args - Arguments to filter Results to delete.
     * @example
     * // Delete a few Results
     * const { count } = await prisma.result.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ResultDeleteManyArgs>(
      args?: SelectSubset<T, ResultDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Results.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResultUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Results
     * const result = await prisma.result.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ResultUpdateManyArgs>(
      args: SelectSubset<T, ResultUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Result.
     * @param {ResultUpsertArgs} args - Arguments to update or create a Result.
     * @example
     * // Update or create a Result
     * const result = await prisma.result.upsert({
     *   create: {
     *     // ... data to create a Result
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Result we want to update
     *   }
     * })
    **/
    upsert<T extends ResultUpsertArgs>(
      args: SelectSubset<T, ResultUpsertArgs>
    ): Prisma__ResultClient<ResultGetPayload<T>>

    /**
     * Count the number of Results.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResultCountArgs} args - Arguments to filter Results to count.
     * @example
     * // Count the number of Results
     * const count = await prisma.result.count({
     *   where: {
     *     // ... the filter for the Results we want to count
     *   }
     * })
    **/
    count<T extends ResultCountArgs>(
      args?: Subset<T, ResultCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ResultCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Result.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResultAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ResultAggregateArgs>(args: Subset<T, ResultAggregateArgs>): Prisma.PrismaPromise<GetResultAggregateType<T>>

    /**
     * Group by Result.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResultGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ResultGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ResultGroupByArgs['orderBy'] }
        : { orderBy?: ResultGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ResultGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetResultGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Result.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ResultClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    Publisher<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    Event<T extends EventArgs= {}>(args?: Subset<T, EventArgs>): Prisma__EventClient<EventGetPayload<T> | Null>;

    Comp<T extends CompArgs= {}>(args?: Subset<T, CompArgs>): Prisma__CompClient<CompGetPayload<T> | Null>;

    Race<T extends RaceArgs= {}>(args?: Subset<T, RaceArgs>): Prisma__RaceClient<RaceGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Result base type for findUnique actions
   */
  export type ResultFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Result
     */
    select?: ResultSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResultInclude | null
    /**
     * Filter, which Result to fetch.
     */
    where: ResultWhereUniqueInput
  }

  /**
   * Result findUnique
   */
  export interface ResultFindUniqueArgs extends ResultFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Result findUniqueOrThrow
   */
  export type ResultFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Result
     */
    select?: ResultSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResultInclude | null
    /**
     * Filter, which Result to fetch.
     */
    where: ResultWhereUniqueInput
  }


  /**
   * Result base type for findFirst actions
   */
  export type ResultFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Result
     */
    select?: ResultSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResultInclude | null
    /**
     * Filter, which Result to fetch.
     */
    where?: ResultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Results to fetch.
     */
    orderBy?: Enumerable<ResultOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Results.
     */
    cursor?: ResultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Results from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Results.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Results.
     */
    distinct?: Enumerable<ResultScalarFieldEnum>
  }

  /**
   * Result findFirst
   */
  export interface ResultFindFirstArgs extends ResultFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Result findFirstOrThrow
   */
  export type ResultFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Result
     */
    select?: ResultSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResultInclude | null
    /**
     * Filter, which Result to fetch.
     */
    where?: ResultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Results to fetch.
     */
    orderBy?: Enumerable<ResultOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Results.
     */
    cursor?: ResultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Results from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Results.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Results.
     */
    distinct?: Enumerable<ResultScalarFieldEnum>
  }


  /**
   * Result findMany
   */
  export type ResultFindManyArgs = {
    /**
     * Select specific fields to fetch from the Result
     */
    select?: ResultSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResultInclude | null
    /**
     * Filter, which Results to fetch.
     */
    where?: ResultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Results to fetch.
     */
    orderBy?: Enumerable<ResultOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Results.
     */
    cursor?: ResultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Results from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Results.
     */
    skip?: number
    distinct?: Enumerable<ResultScalarFieldEnum>
  }


  /**
   * Result create
   */
  export type ResultCreateArgs = {
    /**
     * Select specific fields to fetch from the Result
     */
    select?: ResultSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResultInclude | null
    /**
     * The data needed to create a Result.
     */
    data: XOR<ResultCreateInput, ResultUncheckedCreateInput>
  }


  /**
   * Result createMany
   */
  export type ResultCreateManyArgs = {
    /**
     * The data used to create many Results.
     */
    data: Enumerable<ResultCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Result update
   */
  export type ResultUpdateArgs = {
    /**
     * Select specific fields to fetch from the Result
     */
    select?: ResultSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResultInclude | null
    /**
     * The data needed to update a Result.
     */
    data: XOR<ResultUpdateInput, ResultUncheckedUpdateInput>
    /**
     * Choose, which Result to update.
     */
    where: ResultWhereUniqueInput
  }


  /**
   * Result updateMany
   */
  export type ResultUpdateManyArgs = {
    /**
     * The data used to update Results.
     */
    data: XOR<ResultUpdateManyMutationInput, ResultUncheckedUpdateManyInput>
    /**
     * Filter which Results to update
     */
    where?: ResultWhereInput
  }


  /**
   * Result upsert
   */
  export type ResultUpsertArgs = {
    /**
     * Select specific fields to fetch from the Result
     */
    select?: ResultSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResultInclude | null
    /**
     * The filter to search for the Result to update in case it exists.
     */
    where: ResultWhereUniqueInput
    /**
     * In case the Result found by the `where` argument doesn't exist, create a new Result with this data.
     */
    create: XOR<ResultCreateInput, ResultUncheckedCreateInput>
    /**
     * In case the Result was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ResultUpdateInput, ResultUncheckedUpdateInput>
  }


  /**
   * Result delete
   */
  export type ResultDeleteArgs = {
    /**
     * Select specific fields to fetch from the Result
     */
    select?: ResultSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResultInclude | null
    /**
     * Filter which Result to delete.
     */
    where: ResultWhereUniqueInput
  }


  /**
   * Result deleteMany
   */
  export type ResultDeleteManyArgs = {
    /**
     * Filter which Results to delete
     */
    where?: ResultWhereInput
  }


  /**
   * Result without action
   */
  export type ResultArgs = {
    /**
     * Select specific fields to fetch from the Result
     */
    select?: ResultSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResultInclude | null
  }



  /**
   * Model Organization
   */


  export type AggregateOrganization = {
    _count: OrganizationCountAggregateOutputType | null
    _min: OrganizationMinAggregateOutputType | null
    _max: OrganizationMaxAggregateOutputType | null
  }

  export type OrganizationMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    tag: string | null
    website: string | null
    email: string | null
    titleImage: string | null
    ownerId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type OrganizationMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    tag: string | null
    website: string | null
    email: string | null
    titleImage: string | null
    ownerId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type OrganizationCountAggregateOutputType = {
    id: number
    name: number
    description: number
    tag: number
    website: number
    email: number
    contact: number
    titleImage: number
    ownerId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type OrganizationMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    tag?: true
    website?: true
    email?: true
    titleImage?: true
    ownerId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type OrganizationMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    tag?: true
    website?: true
    email?: true
    titleImage?: true
    ownerId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type OrganizationCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    tag?: true
    website?: true
    email?: true
    contact?: true
    titleImage?: true
    ownerId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type OrganizationAggregateArgs = {
    /**
     * Filter which Organization to aggregate.
     */
    where?: OrganizationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Organizations to fetch.
     */
    orderBy?: Enumerable<OrganizationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OrganizationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Organizations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Organizations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Organizations
    **/
    _count?: true | OrganizationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrganizationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrganizationMaxAggregateInputType
  }

  export type GetOrganizationAggregateType<T extends OrganizationAggregateArgs> = {
        [P in keyof T & keyof AggregateOrganization]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrganization[P]>
      : GetScalarType<T[P], AggregateOrganization[P]>
  }




  export type OrganizationGroupByArgs = {
    where?: OrganizationWhereInput
    orderBy?: Enumerable<OrganizationOrderByWithAggregationInput>
    by: OrganizationScalarFieldEnum[]
    having?: OrganizationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrganizationCountAggregateInputType | true
    _min?: OrganizationMinAggregateInputType
    _max?: OrganizationMaxAggregateInputType
  }


  export type OrganizationGroupByOutputType = {
    id: string
    name: string
    description: string | null
    tag: string | null
    website: string | null
    email: string | null
    contact: JsonValue | null
    titleImage: string | null
    ownerId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    _count: OrganizationCountAggregateOutputType | null
    _min: OrganizationMinAggregateOutputType | null
    _max: OrganizationMaxAggregateOutputType | null
  }

  type GetOrganizationGroupByPayload<T extends OrganizationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<OrganizationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrganizationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrganizationGroupByOutputType[P]>
            : GetScalarType<T[P], OrganizationGroupByOutputType[P]>
        }
      >
    >


  export type OrganizationSelect = {
    id?: boolean
    name?: boolean
    description?: boolean
    tag?: boolean
    website?: boolean
    email?: boolean
    contact?: boolean
    titleImage?: boolean
    ownerId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    Owner?: boolean | UserArgs
    Series?: boolean | Organization$SeriesArgs
    Events?: boolean | Organization$EventsArgs
    follow?: boolean | Organization$followArgs
    like?: boolean | Organization$likeArgs
    _count?: boolean | OrganizationCountOutputTypeArgs
  }


  export type OrganizationInclude = {
    Owner?: boolean | UserArgs
    Series?: boolean | Organization$SeriesArgs
    Events?: boolean | Organization$EventsArgs
    follow?: boolean | Organization$followArgs
    like?: boolean | Organization$likeArgs
    _count?: boolean | OrganizationCountOutputTypeArgs
  }

  export type OrganizationGetPayload<S extends boolean | null | undefined | OrganizationArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Organization :
    S extends undefined ? never :
    S extends { include: any } & (OrganizationArgs | OrganizationFindManyArgs)
    ? Organization  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'Owner' ? UserGetPayload<S['include'][P]> | null :
        P extends 'Series' ? Array < SeriesGetPayload<S['include'][P]>>  :
        P extends 'Events' ? Array < EventGetPayload<S['include'][P]>>  :
        P extends 'follow' ? Array < followGetPayload<S['include'][P]>>  :
        P extends 'like' ? Array < likeGetPayload<S['include'][P]>>  :
        P extends '_count' ? OrganizationCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (OrganizationArgs | OrganizationFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'Owner' ? UserGetPayload<S['select'][P]> | null :
        P extends 'Series' ? Array < SeriesGetPayload<S['select'][P]>>  :
        P extends 'Events' ? Array < EventGetPayload<S['select'][P]>>  :
        P extends 'follow' ? Array < followGetPayload<S['select'][P]>>  :
        P extends 'like' ? Array < likeGetPayload<S['select'][P]>>  :
        P extends '_count' ? OrganizationCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Organization ? Organization[P] : never
  } 
      : Organization


  type OrganizationCountArgs = 
    Omit<OrganizationFindManyArgs, 'select' | 'include'> & {
      select?: OrganizationCountAggregateInputType | true
    }

  export interface OrganizationDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Organization that matches the filter.
     * @param {OrganizationFindUniqueArgs} args - Arguments to find a Organization
     * @example
     * // Get one Organization
     * const organization = await prisma.organization.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends OrganizationFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, OrganizationFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Organization'> extends True ? Prisma__OrganizationClient<OrganizationGetPayload<T>> : Prisma__OrganizationClient<OrganizationGetPayload<T> | null, null>

    /**
     * Find one Organization that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {OrganizationFindUniqueOrThrowArgs} args - Arguments to find a Organization
     * @example
     * // Get one Organization
     * const organization = await prisma.organization.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends OrganizationFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, OrganizationFindUniqueOrThrowArgs>
    ): Prisma__OrganizationClient<OrganizationGetPayload<T>>

    /**
     * Find the first Organization that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationFindFirstArgs} args - Arguments to find a Organization
     * @example
     * // Get one Organization
     * const organization = await prisma.organization.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends OrganizationFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, OrganizationFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Organization'> extends True ? Prisma__OrganizationClient<OrganizationGetPayload<T>> : Prisma__OrganizationClient<OrganizationGetPayload<T> | null, null>

    /**
     * Find the first Organization that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationFindFirstOrThrowArgs} args - Arguments to find a Organization
     * @example
     * // Get one Organization
     * const organization = await prisma.organization.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends OrganizationFindFirstOrThrowArgs>(
      args?: SelectSubset<T, OrganizationFindFirstOrThrowArgs>
    ): Prisma__OrganizationClient<OrganizationGetPayload<T>>

    /**
     * Find zero or more Organizations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Organizations
     * const organizations = await prisma.organization.findMany()
     * 
     * // Get first 10 Organizations
     * const organizations = await prisma.organization.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const organizationWithIdOnly = await prisma.organization.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends OrganizationFindManyArgs>(
      args?: SelectSubset<T, OrganizationFindManyArgs>
    ): Prisma.PrismaPromise<Array<OrganizationGetPayload<T>>>

    /**
     * Create a Organization.
     * @param {OrganizationCreateArgs} args - Arguments to create a Organization.
     * @example
     * // Create one Organization
     * const Organization = await prisma.organization.create({
     *   data: {
     *     // ... data to create a Organization
     *   }
     * })
     * 
    **/
    create<T extends OrganizationCreateArgs>(
      args: SelectSubset<T, OrganizationCreateArgs>
    ): Prisma__OrganizationClient<OrganizationGetPayload<T>>

    /**
     * Create many Organizations.
     *     @param {OrganizationCreateManyArgs} args - Arguments to create many Organizations.
     *     @example
     *     // Create many Organizations
     *     const organization = await prisma.organization.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends OrganizationCreateManyArgs>(
      args?: SelectSubset<T, OrganizationCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Organization.
     * @param {OrganizationDeleteArgs} args - Arguments to delete one Organization.
     * @example
     * // Delete one Organization
     * const Organization = await prisma.organization.delete({
     *   where: {
     *     // ... filter to delete one Organization
     *   }
     * })
     * 
    **/
    delete<T extends OrganizationDeleteArgs>(
      args: SelectSubset<T, OrganizationDeleteArgs>
    ): Prisma__OrganizationClient<OrganizationGetPayload<T>>

    /**
     * Update one Organization.
     * @param {OrganizationUpdateArgs} args - Arguments to update one Organization.
     * @example
     * // Update one Organization
     * const organization = await prisma.organization.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends OrganizationUpdateArgs>(
      args: SelectSubset<T, OrganizationUpdateArgs>
    ): Prisma__OrganizationClient<OrganizationGetPayload<T>>

    /**
     * Delete zero or more Organizations.
     * @param {OrganizationDeleteManyArgs} args - Arguments to filter Organizations to delete.
     * @example
     * // Delete a few Organizations
     * const { count } = await prisma.organization.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends OrganizationDeleteManyArgs>(
      args?: SelectSubset<T, OrganizationDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Organizations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Organizations
     * const organization = await prisma.organization.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends OrganizationUpdateManyArgs>(
      args: SelectSubset<T, OrganizationUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Organization.
     * @param {OrganizationUpsertArgs} args - Arguments to update or create a Organization.
     * @example
     * // Update or create a Organization
     * const organization = await prisma.organization.upsert({
     *   create: {
     *     // ... data to create a Organization
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Organization we want to update
     *   }
     * })
    **/
    upsert<T extends OrganizationUpsertArgs>(
      args: SelectSubset<T, OrganizationUpsertArgs>
    ): Prisma__OrganizationClient<OrganizationGetPayload<T>>

    /**
     * Count the number of Organizations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationCountArgs} args - Arguments to filter Organizations to count.
     * @example
     * // Count the number of Organizations
     * const count = await prisma.organization.count({
     *   where: {
     *     // ... the filter for the Organizations we want to count
     *   }
     * })
    **/
    count<T extends OrganizationCountArgs>(
      args?: Subset<T, OrganizationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrganizationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Organization.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrganizationAggregateArgs>(args: Subset<T, OrganizationAggregateArgs>): Prisma.PrismaPromise<GetOrganizationAggregateType<T>>

    /**
     * Group by Organization.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OrganizationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OrganizationGroupByArgs['orderBy'] }
        : { orderBy?: OrganizationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OrganizationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrganizationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Organization.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__OrganizationClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    Owner<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    Series<T extends Organization$SeriesArgs= {}>(args?: Subset<T, Organization$SeriesArgs>): Prisma.PrismaPromise<Array<SeriesGetPayload<T>>| Null>;

    Events<T extends Organization$EventsArgs= {}>(args?: Subset<T, Organization$EventsArgs>): Prisma.PrismaPromise<Array<EventGetPayload<T>>| Null>;

    follow<T extends Organization$followArgs= {}>(args?: Subset<T, Organization$followArgs>): Prisma.PrismaPromise<Array<followGetPayload<T>>| Null>;

    like<T extends Organization$likeArgs= {}>(args?: Subset<T, Organization$likeArgs>): Prisma.PrismaPromise<Array<likeGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Organization base type for findUnique actions
   */
  export type OrganizationFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrganizationInclude | null
    /**
     * Filter, which Organization to fetch.
     */
    where: OrganizationWhereUniqueInput
  }

  /**
   * Organization findUnique
   */
  export interface OrganizationFindUniqueArgs extends OrganizationFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Organization findUniqueOrThrow
   */
  export type OrganizationFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrganizationInclude | null
    /**
     * Filter, which Organization to fetch.
     */
    where: OrganizationWhereUniqueInput
  }


  /**
   * Organization base type for findFirst actions
   */
  export type OrganizationFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrganizationInclude | null
    /**
     * Filter, which Organization to fetch.
     */
    where?: OrganizationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Organizations to fetch.
     */
    orderBy?: Enumerable<OrganizationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Organizations.
     */
    cursor?: OrganizationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Organizations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Organizations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Organizations.
     */
    distinct?: Enumerable<OrganizationScalarFieldEnum>
  }

  /**
   * Organization findFirst
   */
  export interface OrganizationFindFirstArgs extends OrganizationFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Organization findFirstOrThrow
   */
  export type OrganizationFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrganizationInclude | null
    /**
     * Filter, which Organization to fetch.
     */
    where?: OrganizationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Organizations to fetch.
     */
    orderBy?: Enumerable<OrganizationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Organizations.
     */
    cursor?: OrganizationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Organizations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Organizations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Organizations.
     */
    distinct?: Enumerable<OrganizationScalarFieldEnum>
  }


  /**
   * Organization findMany
   */
  export type OrganizationFindManyArgs = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrganizationInclude | null
    /**
     * Filter, which Organizations to fetch.
     */
    where?: OrganizationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Organizations to fetch.
     */
    orderBy?: Enumerable<OrganizationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Organizations.
     */
    cursor?: OrganizationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Organizations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Organizations.
     */
    skip?: number
    distinct?: Enumerable<OrganizationScalarFieldEnum>
  }


  /**
   * Organization create
   */
  export type OrganizationCreateArgs = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrganizationInclude | null
    /**
     * The data needed to create a Organization.
     */
    data: XOR<OrganizationCreateInput, OrganizationUncheckedCreateInput>
  }


  /**
   * Organization createMany
   */
  export type OrganizationCreateManyArgs = {
    /**
     * The data used to create many Organizations.
     */
    data: Enumerable<OrganizationCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Organization update
   */
  export type OrganizationUpdateArgs = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrganizationInclude | null
    /**
     * The data needed to update a Organization.
     */
    data: XOR<OrganizationUpdateInput, OrganizationUncheckedUpdateInput>
    /**
     * Choose, which Organization to update.
     */
    where: OrganizationWhereUniqueInput
  }


  /**
   * Organization updateMany
   */
  export type OrganizationUpdateManyArgs = {
    /**
     * The data used to update Organizations.
     */
    data: XOR<OrganizationUpdateManyMutationInput, OrganizationUncheckedUpdateManyInput>
    /**
     * Filter which Organizations to update
     */
    where?: OrganizationWhereInput
  }


  /**
   * Organization upsert
   */
  export type OrganizationUpsertArgs = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrganizationInclude | null
    /**
     * The filter to search for the Organization to update in case it exists.
     */
    where: OrganizationWhereUniqueInput
    /**
     * In case the Organization found by the `where` argument doesn't exist, create a new Organization with this data.
     */
    create: XOR<OrganizationCreateInput, OrganizationUncheckedCreateInput>
    /**
     * In case the Organization was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OrganizationUpdateInput, OrganizationUncheckedUpdateInput>
  }


  /**
   * Organization delete
   */
  export type OrganizationDeleteArgs = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrganizationInclude | null
    /**
     * Filter which Organization to delete.
     */
    where: OrganizationWhereUniqueInput
  }


  /**
   * Organization deleteMany
   */
  export type OrganizationDeleteManyArgs = {
    /**
     * Filter which Organizations to delete
     */
    where?: OrganizationWhereInput
  }


  /**
   * Organization.Series
   */
  export type Organization$SeriesArgs = {
    /**
     * Select specific fields to fetch from the Series
     */
    select?: SeriesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SeriesInclude | null
    where?: SeriesWhereInput
    orderBy?: Enumerable<SeriesOrderByWithRelationInput>
    cursor?: SeriesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<SeriesScalarFieldEnum>
  }


  /**
   * Organization.Events
   */
  export type Organization$EventsArgs = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EventInclude | null
    where?: EventWhereInput
    orderBy?: Enumerable<EventOrderByWithRelationInput>
    cursor?: EventWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<EventScalarFieldEnum>
  }


  /**
   * Organization.follow
   */
  export type Organization$followArgs = {
    /**
     * Select specific fields to fetch from the follow
     */
    select?: followSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: followInclude | null
    where?: followWhereInput
    orderBy?: Enumerable<followOrderByWithRelationInput>
    cursor?: followWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<FollowScalarFieldEnum>
  }


  /**
   * Organization.like
   */
  export type Organization$likeArgs = {
    /**
     * Select specific fields to fetch from the like
     */
    select?: likeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: likeInclude | null
    where?: likeWhereInput
    orderBy?: Enumerable<likeOrderByWithRelationInput>
    cursor?: likeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<LikeScalarFieldEnum>
  }


  /**
   * Organization without action
   */
  export type OrganizationArgs = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrganizationInclude | null
  }



  /**
   * Model follow
   */


  export type AggregateFollow = {
    _count: FollowCountAggregateOutputType | null
    _min: FollowMinAggregateOutputType | null
    _max: FollowMaxAggregateOutputType | null
  }

  export type FollowMinAggregateOutputType = {
    id: string | null
    userId: string | null
    type: string | null
    seriesId: string | null
    eventId: string | null
    organizationId: string | null
    raceId: string | null
    compId: string | null
    updatedAt: Date | null
    createdAt: Date | null
  }

  export type FollowMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    type: string | null
    seriesId: string | null
    eventId: string | null
    organizationId: string | null
    raceId: string | null
    compId: string | null
    updatedAt: Date | null
    createdAt: Date | null
  }

  export type FollowCountAggregateOutputType = {
    id: number
    userId: number
    type: number
    seriesId: number
    eventId: number
    organizationId: number
    raceId: number
    compId: number
    updatedAt: number
    createdAt: number
    _all: number
  }


  export type FollowMinAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    seriesId?: true
    eventId?: true
    organizationId?: true
    raceId?: true
    compId?: true
    updatedAt?: true
    createdAt?: true
  }

  export type FollowMaxAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    seriesId?: true
    eventId?: true
    organizationId?: true
    raceId?: true
    compId?: true
    updatedAt?: true
    createdAt?: true
  }

  export type FollowCountAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    seriesId?: true
    eventId?: true
    organizationId?: true
    raceId?: true
    compId?: true
    updatedAt?: true
    createdAt?: true
    _all?: true
  }

  export type FollowAggregateArgs = {
    /**
     * Filter which follow to aggregate.
     */
    where?: followWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of follows to fetch.
     */
    orderBy?: Enumerable<followOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: followWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` follows from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` follows.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned follows
    **/
    _count?: true | FollowCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FollowMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FollowMaxAggregateInputType
  }

  export type GetFollowAggregateType<T extends FollowAggregateArgs> = {
        [P in keyof T & keyof AggregateFollow]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFollow[P]>
      : GetScalarType<T[P], AggregateFollow[P]>
  }




  export type FollowGroupByArgs = {
    where?: followWhereInput
    orderBy?: Enumerable<followOrderByWithAggregationInput>
    by: FollowScalarFieldEnum[]
    having?: followScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FollowCountAggregateInputType | true
    _min?: FollowMinAggregateInputType
    _max?: FollowMaxAggregateInputType
  }


  export type FollowGroupByOutputType = {
    id: string
    userId: string
    type: string
    seriesId: string | null
    eventId: string | null
    organizationId: string | null
    raceId: string | null
    compId: string | null
    updatedAt: Date
    createdAt: Date
    _count: FollowCountAggregateOutputType | null
    _min: FollowMinAggregateOutputType | null
    _max: FollowMaxAggregateOutputType | null
  }

  type GetFollowGroupByPayload<T extends FollowGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<FollowGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FollowGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FollowGroupByOutputType[P]>
            : GetScalarType<T[P], FollowGroupByOutputType[P]>
        }
      >
    >


  export type followSelect = {
    id?: boolean
    userId?: boolean
    type?: boolean
    seriesId?: boolean
    eventId?: boolean
    organizationId?: boolean
    raceId?: boolean
    compId?: boolean
    updatedAt?: boolean
    createdAt?: boolean
    User?: boolean | UserArgs
    Series?: boolean | SeriesArgs
    Event?: boolean | EventArgs
    Organization?: boolean | OrganizationArgs
    Race?: boolean | RaceArgs
    Comp?: boolean | CompArgs
  }


  export type followInclude = {
    User?: boolean | UserArgs
    Series?: boolean | SeriesArgs
    Event?: boolean | EventArgs
    Organization?: boolean | OrganizationArgs
    Race?: boolean | RaceArgs
    Comp?: boolean | CompArgs
  }

  export type followGetPayload<S extends boolean | null | undefined | followArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? follow :
    S extends undefined ? never :
    S extends { include: any } & (followArgs | followFindManyArgs)
    ? follow  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'User' ? UserGetPayload<S['include'][P]> :
        P extends 'Series' ? SeriesGetPayload<S['include'][P]> | null :
        P extends 'Event' ? EventGetPayload<S['include'][P]> | null :
        P extends 'Organization' ? OrganizationGetPayload<S['include'][P]> | null :
        P extends 'Race' ? RaceGetPayload<S['include'][P]> | null :
        P extends 'Comp' ? CompGetPayload<S['include'][P]> | null :  never
  } 
    : S extends { select: any } & (followArgs | followFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'User' ? UserGetPayload<S['select'][P]> :
        P extends 'Series' ? SeriesGetPayload<S['select'][P]> | null :
        P extends 'Event' ? EventGetPayload<S['select'][P]> | null :
        P extends 'Organization' ? OrganizationGetPayload<S['select'][P]> | null :
        P extends 'Race' ? RaceGetPayload<S['select'][P]> | null :
        P extends 'Comp' ? CompGetPayload<S['select'][P]> | null :  P extends keyof follow ? follow[P] : never
  } 
      : follow


  type followCountArgs = 
    Omit<followFindManyArgs, 'select' | 'include'> & {
      select?: FollowCountAggregateInputType | true
    }

  export interface followDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Follow that matches the filter.
     * @param {followFindUniqueArgs} args - Arguments to find a Follow
     * @example
     * // Get one Follow
     * const follow = await prisma.follow.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends followFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, followFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'follow'> extends True ? Prisma__followClient<followGetPayload<T>> : Prisma__followClient<followGetPayload<T> | null, null>

    /**
     * Find one Follow that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {followFindUniqueOrThrowArgs} args - Arguments to find a Follow
     * @example
     * // Get one Follow
     * const follow = await prisma.follow.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends followFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, followFindUniqueOrThrowArgs>
    ): Prisma__followClient<followGetPayload<T>>

    /**
     * Find the first Follow that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {followFindFirstArgs} args - Arguments to find a Follow
     * @example
     * // Get one Follow
     * const follow = await prisma.follow.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends followFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, followFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'follow'> extends True ? Prisma__followClient<followGetPayload<T>> : Prisma__followClient<followGetPayload<T> | null, null>

    /**
     * Find the first Follow that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {followFindFirstOrThrowArgs} args - Arguments to find a Follow
     * @example
     * // Get one Follow
     * const follow = await prisma.follow.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends followFindFirstOrThrowArgs>(
      args?: SelectSubset<T, followFindFirstOrThrowArgs>
    ): Prisma__followClient<followGetPayload<T>>

    /**
     * Find zero or more Follows that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {followFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Follows
     * const follows = await prisma.follow.findMany()
     * 
     * // Get first 10 Follows
     * const follows = await prisma.follow.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const followWithIdOnly = await prisma.follow.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends followFindManyArgs>(
      args?: SelectSubset<T, followFindManyArgs>
    ): Prisma.PrismaPromise<Array<followGetPayload<T>>>

    /**
     * Create a Follow.
     * @param {followCreateArgs} args - Arguments to create a Follow.
     * @example
     * // Create one Follow
     * const Follow = await prisma.follow.create({
     *   data: {
     *     // ... data to create a Follow
     *   }
     * })
     * 
    **/
    create<T extends followCreateArgs>(
      args: SelectSubset<T, followCreateArgs>
    ): Prisma__followClient<followGetPayload<T>>

    /**
     * Create many Follows.
     *     @param {followCreateManyArgs} args - Arguments to create many Follows.
     *     @example
     *     // Create many Follows
     *     const follow = await prisma.follow.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends followCreateManyArgs>(
      args?: SelectSubset<T, followCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Follow.
     * @param {followDeleteArgs} args - Arguments to delete one Follow.
     * @example
     * // Delete one Follow
     * const Follow = await prisma.follow.delete({
     *   where: {
     *     // ... filter to delete one Follow
     *   }
     * })
     * 
    **/
    delete<T extends followDeleteArgs>(
      args: SelectSubset<T, followDeleteArgs>
    ): Prisma__followClient<followGetPayload<T>>

    /**
     * Update one Follow.
     * @param {followUpdateArgs} args - Arguments to update one Follow.
     * @example
     * // Update one Follow
     * const follow = await prisma.follow.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends followUpdateArgs>(
      args: SelectSubset<T, followUpdateArgs>
    ): Prisma__followClient<followGetPayload<T>>

    /**
     * Delete zero or more Follows.
     * @param {followDeleteManyArgs} args - Arguments to filter Follows to delete.
     * @example
     * // Delete a few Follows
     * const { count } = await prisma.follow.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends followDeleteManyArgs>(
      args?: SelectSubset<T, followDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Follows.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {followUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Follows
     * const follow = await prisma.follow.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends followUpdateManyArgs>(
      args: SelectSubset<T, followUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Follow.
     * @param {followUpsertArgs} args - Arguments to update or create a Follow.
     * @example
     * // Update or create a Follow
     * const follow = await prisma.follow.upsert({
     *   create: {
     *     // ... data to create a Follow
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Follow we want to update
     *   }
     * })
    **/
    upsert<T extends followUpsertArgs>(
      args: SelectSubset<T, followUpsertArgs>
    ): Prisma__followClient<followGetPayload<T>>

    /**
     * Count the number of Follows.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {followCountArgs} args - Arguments to filter Follows to count.
     * @example
     * // Count the number of Follows
     * const count = await prisma.follow.count({
     *   where: {
     *     // ... the filter for the Follows we want to count
     *   }
     * })
    **/
    count<T extends followCountArgs>(
      args?: Subset<T, followCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FollowCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Follow.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FollowAggregateArgs>(args: Subset<T, FollowAggregateArgs>): Prisma.PrismaPromise<GetFollowAggregateType<T>>

    /**
     * Group by Follow.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FollowGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FollowGroupByArgs['orderBy'] }
        : { orderBy?: FollowGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FollowGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFollowGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for follow.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__followClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    User<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    Series<T extends SeriesArgs= {}>(args?: Subset<T, SeriesArgs>): Prisma__SeriesClient<SeriesGetPayload<T> | Null>;

    Event<T extends EventArgs= {}>(args?: Subset<T, EventArgs>): Prisma__EventClient<EventGetPayload<T> | Null>;

    Organization<T extends OrganizationArgs= {}>(args?: Subset<T, OrganizationArgs>): Prisma__OrganizationClient<OrganizationGetPayload<T> | Null>;

    Race<T extends RaceArgs= {}>(args?: Subset<T, RaceArgs>): Prisma__RaceClient<RaceGetPayload<T> | Null>;

    Comp<T extends CompArgs= {}>(args?: Subset<T, CompArgs>): Prisma__CompClient<CompGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * follow base type for findUnique actions
   */
  export type followFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the follow
     */
    select?: followSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: followInclude | null
    /**
     * Filter, which follow to fetch.
     */
    where: followWhereUniqueInput
  }

  /**
   * follow findUnique
   */
  export interface followFindUniqueArgs extends followFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * follow findUniqueOrThrow
   */
  export type followFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the follow
     */
    select?: followSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: followInclude | null
    /**
     * Filter, which follow to fetch.
     */
    where: followWhereUniqueInput
  }


  /**
   * follow base type for findFirst actions
   */
  export type followFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the follow
     */
    select?: followSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: followInclude | null
    /**
     * Filter, which follow to fetch.
     */
    where?: followWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of follows to fetch.
     */
    orderBy?: Enumerable<followOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for follows.
     */
    cursor?: followWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` follows from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` follows.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of follows.
     */
    distinct?: Enumerable<FollowScalarFieldEnum>
  }

  /**
   * follow findFirst
   */
  export interface followFindFirstArgs extends followFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * follow findFirstOrThrow
   */
  export type followFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the follow
     */
    select?: followSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: followInclude | null
    /**
     * Filter, which follow to fetch.
     */
    where?: followWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of follows to fetch.
     */
    orderBy?: Enumerable<followOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for follows.
     */
    cursor?: followWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` follows from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` follows.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of follows.
     */
    distinct?: Enumerable<FollowScalarFieldEnum>
  }


  /**
   * follow findMany
   */
  export type followFindManyArgs = {
    /**
     * Select specific fields to fetch from the follow
     */
    select?: followSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: followInclude | null
    /**
     * Filter, which follows to fetch.
     */
    where?: followWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of follows to fetch.
     */
    orderBy?: Enumerable<followOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing follows.
     */
    cursor?: followWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` follows from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` follows.
     */
    skip?: number
    distinct?: Enumerable<FollowScalarFieldEnum>
  }


  /**
   * follow create
   */
  export type followCreateArgs = {
    /**
     * Select specific fields to fetch from the follow
     */
    select?: followSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: followInclude | null
    /**
     * The data needed to create a follow.
     */
    data: XOR<followCreateInput, followUncheckedCreateInput>
  }


  /**
   * follow createMany
   */
  export type followCreateManyArgs = {
    /**
     * The data used to create many follows.
     */
    data: Enumerable<followCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * follow update
   */
  export type followUpdateArgs = {
    /**
     * Select specific fields to fetch from the follow
     */
    select?: followSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: followInclude | null
    /**
     * The data needed to update a follow.
     */
    data: XOR<followUpdateInput, followUncheckedUpdateInput>
    /**
     * Choose, which follow to update.
     */
    where: followWhereUniqueInput
  }


  /**
   * follow updateMany
   */
  export type followUpdateManyArgs = {
    /**
     * The data used to update follows.
     */
    data: XOR<followUpdateManyMutationInput, followUncheckedUpdateManyInput>
    /**
     * Filter which follows to update
     */
    where?: followWhereInput
  }


  /**
   * follow upsert
   */
  export type followUpsertArgs = {
    /**
     * Select specific fields to fetch from the follow
     */
    select?: followSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: followInclude | null
    /**
     * The filter to search for the follow to update in case it exists.
     */
    where: followWhereUniqueInput
    /**
     * In case the follow found by the `where` argument doesn't exist, create a new follow with this data.
     */
    create: XOR<followCreateInput, followUncheckedCreateInput>
    /**
     * In case the follow was found with the provided `where` argument, update it with this data.
     */
    update: XOR<followUpdateInput, followUncheckedUpdateInput>
  }


  /**
   * follow delete
   */
  export type followDeleteArgs = {
    /**
     * Select specific fields to fetch from the follow
     */
    select?: followSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: followInclude | null
    /**
     * Filter which follow to delete.
     */
    where: followWhereUniqueInput
  }


  /**
   * follow deleteMany
   */
  export type followDeleteManyArgs = {
    /**
     * Filter which follows to delete
     */
    where?: followWhereInput
  }


  /**
   * follow without action
   */
  export type followArgs = {
    /**
     * Select specific fields to fetch from the follow
     */
    select?: followSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: followInclude | null
  }



  /**
   * Model like
   */


  export type AggregateLike = {
    _count: LikeCountAggregateOutputType | null
    _min: LikeMinAggregateOutputType | null
    _max: LikeMaxAggregateOutputType | null
  }

  export type LikeMinAggregateOutputType = {
    id: string | null
    userId: string | null
    type: string | null
    seriesId: string | null
    eventId: string | null
    organizationId: string | null
    raceId: string | null
    compId: string | null
    updatedAt: Date | null
    createdAt: Date | null
  }

  export type LikeMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    type: string | null
    seriesId: string | null
    eventId: string | null
    organizationId: string | null
    raceId: string | null
    compId: string | null
    updatedAt: Date | null
    createdAt: Date | null
  }

  export type LikeCountAggregateOutputType = {
    id: number
    userId: number
    type: number
    seriesId: number
    eventId: number
    organizationId: number
    raceId: number
    compId: number
    updatedAt: number
    createdAt: number
    _all: number
  }


  export type LikeMinAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    seriesId?: true
    eventId?: true
    organizationId?: true
    raceId?: true
    compId?: true
    updatedAt?: true
    createdAt?: true
  }

  export type LikeMaxAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    seriesId?: true
    eventId?: true
    organizationId?: true
    raceId?: true
    compId?: true
    updatedAt?: true
    createdAt?: true
  }

  export type LikeCountAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    seriesId?: true
    eventId?: true
    organizationId?: true
    raceId?: true
    compId?: true
    updatedAt?: true
    createdAt?: true
    _all?: true
  }

  export type LikeAggregateArgs = {
    /**
     * Filter which like to aggregate.
     */
    where?: likeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of likes to fetch.
     */
    orderBy?: Enumerable<likeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: likeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` likes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` likes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned likes
    **/
    _count?: true | LikeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LikeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LikeMaxAggregateInputType
  }

  export type GetLikeAggregateType<T extends LikeAggregateArgs> = {
        [P in keyof T & keyof AggregateLike]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLike[P]>
      : GetScalarType<T[P], AggregateLike[P]>
  }




  export type LikeGroupByArgs = {
    where?: likeWhereInput
    orderBy?: Enumerable<likeOrderByWithAggregationInput>
    by: LikeScalarFieldEnum[]
    having?: likeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LikeCountAggregateInputType | true
    _min?: LikeMinAggregateInputType
    _max?: LikeMaxAggregateInputType
  }


  export type LikeGroupByOutputType = {
    id: string
    userId: string
    type: string
    seriesId: string | null
    eventId: string | null
    organizationId: string | null
    raceId: string | null
    compId: string | null
    updatedAt: Date
    createdAt: Date
    _count: LikeCountAggregateOutputType | null
    _min: LikeMinAggregateOutputType | null
    _max: LikeMaxAggregateOutputType | null
  }

  type GetLikeGroupByPayload<T extends LikeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<LikeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LikeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LikeGroupByOutputType[P]>
            : GetScalarType<T[P], LikeGroupByOutputType[P]>
        }
      >
    >


  export type likeSelect = {
    id?: boolean
    userId?: boolean
    type?: boolean
    seriesId?: boolean
    eventId?: boolean
    organizationId?: boolean
    raceId?: boolean
    compId?: boolean
    updatedAt?: boolean
    createdAt?: boolean
    User?: boolean | UserArgs
    Series?: boolean | SeriesArgs
    Event?: boolean | EventArgs
    Organization?: boolean | OrganizationArgs
    Race?: boolean | RaceArgs
    Comp?: boolean | CompArgs
  }


  export type likeInclude = {
    User?: boolean | UserArgs
    Series?: boolean | SeriesArgs
    Event?: boolean | EventArgs
    Organization?: boolean | OrganizationArgs
    Race?: boolean | RaceArgs
    Comp?: boolean | CompArgs
  }

  export type likeGetPayload<S extends boolean | null | undefined | likeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? like :
    S extends undefined ? never :
    S extends { include: any } & (likeArgs | likeFindManyArgs)
    ? like  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'User' ? UserGetPayload<S['include'][P]> :
        P extends 'Series' ? SeriesGetPayload<S['include'][P]> | null :
        P extends 'Event' ? EventGetPayload<S['include'][P]> | null :
        P extends 'Organization' ? OrganizationGetPayload<S['include'][P]> | null :
        P extends 'Race' ? RaceGetPayload<S['include'][P]> | null :
        P extends 'Comp' ? CompGetPayload<S['include'][P]> | null :  never
  } 
    : S extends { select: any } & (likeArgs | likeFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'User' ? UserGetPayload<S['select'][P]> :
        P extends 'Series' ? SeriesGetPayload<S['select'][P]> | null :
        P extends 'Event' ? EventGetPayload<S['select'][P]> | null :
        P extends 'Organization' ? OrganizationGetPayload<S['select'][P]> | null :
        P extends 'Race' ? RaceGetPayload<S['select'][P]> | null :
        P extends 'Comp' ? CompGetPayload<S['select'][P]> | null :  P extends keyof like ? like[P] : never
  } 
      : like


  type likeCountArgs = 
    Omit<likeFindManyArgs, 'select' | 'include'> & {
      select?: LikeCountAggregateInputType | true
    }

  export interface likeDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Like that matches the filter.
     * @param {likeFindUniqueArgs} args - Arguments to find a Like
     * @example
     * // Get one Like
     * const like = await prisma.like.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends likeFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, likeFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'like'> extends True ? Prisma__likeClient<likeGetPayload<T>> : Prisma__likeClient<likeGetPayload<T> | null, null>

    /**
     * Find one Like that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {likeFindUniqueOrThrowArgs} args - Arguments to find a Like
     * @example
     * // Get one Like
     * const like = await prisma.like.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends likeFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, likeFindUniqueOrThrowArgs>
    ): Prisma__likeClient<likeGetPayload<T>>

    /**
     * Find the first Like that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {likeFindFirstArgs} args - Arguments to find a Like
     * @example
     * // Get one Like
     * const like = await prisma.like.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends likeFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, likeFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'like'> extends True ? Prisma__likeClient<likeGetPayload<T>> : Prisma__likeClient<likeGetPayload<T> | null, null>

    /**
     * Find the first Like that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {likeFindFirstOrThrowArgs} args - Arguments to find a Like
     * @example
     * // Get one Like
     * const like = await prisma.like.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends likeFindFirstOrThrowArgs>(
      args?: SelectSubset<T, likeFindFirstOrThrowArgs>
    ): Prisma__likeClient<likeGetPayload<T>>

    /**
     * Find zero or more Likes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {likeFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Likes
     * const likes = await prisma.like.findMany()
     * 
     * // Get first 10 Likes
     * const likes = await prisma.like.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const likeWithIdOnly = await prisma.like.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends likeFindManyArgs>(
      args?: SelectSubset<T, likeFindManyArgs>
    ): Prisma.PrismaPromise<Array<likeGetPayload<T>>>

    /**
     * Create a Like.
     * @param {likeCreateArgs} args - Arguments to create a Like.
     * @example
     * // Create one Like
     * const Like = await prisma.like.create({
     *   data: {
     *     // ... data to create a Like
     *   }
     * })
     * 
    **/
    create<T extends likeCreateArgs>(
      args: SelectSubset<T, likeCreateArgs>
    ): Prisma__likeClient<likeGetPayload<T>>

    /**
     * Create many Likes.
     *     @param {likeCreateManyArgs} args - Arguments to create many Likes.
     *     @example
     *     // Create many Likes
     *     const like = await prisma.like.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends likeCreateManyArgs>(
      args?: SelectSubset<T, likeCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Like.
     * @param {likeDeleteArgs} args - Arguments to delete one Like.
     * @example
     * // Delete one Like
     * const Like = await prisma.like.delete({
     *   where: {
     *     // ... filter to delete one Like
     *   }
     * })
     * 
    **/
    delete<T extends likeDeleteArgs>(
      args: SelectSubset<T, likeDeleteArgs>
    ): Prisma__likeClient<likeGetPayload<T>>

    /**
     * Update one Like.
     * @param {likeUpdateArgs} args - Arguments to update one Like.
     * @example
     * // Update one Like
     * const like = await prisma.like.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends likeUpdateArgs>(
      args: SelectSubset<T, likeUpdateArgs>
    ): Prisma__likeClient<likeGetPayload<T>>

    /**
     * Delete zero or more Likes.
     * @param {likeDeleteManyArgs} args - Arguments to filter Likes to delete.
     * @example
     * // Delete a few Likes
     * const { count } = await prisma.like.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends likeDeleteManyArgs>(
      args?: SelectSubset<T, likeDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Likes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {likeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Likes
     * const like = await prisma.like.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends likeUpdateManyArgs>(
      args: SelectSubset<T, likeUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Like.
     * @param {likeUpsertArgs} args - Arguments to update or create a Like.
     * @example
     * // Update or create a Like
     * const like = await prisma.like.upsert({
     *   create: {
     *     // ... data to create a Like
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Like we want to update
     *   }
     * })
    **/
    upsert<T extends likeUpsertArgs>(
      args: SelectSubset<T, likeUpsertArgs>
    ): Prisma__likeClient<likeGetPayload<T>>

    /**
     * Count the number of Likes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {likeCountArgs} args - Arguments to filter Likes to count.
     * @example
     * // Count the number of Likes
     * const count = await prisma.like.count({
     *   where: {
     *     // ... the filter for the Likes we want to count
     *   }
     * })
    **/
    count<T extends likeCountArgs>(
      args?: Subset<T, likeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LikeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Like.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LikeAggregateArgs>(args: Subset<T, LikeAggregateArgs>): Prisma.PrismaPromise<GetLikeAggregateType<T>>

    /**
     * Group by Like.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LikeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LikeGroupByArgs['orderBy'] }
        : { orderBy?: LikeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LikeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLikeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for like.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__likeClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    User<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    Series<T extends SeriesArgs= {}>(args?: Subset<T, SeriesArgs>): Prisma__SeriesClient<SeriesGetPayload<T> | Null>;

    Event<T extends EventArgs= {}>(args?: Subset<T, EventArgs>): Prisma__EventClient<EventGetPayload<T> | Null>;

    Organization<T extends OrganizationArgs= {}>(args?: Subset<T, OrganizationArgs>): Prisma__OrganizationClient<OrganizationGetPayload<T> | Null>;

    Race<T extends RaceArgs= {}>(args?: Subset<T, RaceArgs>): Prisma__RaceClient<RaceGetPayload<T> | Null>;

    Comp<T extends CompArgs= {}>(args?: Subset<T, CompArgs>): Prisma__CompClient<CompGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * like base type for findUnique actions
   */
  export type likeFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the like
     */
    select?: likeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: likeInclude | null
    /**
     * Filter, which like to fetch.
     */
    where: likeWhereUniqueInput
  }

  /**
   * like findUnique
   */
  export interface likeFindUniqueArgs extends likeFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * like findUniqueOrThrow
   */
  export type likeFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the like
     */
    select?: likeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: likeInclude | null
    /**
     * Filter, which like to fetch.
     */
    where: likeWhereUniqueInput
  }


  /**
   * like base type for findFirst actions
   */
  export type likeFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the like
     */
    select?: likeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: likeInclude | null
    /**
     * Filter, which like to fetch.
     */
    where?: likeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of likes to fetch.
     */
    orderBy?: Enumerable<likeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for likes.
     */
    cursor?: likeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` likes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` likes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of likes.
     */
    distinct?: Enumerable<LikeScalarFieldEnum>
  }

  /**
   * like findFirst
   */
  export interface likeFindFirstArgs extends likeFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * like findFirstOrThrow
   */
  export type likeFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the like
     */
    select?: likeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: likeInclude | null
    /**
     * Filter, which like to fetch.
     */
    where?: likeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of likes to fetch.
     */
    orderBy?: Enumerable<likeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for likes.
     */
    cursor?: likeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` likes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` likes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of likes.
     */
    distinct?: Enumerable<LikeScalarFieldEnum>
  }


  /**
   * like findMany
   */
  export type likeFindManyArgs = {
    /**
     * Select specific fields to fetch from the like
     */
    select?: likeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: likeInclude | null
    /**
     * Filter, which likes to fetch.
     */
    where?: likeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of likes to fetch.
     */
    orderBy?: Enumerable<likeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing likes.
     */
    cursor?: likeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` likes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` likes.
     */
    skip?: number
    distinct?: Enumerable<LikeScalarFieldEnum>
  }


  /**
   * like create
   */
  export type likeCreateArgs = {
    /**
     * Select specific fields to fetch from the like
     */
    select?: likeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: likeInclude | null
    /**
     * The data needed to create a like.
     */
    data: XOR<likeCreateInput, likeUncheckedCreateInput>
  }


  /**
   * like createMany
   */
  export type likeCreateManyArgs = {
    /**
     * The data used to create many likes.
     */
    data: Enumerable<likeCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * like update
   */
  export type likeUpdateArgs = {
    /**
     * Select specific fields to fetch from the like
     */
    select?: likeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: likeInclude | null
    /**
     * The data needed to update a like.
     */
    data: XOR<likeUpdateInput, likeUncheckedUpdateInput>
    /**
     * Choose, which like to update.
     */
    where: likeWhereUniqueInput
  }


  /**
   * like updateMany
   */
  export type likeUpdateManyArgs = {
    /**
     * The data used to update likes.
     */
    data: XOR<likeUpdateManyMutationInput, likeUncheckedUpdateManyInput>
    /**
     * Filter which likes to update
     */
    where?: likeWhereInput
  }


  /**
   * like upsert
   */
  export type likeUpsertArgs = {
    /**
     * Select specific fields to fetch from the like
     */
    select?: likeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: likeInclude | null
    /**
     * The filter to search for the like to update in case it exists.
     */
    where: likeWhereUniqueInput
    /**
     * In case the like found by the `where` argument doesn't exist, create a new like with this data.
     */
    create: XOR<likeCreateInput, likeUncheckedCreateInput>
    /**
     * In case the like was found with the provided `where` argument, update it with this data.
     */
    update: XOR<likeUpdateInput, likeUncheckedUpdateInput>
  }


  /**
   * like delete
   */
  export type likeDeleteArgs = {
    /**
     * Select specific fields to fetch from the like
     */
    select?: likeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: likeInclude | null
    /**
     * Filter which like to delete.
     */
    where: likeWhereUniqueInput
  }


  /**
   * like deleteMany
   */
  export type likeDeleteManyArgs = {
    /**
     * Filter which likes to delete
     */
    where?: likeWhereInput
  }


  /**
   * like without action
   */
  export type likeArgs = {
    /**
     * Select specific fields to fetch from the like
     */
    select?: likeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: likeInclude | null
  }



  /**
   * Model Venue
   */


  export type AggregateVenue = {
    _count: VenueCountAggregateOutputType | null
    _min: VenueMinAggregateOutputType | null
    _max: VenueMaxAggregateOutputType | null
  }

  export type VenueMinAggregateOutputType = {
    id: string | null
    name: string | null
    website: string | null
    email: string | null
    burgee: string | null
    publisherId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type VenueMaxAggregateOutputType = {
    id: string | null
    name: string | null
    website: string | null
    email: string | null
    burgee: string | null
    publisherId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type VenueCountAggregateOutputType = {
    id: number
    name: number
    website: number
    email: number
    burgee: number
    publisherId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type VenueMinAggregateInputType = {
    id?: true
    name?: true
    website?: true
    email?: true
    burgee?: true
    publisherId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type VenueMaxAggregateInputType = {
    id?: true
    name?: true
    website?: true
    email?: true
    burgee?: true
    publisherId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type VenueCountAggregateInputType = {
    id?: true
    name?: true
    website?: true
    email?: true
    burgee?: true
    publisherId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type VenueAggregateArgs = {
    /**
     * Filter which Venue to aggregate.
     */
    where?: VenueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Venues to fetch.
     */
    orderBy?: Enumerable<VenueOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VenueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Venues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Venues.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Venues
    **/
    _count?: true | VenueCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VenueMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VenueMaxAggregateInputType
  }

  export type GetVenueAggregateType<T extends VenueAggregateArgs> = {
        [P in keyof T & keyof AggregateVenue]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVenue[P]>
      : GetScalarType<T[P], AggregateVenue[P]>
  }




  export type VenueGroupByArgs = {
    where?: VenueWhereInput
    orderBy?: Enumerable<VenueOrderByWithAggregationInput>
    by: VenueScalarFieldEnum[]
    having?: VenueScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VenueCountAggregateInputType | true
    _min?: VenueMinAggregateInputType
    _max?: VenueMaxAggregateInputType
  }


  export type VenueGroupByOutputType = {
    id: string
    name: string
    website: string | null
    email: string | null
    burgee: string | null
    publisherId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    _count: VenueCountAggregateOutputType | null
    _min: VenueMinAggregateOutputType | null
    _max: VenueMaxAggregateOutputType | null
  }

  type GetVenueGroupByPayload<T extends VenueGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<VenueGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VenueGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VenueGroupByOutputType[P]>
            : GetScalarType<T[P], VenueGroupByOutputType[P]>
        }
      >
    >


  export type VenueSelect = {
    id?: boolean
    name?: boolean
    website?: boolean
    email?: boolean
    burgee?: boolean
    publisherId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    Publisher?: boolean | UserArgs
    Series?: boolean | Venue$SeriesArgs
    Event?: boolean | Venue$EventArgs
    _count?: boolean | VenueCountOutputTypeArgs
  }


  export type VenueInclude = {
    Publisher?: boolean | UserArgs
    Series?: boolean | Venue$SeriesArgs
    Event?: boolean | Venue$EventArgs
    _count?: boolean | VenueCountOutputTypeArgs
  }

  export type VenueGetPayload<S extends boolean | null | undefined | VenueArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Venue :
    S extends undefined ? never :
    S extends { include: any } & (VenueArgs | VenueFindManyArgs)
    ? Venue  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'Publisher' ? UserGetPayload<S['include'][P]> | null :
        P extends 'Series' ? Array < SeriesGetPayload<S['include'][P]>>  :
        P extends 'Event' ? Array < EventGetPayload<S['include'][P]>>  :
        P extends '_count' ? VenueCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (VenueArgs | VenueFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'Publisher' ? UserGetPayload<S['select'][P]> | null :
        P extends 'Series' ? Array < SeriesGetPayload<S['select'][P]>>  :
        P extends 'Event' ? Array < EventGetPayload<S['select'][P]>>  :
        P extends '_count' ? VenueCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Venue ? Venue[P] : never
  } 
      : Venue


  type VenueCountArgs = 
    Omit<VenueFindManyArgs, 'select' | 'include'> & {
      select?: VenueCountAggregateInputType | true
    }

  export interface VenueDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Venue that matches the filter.
     * @param {VenueFindUniqueArgs} args - Arguments to find a Venue
     * @example
     * // Get one Venue
     * const venue = await prisma.venue.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends VenueFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, VenueFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Venue'> extends True ? Prisma__VenueClient<VenueGetPayload<T>> : Prisma__VenueClient<VenueGetPayload<T> | null, null>

    /**
     * Find one Venue that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {VenueFindUniqueOrThrowArgs} args - Arguments to find a Venue
     * @example
     * // Get one Venue
     * const venue = await prisma.venue.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends VenueFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, VenueFindUniqueOrThrowArgs>
    ): Prisma__VenueClient<VenueGetPayload<T>>

    /**
     * Find the first Venue that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VenueFindFirstArgs} args - Arguments to find a Venue
     * @example
     * // Get one Venue
     * const venue = await prisma.venue.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends VenueFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, VenueFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Venue'> extends True ? Prisma__VenueClient<VenueGetPayload<T>> : Prisma__VenueClient<VenueGetPayload<T> | null, null>

    /**
     * Find the first Venue that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VenueFindFirstOrThrowArgs} args - Arguments to find a Venue
     * @example
     * // Get one Venue
     * const venue = await prisma.venue.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends VenueFindFirstOrThrowArgs>(
      args?: SelectSubset<T, VenueFindFirstOrThrowArgs>
    ): Prisma__VenueClient<VenueGetPayload<T>>

    /**
     * Find zero or more Venues that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VenueFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Venues
     * const venues = await prisma.venue.findMany()
     * 
     * // Get first 10 Venues
     * const venues = await prisma.venue.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const venueWithIdOnly = await prisma.venue.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends VenueFindManyArgs>(
      args?: SelectSubset<T, VenueFindManyArgs>
    ): Prisma.PrismaPromise<Array<VenueGetPayload<T>>>

    /**
     * Create a Venue.
     * @param {VenueCreateArgs} args - Arguments to create a Venue.
     * @example
     * // Create one Venue
     * const Venue = await prisma.venue.create({
     *   data: {
     *     // ... data to create a Venue
     *   }
     * })
     * 
    **/
    create<T extends VenueCreateArgs>(
      args: SelectSubset<T, VenueCreateArgs>
    ): Prisma__VenueClient<VenueGetPayload<T>>

    /**
     * Create many Venues.
     *     @param {VenueCreateManyArgs} args - Arguments to create many Venues.
     *     @example
     *     // Create many Venues
     *     const venue = await prisma.venue.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends VenueCreateManyArgs>(
      args?: SelectSubset<T, VenueCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Venue.
     * @param {VenueDeleteArgs} args - Arguments to delete one Venue.
     * @example
     * // Delete one Venue
     * const Venue = await prisma.venue.delete({
     *   where: {
     *     // ... filter to delete one Venue
     *   }
     * })
     * 
    **/
    delete<T extends VenueDeleteArgs>(
      args: SelectSubset<T, VenueDeleteArgs>
    ): Prisma__VenueClient<VenueGetPayload<T>>

    /**
     * Update one Venue.
     * @param {VenueUpdateArgs} args - Arguments to update one Venue.
     * @example
     * // Update one Venue
     * const venue = await prisma.venue.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends VenueUpdateArgs>(
      args: SelectSubset<T, VenueUpdateArgs>
    ): Prisma__VenueClient<VenueGetPayload<T>>

    /**
     * Delete zero or more Venues.
     * @param {VenueDeleteManyArgs} args - Arguments to filter Venues to delete.
     * @example
     * // Delete a few Venues
     * const { count } = await prisma.venue.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends VenueDeleteManyArgs>(
      args?: SelectSubset<T, VenueDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Venues.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VenueUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Venues
     * const venue = await prisma.venue.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends VenueUpdateManyArgs>(
      args: SelectSubset<T, VenueUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Venue.
     * @param {VenueUpsertArgs} args - Arguments to update or create a Venue.
     * @example
     * // Update or create a Venue
     * const venue = await prisma.venue.upsert({
     *   create: {
     *     // ... data to create a Venue
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Venue we want to update
     *   }
     * })
    **/
    upsert<T extends VenueUpsertArgs>(
      args: SelectSubset<T, VenueUpsertArgs>
    ): Prisma__VenueClient<VenueGetPayload<T>>

    /**
     * Count the number of Venues.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VenueCountArgs} args - Arguments to filter Venues to count.
     * @example
     * // Count the number of Venues
     * const count = await prisma.venue.count({
     *   where: {
     *     // ... the filter for the Venues we want to count
     *   }
     * })
    **/
    count<T extends VenueCountArgs>(
      args?: Subset<T, VenueCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VenueCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Venue.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VenueAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VenueAggregateArgs>(args: Subset<T, VenueAggregateArgs>): Prisma.PrismaPromise<GetVenueAggregateType<T>>

    /**
     * Group by Venue.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VenueGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VenueGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VenueGroupByArgs['orderBy'] }
        : { orderBy?: VenueGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VenueGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVenueGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Venue.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__VenueClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    Publisher<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    Series<T extends Venue$SeriesArgs= {}>(args?: Subset<T, Venue$SeriesArgs>): Prisma.PrismaPromise<Array<SeriesGetPayload<T>>| Null>;

    Event<T extends Venue$EventArgs= {}>(args?: Subset<T, Venue$EventArgs>): Prisma.PrismaPromise<Array<EventGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Venue base type for findUnique actions
   */
  export type VenueFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Venue
     */
    select?: VenueSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VenueInclude | null
    /**
     * Filter, which Venue to fetch.
     */
    where: VenueWhereUniqueInput
  }

  /**
   * Venue findUnique
   */
  export interface VenueFindUniqueArgs extends VenueFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Venue findUniqueOrThrow
   */
  export type VenueFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Venue
     */
    select?: VenueSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VenueInclude | null
    /**
     * Filter, which Venue to fetch.
     */
    where: VenueWhereUniqueInput
  }


  /**
   * Venue base type for findFirst actions
   */
  export type VenueFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Venue
     */
    select?: VenueSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VenueInclude | null
    /**
     * Filter, which Venue to fetch.
     */
    where?: VenueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Venues to fetch.
     */
    orderBy?: Enumerable<VenueOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Venues.
     */
    cursor?: VenueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Venues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Venues.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Venues.
     */
    distinct?: Enumerable<VenueScalarFieldEnum>
  }

  /**
   * Venue findFirst
   */
  export interface VenueFindFirstArgs extends VenueFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Venue findFirstOrThrow
   */
  export type VenueFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Venue
     */
    select?: VenueSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VenueInclude | null
    /**
     * Filter, which Venue to fetch.
     */
    where?: VenueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Venues to fetch.
     */
    orderBy?: Enumerable<VenueOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Venues.
     */
    cursor?: VenueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Venues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Venues.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Venues.
     */
    distinct?: Enumerable<VenueScalarFieldEnum>
  }


  /**
   * Venue findMany
   */
  export type VenueFindManyArgs = {
    /**
     * Select specific fields to fetch from the Venue
     */
    select?: VenueSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VenueInclude | null
    /**
     * Filter, which Venues to fetch.
     */
    where?: VenueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Venues to fetch.
     */
    orderBy?: Enumerable<VenueOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Venues.
     */
    cursor?: VenueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Venues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Venues.
     */
    skip?: number
    distinct?: Enumerable<VenueScalarFieldEnum>
  }


  /**
   * Venue create
   */
  export type VenueCreateArgs = {
    /**
     * Select specific fields to fetch from the Venue
     */
    select?: VenueSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VenueInclude | null
    /**
     * The data needed to create a Venue.
     */
    data: XOR<VenueCreateInput, VenueUncheckedCreateInput>
  }


  /**
   * Venue createMany
   */
  export type VenueCreateManyArgs = {
    /**
     * The data used to create many Venues.
     */
    data: Enumerable<VenueCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Venue update
   */
  export type VenueUpdateArgs = {
    /**
     * Select specific fields to fetch from the Venue
     */
    select?: VenueSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VenueInclude | null
    /**
     * The data needed to update a Venue.
     */
    data: XOR<VenueUpdateInput, VenueUncheckedUpdateInput>
    /**
     * Choose, which Venue to update.
     */
    where: VenueWhereUniqueInput
  }


  /**
   * Venue updateMany
   */
  export type VenueUpdateManyArgs = {
    /**
     * The data used to update Venues.
     */
    data: XOR<VenueUpdateManyMutationInput, VenueUncheckedUpdateManyInput>
    /**
     * Filter which Venues to update
     */
    where?: VenueWhereInput
  }


  /**
   * Venue upsert
   */
  export type VenueUpsertArgs = {
    /**
     * Select specific fields to fetch from the Venue
     */
    select?: VenueSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VenueInclude | null
    /**
     * The filter to search for the Venue to update in case it exists.
     */
    where: VenueWhereUniqueInput
    /**
     * In case the Venue found by the `where` argument doesn't exist, create a new Venue with this data.
     */
    create: XOR<VenueCreateInput, VenueUncheckedCreateInput>
    /**
     * In case the Venue was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VenueUpdateInput, VenueUncheckedUpdateInput>
  }


  /**
   * Venue delete
   */
  export type VenueDeleteArgs = {
    /**
     * Select specific fields to fetch from the Venue
     */
    select?: VenueSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VenueInclude | null
    /**
     * Filter which Venue to delete.
     */
    where: VenueWhereUniqueInput
  }


  /**
   * Venue deleteMany
   */
  export type VenueDeleteManyArgs = {
    /**
     * Filter which Venues to delete
     */
    where?: VenueWhereInput
  }


  /**
   * Venue.Series
   */
  export type Venue$SeriesArgs = {
    /**
     * Select specific fields to fetch from the Series
     */
    select?: SeriesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SeriesInclude | null
    where?: SeriesWhereInput
    orderBy?: Enumerable<SeriesOrderByWithRelationInput>
    cursor?: SeriesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<SeriesScalarFieldEnum>
  }


  /**
   * Venue.Event
   */
  export type Venue$EventArgs = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EventInclude | null
    where?: EventWhereInput
    orderBy?: Enumerable<EventOrderByWithRelationInput>
    cursor?: EventWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<EventScalarFieldEnum>
  }


  /**
   * Venue without action
   */
  export type VenueArgs = {
    /**
     * Select specific fields to fetch from the Venue
     */
    select?: VenueSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VenueInclude | null
  }



  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    name: string | null
    username: string | null
    email: string | null
    avatar: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    name: string | null
    username: string | null
    email: string | null
    avatar: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    username: number
    email: number
    avatar: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    username?: true
    email?: true
    avatar?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    username?: true
    email?: true
    avatar?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    username?: true
    email?: true
    avatar?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithAggregationInput>
    by: UserScalarFieldEnum[]
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: string
    name: string
    username: string
    email: string | null
    avatar: string | null
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect = {
    id?: boolean
    name?: boolean
    username?: boolean
    email?: boolean
    avatar?: boolean
    session?: boolean | User$sessionArgs
    Key?: boolean | User$KeyArgs
    Article?: boolean | User$ArticleArgs
    Series?: boolean | User$SeriesArgs
    Event?: boolean | User$EventArgs
    Organization?: boolean | User$OrganizationArgs
    Comp?: boolean | User$CompArgs
    Venue?: boolean | User$VenueArgs
    UserSettings?: boolean | UserSettingsArgs
    Race?: boolean | User$RaceArgs
    Result?: boolean | User$ResultArgs
    follow?: boolean | User$followArgs
    like?: boolean | User$likeArgs
    _count?: boolean | UserCountOutputTypeArgs
  }


  export type UserInclude = {
    session?: boolean | User$sessionArgs
    Key?: boolean | User$KeyArgs
    Article?: boolean | User$ArticleArgs
    Series?: boolean | User$SeriesArgs
    Event?: boolean | User$EventArgs
    Organization?: boolean | User$OrganizationArgs
    Comp?: boolean | User$CompArgs
    Venue?: boolean | User$VenueArgs
    UserSettings?: boolean | UserSettingsArgs
    Race?: boolean | User$RaceArgs
    Result?: boolean | User$ResultArgs
    follow?: boolean | User$followArgs
    like?: boolean | User$likeArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserGetPayload<S extends boolean | null | undefined | UserArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? User :
    S extends undefined ? never :
    S extends { include: any } & (UserArgs | UserFindManyArgs)
    ? User  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'session' ? Array < SessionGetPayload<S['include'][P]>>  :
        P extends 'Key' ? Array < KeyGetPayload<S['include'][P]>>  :
        P extends 'Article' ? Array < ArticleGetPayload<S['include'][P]>>  :
        P extends 'Series' ? Array < SeriesGetPayload<S['include'][P]>>  :
        P extends 'Event' ? Array < EventGetPayload<S['include'][P]>>  :
        P extends 'Organization' ? Array < OrganizationGetPayload<S['include'][P]>>  :
        P extends 'Comp' ? Array < CompGetPayload<S['include'][P]>>  :
        P extends 'Venue' ? Array < VenueGetPayload<S['include'][P]>>  :
        P extends 'UserSettings' ? UserSettingsGetPayload<S['include'][P]> | null :
        P extends 'Race' ? Array < RaceGetPayload<S['include'][P]>>  :
        P extends 'Result' ? Array < ResultGetPayload<S['include'][P]>>  :
        P extends 'follow' ? Array < followGetPayload<S['include'][P]>>  :
        P extends 'like' ? Array < likeGetPayload<S['include'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (UserArgs | UserFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'session' ? Array < SessionGetPayload<S['select'][P]>>  :
        P extends 'Key' ? Array < KeyGetPayload<S['select'][P]>>  :
        P extends 'Article' ? Array < ArticleGetPayload<S['select'][P]>>  :
        P extends 'Series' ? Array < SeriesGetPayload<S['select'][P]>>  :
        P extends 'Event' ? Array < EventGetPayload<S['select'][P]>>  :
        P extends 'Organization' ? Array < OrganizationGetPayload<S['select'][P]>>  :
        P extends 'Comp' ? Array < CompGetPayload<S['select'][P]>>  :
        P extends 'Venue' ? Array < VenueGetPayload<S['select'][P]>>  :
        P extends 'UserSettings' ? UserSettingsGetPayload<S['select'][P]> | null :
        P extends 'Race' ? Array < RaceGetPayload<S['select'][P]>>  :
        P extends 'Result' ? Array < ResultGetPayload<S['select'][P]>>  :
        P extends 'follow' ? Array < followGetPayload<S['select'][P]>>  :
        P extends 'like' ? Array < likeGetPayload<S['select'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof User ? User[P] : never
  } 
      : User


  type UserCountArgs = 
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? Prisma__UserClient<UserGetPayload<T>> : Prisma__UserClient<UserGetPayload<T> | null, null>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? Prisma__UserClient<UserGetPayload<T>> : Prisma__UserClient<UserGetPayload<T> | null, null>

    /**
     * Find the first User that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): Prisma.PrismaPromise<Array<UserGetPayload<T>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs>(
      args?: SelectSubset<T, UserCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    session<T extends User$sessionArgs= {}>(args?: Subset<T, User$sessionArgs>): Prisma.PrismaPromise<Array<SessionGetPayload<T>>| Null>;

    Key<T extends User$KeyArgs= {}>(args?: Subset<T, User$KeyArgs>): Prisma.PrismaPromise<Array<KeyGetPayload<T>>| Null>;

    Article<T extends User$ArticleArgs= {}>(args?: Subset<T, User$ArticleArgs>): Prisma.PrismaPromise<Array<ArticleGetPayload<T>>| Null>;

    Series<T extends User$SeriesArgs= {}>(args?: Subset<T, User$SeriesArgs>): Prisma.PrismaPromise<Array<SeriesGetPayload<T>>| Null>;

    Event<T extends User$EventArgs= {}>(args?: Subset<T, User$EventArgs>): Prisma.PrismaPromise<Array<EventGetPayload<T>>| Null>;

    Organization<T extends User$OrganizationArgs= {}>(args?: Subset<T, User$OrganizationArgs>): Prisma.PrismaPromise<Array<OrganizationGetPayload<T>>| Null>;

    Comp<T extends User$CompArgs= {}>(args?: Subset<T, User$CompArgs>): Prisma.PrismaPromise<Array<CompGetPayload<T>>| Null>;

    Venue<T extends User$VenueArgs= {}>(args?: Subset<T, User$VenueArgs>): Prisma.PrismaPromise<Array<VenueGetPayload<T>>| Null>;

    UserSettings<T extends UserSettingsArgs= {}>(args?: Subset<T, UserSettingsArgs>): Prisma__UserSettingsClient<UserSettingsGetPayload<T> | Null>;

    Race<T extends User$RaceArgs= {}>(args?: Subset<T, User$RaceArgs>): Prisma.PrismaPromise<Array<RaceGetPayload<T>>| Null>;

    Result<T extends User$ResultArgs= {}>(args?: Subset<T, User$ResultArgs>): Prisma.PrismaPromise<Array<ResultGetPayload<T>>| Null>;

    follow<T extends User$followArgs= {}>(args?: Subset<T, User$followArgs>): Prisma.PrismaPromise<Array<followGetPayload<T>>| Null>;

    like<T extends User$likeArgs= {}>(args?: Subset<T, User$likeArgs>): Prisma.PrismaPromise<Array<likeGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * User base type for findUnique actions
   */
  export type UserFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUnique
   */
  export interface UserFindUniqueArgs extends UserFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User base type for findFirst actions
   */
  export type UserFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }

  /**
   * User findFirst
   */
  export interface UserFindFirstArgs extends UserFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs = {
    /**
     * The data used to create many Users.
     */
    data: Enumerable<UserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User.session
   */
  export type User$sessionArgs = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude | null
    where?: SessionWhereInput
    orderBy?: Enumerable<SessionOrderByWithRelationInput>
    cursor?: SessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<SessionScalarFieldEnum>
  }


  /**
   * User.Key
   */
  export type User$KeyArgs = {
    /**
     * Select specific fields to fetch from the Key
     */
    select?: KeySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: KeyInclude | null
    where?: KeyWhereInput
    orderBy?: Enumerable<KeyOrderByWithRelationInput>
    cursor?: KeyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<KeyScalarFieldEnum>
  }


  /**
   * User.Article
   */
  export type User$ArticleArgs = {
    /**
     * Select specific fields to fetch from the Article
     */
    select?: ArticleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ArticleInclude | null
    where?: ArticleWhereInput
    orderBy?: Enumerable<ArticleOrderByWithRelationInput>
    cursor?: ArticleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ArticleScalarFieldEnum>
  }


  /**
   * User.Series
   */
  export type User$SeriesArgs = {
    /**
     * Select specific fields to fetch from the Series
     */
    select?: SeriesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SeriesInclude | null
    where?: SeriesWhereInput
    orderBy?: Enumerable<SeriesOrderByWithRelationInput>
    cursor?: SeriesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<SeriesScalarFieldEnum>
  }


  /**
   * User.Event
   */
  export type User$EventArgs = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EventInclude | null
    where?: EventWhereInput
    orderBy?: Enumerable<EventOrderByWithRelationInput>
    cursor?: EventWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<EventScalarFieldEnum>
  }


  /**
   * User.Organization
   */
  export type User$OrganizationArgs = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrganizationInclude | null
    where?: OrganizationWhereInput
    orderBy?: Enumerable<OrganizationOrderByWithRelationInput>
    cursor?: OrganizationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<OrganizationScalarFieldEnum>
  }


  /**
   * User.Comp
   */
  export type User$CompArgs = {
    /**
     * Select specific fields to fetch from the Comp
     */
    select?: CompSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompInclude | null
    where?: CompWhereInput
    orderBy?: Enumerable<CompOrderByWithRelationInput>
    cursor?: CompWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<CompScalarFieldEnum>
  }


  /**
   * User.Venue
   */
  export type User$VenueArgs = {
    /**
     * Select specific fields to fetch from the Venue
     */
    select?: VenueSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VenueInclude | null
    where?: VenueWhereInput
    orderBy?: Enumerable<VenueOrderByWithRelationInput>
    cursor?: VenueWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<VenueScalarFieldEnum>
  }


  /**
   * User.Race
   */
  export type User$RaceArgs = {
    /**
     * Select specific fields to fetch from the Race
     */
    select?: RaceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RaceInclude | null
    where?: RaceWhereInput
    orderBy?: Enumerable<RaceOrderByWithRelationInput>
    cursor?: RaceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<RaceScalarFieldEnum>
  }


  /**
   * User.Result
   */
  export type User$ResultArgs = {
    /**
     * Select specific fields to fetch from the Result
     */
    select?: ResultSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResultInclude | null
    where?: ResultWhereInput
    orderBy?: Enumerable<ResultOrderByWithRelationInput>
    cursor?: ResultWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ResultScalarFieldEnum>
  }


  /**
   * User.follow
   */
  export type User$followArgs = {
    /**
     * Select specific fields to fetch from the follow
     */
    select?: followSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: followInclude | null
    where?: followWhereInput
    orderBy?: Enumerable<followOrderByWithRelationInput>
    cursor?: followWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<FollowScalarFieldEnum>
  }


  /**
   * User.like
   */
  export type User$likeArgs = {
    /**
     * Select specific fields to fetch from the like
     */
    select?: likeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: likeInclude | null
    where?: likeWhereInput
    orderBy?: Enumerable<likeOrderByWithRelationInput>
    cursor?: likeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<LikeScalarFieldEnum>
  }


  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
  }



  /**
   * Model UserSettings
   */


  export type AggregateUserSettings = {
    _count: UserSettingsCountAggregateOutputType | null
    _min: UserSettingsMinAggregateOutputType | null
    _max: UserSettingsMaxAggregateOutputType | null
  }

  export type UserSettingsMinAggregateOutputType = {
    id: string | null
    theme: string | null
    language: Lang | null
    userId: string | null
  }

  export type UserSettingsMaxAggregateOutputType = {
    id: string | null
    theme: string | null
    language: Lang | null
    userId: string | null
  }

  export type UserSettingsCountAggregateOutputType = {
    id: number
    theme: number
    language: number
    userId: number
    _all: number
  }


  export type UserSettingsMinAggregateInputType = {
    id?: true
    theme?: true
    language?: true
    userId?: true
  }

  export type UserSettingsMaxAggregateInputType = {
    id?: true
    theme?: true
    language?: true
    userId?: true
  }

  export type UserSettingsCountAggregateInputType = {
    id?: true
    theme?: true
    language?: true
    userId?: true
    _all?: true
  }

  export type UserSettingsAggregateArgs = {
    /**
     * Filter which UserSettings to aggregate.
     */
    where?: UserSettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSettings to fetch.
     */
    orderBy?: Enumerable<UserSettingsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserSettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserSettings
    **/
    _count?: true | UserSettingsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserSettingsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserSettingsMaxAggregateInputType
  }

  export type GetUserSettingsAggregateType<T extends UserSettingsAggregateArgs> = {
        [P in keyof T & keyof AggregateUserSettings]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserSettings[P]>
      : GetScalarType<T[P], AggregateUserSettings[P]>
  }




  export type UserSettingsGroupByArgs = {
    where?: UserSettingsWhereInput
    orderBy?: Enumerable<UserSettingsOrderByWithAggregationInput>
    by: UserSettingsScalarFieldEnum[]
    having?: UserSettingsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserSettingsCountAggregateInputType | true
    _min?: UserSettingsMinAggregateInputType
    _max?: UserSettingsMaxAggregateInputType
  }


  export type UserSettingsGroupByOutputType = {
    id: string
    theme: string | null
    language: Lang | null
    userId: string | null
    _count: UserSettingsCountAggregateOutputType | null
    _min: UserSettingsMinAggregateOutputType | null
    _max: UserSettingsMaxAggregateOutputType | null
  }

  type GetUserSettingsGroupByPayload<T extends UserSettingsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<UserSettingsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserSettingsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserSettingsGroupByOutputType[P]>
            : GetScalarType<T[P], UserSettingsGroupByOutputType[P]>
        }
      >
    >


  export type UserSettingsSelect = {
    id?: boolean
    theme?: boolean
    language?: boolean
    userId?: boolean
    user?: boolean | UserArgs
  }


  export type UserSettingsInclude = {
    user?: boolean | UserArgs
  }

  export type UserSettingsGetPayload<S extends boolean | null | undefined | UserSettingsArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? UserSettings :
    S extends undefined ? never :
    S extends { include: any } & (UserSettingsArgs | UserSettingsFindManyArgs)
    ? UserSettings  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<S['include'][P]> | null :  never
  } 
    : S extends { select: any } & (UserSettingsArgs | UserSettingsFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<S['select'][P]> | null :  P extends keyof UserSettings ? UserSettings[P] : never
  } 
      : UserSettings


  type UserSettingsCountArgs = 
    Omit<UserSettingsFindManyArgs, 'select' | 'include'> & {
      select?: UserSettingsCountAggregateInputType | true
    }

  export interface UserSettingsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one UserSettings that matches the filter.
     * @param {UserSettingsFindUniqueArgs} args - Arguments to find a UserSettings
     * @example
     * // Get one UserSettings
     * const userSettings = await prisma.userSettings.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserSettingsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserSettingsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'UserSettings'> extends True ? Prisma__UserSettingsClient<UserSettingsGetPayload<T>> : Prisma__UserSettingsClient<UserSettingsGetPayload<T> | null, null>

    /**
     * Find one UserSettings that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserSettingsFindUniqueOrThrowArgs} args - Arguments to find a UserSettings
     * @example
     * // Get one UserSettings
     * const userSettings = await prisma.userSettings.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserSettingsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, UserSettingsFindUniqueOrThrowArgs>
    ): Prisma__UserSettingsClient<UserSettingsGetPayload<T>>

    /**
     * Find the first UserSettings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSettingsFindFirstArgs} args - Arguments to find a UserSettings
     * @example
     * // Get one UserSettings
     * const userSettings = await prisma.userSettings.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserSettingsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserSettingsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'UserSettings'> extends True ? Prisma__UserSettingsClient<UserSettingsGetPayload<T>> : Prisma__UserSettingsClient<UserSettingsGetPayload<T> | null, null>

    /**
     * Find the first UserSettings that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSettingsFindFirstOrThrowArgs} args - Arguments to find a UserSettings
     * @example
     * // Get one UserSettings
     * const userSettings = await prisma.userSettings.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserSettingsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, UserSettingsFindFirstOrThrowArgs>
    ): Prisma__UserSettingsClient<UserSettingsGetPayload<T>>

    /**
     * Find zero or more UserSettings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSettingsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserSettings
     * const userSettings = await prisma.userSettings.findMany()
     * 
     * // Get first 10 UserSettings
     * const userSettings = await prisma.userSettings.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userSettingsWithIdOnly = await prisma.userSettings.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserSettingsFindManyArgs>(
      args?: SelectSubset<T, UserSettingsFindManyArgs>
    ): Prisma.PrismaPromise<Array<UserSettingsGetPayload<T>>>

    /**
     * Create a UserSettings.
     * @param {UserSettingsCreateArgs} args - Arguments to create a UserSettings.
     * @example
     * // Create one UserSettings
     * const UserSettings = await prisma.userSettings.create({
     *   data: {
     *     // ... data to create a UserSettings
     *   }
     * })
     * 
    **/
    create<T extends UserSettingsCreateArgs>(
      args: SelectSubset<T, UserSettingsCreateArgs>
    ): Prisma__UserSettingsClient<UserSettingsGetPayload<T>>

    /**
     * Create many UserSettings.
     *     @param {UserSettingsCreateManyArgs} args - Arguments to create many UserSettings.
     *     @example
     *     // Create many UserSettings
     *     const userSettings = await prisma.userSettings.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserSettingsCreateManyArgs>(
      args?: SelectSubset<T, UserSettingsCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a UserSettings.
     * @param {UserSettingsDeleteArgs} args - Arguments to delete one UserSettings.
     * @example
     * // Delete one UserSettings
     * const UserSettings = await prisma.userSettings.delete({
     *   where: {
     *     // ... filter to delete one UserSettings
     *   }
     * })
     * 
    **/
    delete<T extends UserSettingsDeleteArgs>(
      args: SelectSubset<T, UserSettingsDeleteArgs>
    ): Prisma__UserSettingsClient<UserSettingsGetPayload<T>>

    /**
     * Update one UserSettings.
     * @param {UserSettingsUpdateArgs} args - Arguments to update one UserSettings.
     * @example
     * // Update one UserSettings
     * const userSettings = await prisma.userSettings.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserSettingsUpdateArgs>(
      args: SelectSubset<T, UserSettingsUpdateArgs>
    ): Prisma__UserSettingsClient<UserSettingsGetPayload<T>>

    /**
     * Delete zero or more UserSettings.
     * @param {UserSettingsDeleteManyArgs} args - Arguments to filter UserSettings to delete.
     * @example
     * // Delete a few UserSettings
     * const { count } = await prisma.userSettings.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserSettingsDeleteManyArgs>(
      args?: SelectSubset<T, UserSettingsDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSettingsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserSettings
     * const userSettings = await prisma.userSettings.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserSettingsUpdateManyArgs>(
      args: SelectSubset<T, UserSettingsUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserSettings.
     * @param {UserSettingsUpsertArgs} args - Arguments to update or create a UserSettings.
     * @example
     * // Update or create a UserSettings
     * const userSettings = await prisma.userSettings.upsert({
     *   create: {
     *     // ... data to create a UserSettings
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserSettings we want to update
     *   }
     * })
    **/
    upsert<T extends UserSettingsUpsertArgs>(
      args: SelectSubset<T, UserSettingsUpsertArgs>
    ): Prisma__UserSettingsClient<UserSettingsGetPayload<T>>

    /**
     * Count the number of UserSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSettingsCountArgs} args - Arguments to filter UserSettings to count.
     * @example
     * // Count the number of UserSettings
     * const count = await prisma.userSettings.count({
     *   where: {
     *     // ... the filter for the UserSettings we want to count
     *   }
     * })
    **/
    count<T extends UserSettingsCountArgs>(
      args?: Subset<T, UserSettingsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserSettingsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSettingsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserSettingsAggregateArgs>(args: Subset<T, UserSettingsAggregateArgs>): Prisma.PrismaPromise<GetUserSettingsAggregateType<T>>

    /**
     * Group by UserSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSettingsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserSettingsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserSettingsGroupByArgs['orderBy'] }
        : { orderBy?: UserSettingsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserSettingsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserSettingsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for UserSettings.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserSettingsClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * UserSettings base type for findUnique actions
   */
  export type UserSettingsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the UserSettings
     */
    select?: UserSettingsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserSettingsInclude | null
    /**
     * Filter, which UserSettings to fetch.
     */
    where: UserSettingsWhereUniqueInput
  }

  /**
   * UserSettings findUnique
   */
  export interface UserSettingsFindUniqueArgs extends UserSettingsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * UserSettings findUniqueOrThrow
   */
  export type UserSettingsFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the UserSettings
     */
    select?: UserSettingsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserSettingsInclude | null
    /**
     * Filter, which UserSettings to fetch.
     */
    where: UserSettingsWhereUniqueInput
  }


  /**
   * UserSettings base type for findFirst actions
   */
  export type UserSettingsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the UserSettings
     */
    select?: UserSettingsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserSettingsInclude | null
    /**
     * Filter, which UserSettings to fetch.
     */
    where?: UserSettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSettings to fetch.
     */
    orderBy?: Enumerable<UserSettingsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserSettings.
     */
    cursor?: UserSettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserSettings.
     */
    distinct?: Enumerable<UserSettingsScalarFieldEnum>
  }

  /**
   * UserSettings findFirst
   */
  export interface UserSettingsFindFirstArgs extends UserSettingsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * UserSettings findFirstOrThrow
   */
  export type UserSettingsFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the UserSettings
     */
    select?: UserSettingsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserSettingsInclude | null
    /**
     * Filter, which UserSettings to fetch.
     */
    where?: UserSettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSettings to fetch.
     */
    orderBy?: Enumerable<UserSettingsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserSettings.
     */
    cursor?: UserSettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserSettings.
     */
    distinct?: Enumerable<UserSettingsScalarFieldEnum>
  }


  /**
   * UserSettings findMany
   */
  export type UserSettingsFindManyArgs = {
    /**
     * Select specific fields to fetch from the UserSettings
     */
    select?: UserSettingsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserSettingsInclude | null
    /**
     * Filter, which UserSettings to fetch.
     */
    where?: UserSettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSettings to fetch.
     */
    orderBy?: Enumerable<UserSettingsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserSettings.
     */
    cursor?: UserSettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSettings.
     */
    skip?: number
    distinct?: Enumerable<UserSettingsScalarFieldEnum>
  }


  /**
   * UserSettings create
   */
  export type UserSettingsCreateArgs = {
    /**
     * Select specific fields to fetch from the UserSettings
     */
    select?: UserSettingsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserSettingsInclude | null
    /**
     * The data needed to create a UserSettings.
     */
    data: XOR<UserSettingsCreateInput, UserSettingsUncheckedCreateInput>
  }


  /**
   * UserSettings createMany
   */
  export type UserSettingsCreateManyArgs = {
    /**
     * The data used to create many UserSettings.
     */
    data: Enumerable<UserSettingsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * UserSettings update
   */
  export type UserSettingsUpdateArgs = {
    /**
     * Select specific fields to fetch from the UserSettings
     */
    select?: UserSettingsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserSettingsInclude | null
    /**
     * The data needed to update a UserSettings.
     */
    data: XOR<UserSettingsUpdateInput, UserSettingsUncheckedUpdateInput>
    /**
     * Choose, which UserSettings to update.
     */
    where: UserSettingsWhereUniqueInput
  }


  /**
   * UserSettings updateMany
   */
  export type UserSettingsUpdateManyArgs = {
    /**
     * The data used to update UserSettings.
     */
    data: XOR<UserSettingsUpdateManyMutationInput, UserSettingsUncheckedUpdateManyInput>
    /**
     * Filter which UserSettings to update
     */
    where?: UserSettingsWhereInput
  }


  /**
   * UserSettings upsert
   */
  export type UserSettingsUpsertArgs = {
    /**
     * Select specific fields to fetch from the UserSettings
     */
    select?: UserSettingsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserSettingsInclude | null
    /**
     * The filter to search for the UserSettings to update in case it exists.
     */
    where: UserSettingsWhereUniqueInput
    /**
     * In case the UserSettings found by the `where` argument doesn't exist, create a new UserSettings with this data.
     */
    create: XOR<UserSettingsCreateInput, UserSettingsUncheckedCreateInput>
    /**
     * In case the UserSettings was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserSettingsUpdateInput, UserSettingsUncheckedUpdateInput>
  }


  /**
   * UserSettings delete
   */
  export type UserSettingsDeleteArgs = {
    /**
     * Select specific fields to fetch from the UserSettings
     */
    select?: UserSettingsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserSettingsInclude | null
    /**
     * Filter which UserSettings to delete.
     */
    where: UserSettingsWhereUniqueInput
  }


  /**
   * UserSettings deleteMany
   */
  export type UserSettingsDeleteManyArgs = {
    /**
     * Filter which UserSettings to delete
     */
    where?: UserSettingsWhereInput
  }


  /**
   * UserSettings without action
   */
  export type UserSettingsArgs = {
    /**
     * Select specific fields to fetch from the UserSettings
     */
    select?: UserSettingsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserSettingsInclude | null
  }



  /**
   * Model Session
   */


  export type AggregateSession = {
    _count: SessionCountAggregateOutputType | null
    _avg: SessionAvgAggregateOutputType | null
    _sum: SessionSumAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  export type SessionAvgAggregateOutputType = {
    active_expires: number | null
    idle_expires: number | null
  }

  export type SessionSumAggregateOutputType = {
    active_expires: bigint | null
    idle_expires: bigint | null
  }

  export type SessionMinAggregateOutputType = {
    id: string | null
    user_id: string | null
    active_expires: bigint | null
    idle_expires: bigint | null
  }

  export type SessionMaxAggregateOutputType = {
    id: string | null
    user_id: string | null
    active_expires: bigint | null
    idle_expires: bigint | null
  }

  export type SessionCountAggregateOutputType = {
    id: number
    user_id: number
    active_expires: number
    idle_expires: number
    _all: number
  }


  export type SessionAvgAggregateInputType = {
    active_expires?: true
    idle_expires?: true
  }

  export type SessionSumAggregateInputType = {
    active_expires?: true
    idle_expires?: true
  }

  export type SessionMinAggregateInputType = {
    id?: true
    user_id?: true
    active_expires?: true
    idle_expires?: true
  }

  export type SessionMaxAggregateInputType = {
    id?: true
    user_id?: true
    active_expires?: true
    idle_expires?: true
  }

  export type SessionCountAggregateInputType = {
    id?: true
    user_id?: true
    active_expires?: true
    idle_expires?: true
    _all?: true
  }

  export type SessionAggregateArgs = {
    /**
     * Filter which Session to aggregate.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: Enumerable<SessionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sessions
    **/
    _count?: true | SessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SessionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SessionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionMaxAggregateInputType
  }

  export type GetSessionAggregateType<T extends SessionAggregateArgs> = {
        [P in keyof T & keyof AggregateSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSession[P]>
      : GetScalarType<T[P], AggregateSession[P]>
  }




  export type SessionGroupByArgs = {
    where?: SessionWhereInput
    orderBy?: Enumerable<SessionOrderByWithAggregationInput>
    by: SessionScalarFieldEnum[]
    having?: SessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionCountAggregateInputType | true
    _avg?: SessionAvgAggregateInputType
    _sum?: SessionSumAggregateInputType
    _min?: SessionMinAggregateInputType
    _max?: SessionMaxAggregateInputType
  }


  export type SessionGroupByOutputType = {
    id: string
    user_id: string
    active_expires: bigint
    idle_expires: bigint
    _count: SessionCountAggregateOutputType | null
    _avg: SessionAvgAggregateOutputType | null
    _sum: SessionSumAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  type GetSessionGroupByPayload<T extends SessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<SessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionGroupByOutputType[P]>
            : GetScalarType<T[P], SessionGroupByOutputType[P]>
        }
      >
    >


  export type SessionSelect = {
    id?: boolean
    user_id?: boolean
    active_expires?: boolean
    idle_expires?: boolean
    user?: boolean | UserArgs
  }


  export type SessionInclude = {
    user?: boolean | UserArgs
  }

  export type SessionGetPayload<S extends boolean | null | undefined | SessionArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Session :
    S extends undefined ? never :
    S extends { include: any } & (SessionArgs | SessionFindManyArgs)
    ? Session  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (SessionArgs | SessionFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<S['select'][P]> :  P extends keyof Session ? Session[P] : never
  } 
      : Session


  type SessionCountArgs = 
    Omit<SessionFindManyArgs, 'select' | 'include'> & {
      select?: SessionCountAggregateInputType | true
    }

  export interface SessionDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Session that matches the filter.
     * @param {SessionFindUniqueArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SessionFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, SessionFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Session'> extends True ? Prisma__SessionClient<SessionGetPayload<T>> : Prisma__SessionClient<SessionGetPayload<T> | null, null>

    /**
     * Find one Session that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SessionFindUniqueOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SessionFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, SessionFindUniqueOrThrowArgs>
    ): Prisma__SessionClient<SessionGetPayload<T>>

    /**
     * Find the first Session that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SessionFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, SessionFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Session'> extends True ? Prisma__SessionClient<SessionGetPayload<T>> : Prisma__SessionClient<SessionGetPayload<T> | null, null>

    /**
     * Find the first Session that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SessionFindFirstOrThrowArgs>(
      args?: SelectSubset<T, SessionFindFirstOrThrowArgs>
    ): Prisma__SessionClient<SessionGetPayload<T>>

    /**
     * Find zero or more Sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sessions
     * const sessions = await prisma.session.findMany()
     * 
     * // Get first 10 Sessions
     * const sessions = await prisma.session.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sessionWithIdOnly = await prisma.session.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SessionFindManyArgs>(
      args?: SelectSubset<T, SessionFindManyArgs>
    ): Prisma.PrismaPromise<Array<SessionGetPayload<T>>>

    /**
     * Create a Session.
     * @param {SessionCreateArgs} args - Arguments to create a Session.
     * @example
     * // Create one Session
     * const Session = await prisma.session.create({
     *   data: {
     *     // ... data to create a Session
     *   }
     * })
     * 
    **/
    create<T extends SessionCreateArgs>(
      args: SelectSubset<T, SessionCreateArgs>
    ): Prisma__SessionClient<SessionGetPayload<T>>

    /**
     * Create many Sessions.
     *     @param {SessionCreateManyArgs} args - Arguments to create many Sessions.
     *     @example
     *     // Create many Sessions
     *     const session = await prisma.session.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SessionCreateManyArgs>(
      args?: SelectSubset<T, SessionCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Session.
     * @param {SessionDeleteArgs} args - Arguments to delete one Session.
     * @example
     * // Delete one Session
     * const Session = await prisma.session.delete({
     *   where: {
     *     // ... filter to delete one Session
     *   }
     * })
     * 
    **/
    delete<T extends SessionDeleteArgs>(
      args: SelectSubset<T, SessionDeleteArgs>
    ): Prisma__SessionClient<SessionGetPayload<T>>

    /**
     * Update one Session.
     * @param {SessionUpdateArgs} args - Arguments to update one Session.
     * @example
     * // Update one Session
     * const session = await prisma.session.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SessionUpdateArgs>(
      args: SelectSubset<T, SessionUpdateArgs>
    ): Prisma__SessionClient<SessionGetPayload<T>>

    /**
     * Delete zero or more Sessions.
     * @param {SessionDeleteManyArgs} args - Arguments to filter Sessions to delete.
     * @example
     * // Delete a few Sessions
     * const { count } = await prisma.session.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SessionDeleteManyArgs>(
      args?: SelectSubset<T, SessionDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SessionUpdateManyArgs>(
      args: SelectSubset<T, SessionUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Session.
     * @param {SessionUpsertArgs} args - Arguments to update or create a Session.
     * @example
     * // Update or create a Session
     * const session = await prisma.session.upsert({
     *   create: {
     *     // ... data to create a Session
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Session we want to update
     *   }
     * })
    **/
    upsert<T extends SessionUpsertArgs>(
      args: SelectSubset<T, SessionUpsertArgs>
    ): Prisma__SessionClient<SessionGetPayload<T>>

    /**
     * Count the number of Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionCountArgs} args - Arguments to filter Sessions to count.
     * @example
     * // Count the number of Sessions
     * const count = await prisma.session.count({
     *   where: {
     *     // ... the filter for the Sessions we want to count
     *   }
     * })
    **/
    count<T extends SessionCountArgs>(
      args?: Subset<T, SessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionAggregateArgs>(args: Subset<T, SessionAggregateArgs>): Prisma.PrismaPromise<GetSessionAggregateType<T>>

    /**
     * Group by Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionGroupByArgs['orderBy'] }
        : { orderBy?: SessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Session.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__SessionClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Session base type for findUnique actions
   */
  export type SessionFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findUnique
   */
  export interface SessionFindUniqueArgs extends SessionFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Session findUniqueOrThrow
   */
  export type SessionFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }


  /**
   * Session base type for findFirst actions
   */
  export type SessionFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: Enumerable<SessionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: Enumerable<SessionScalarFieldEnum>
  }

  /**
   * Session findFirst
   */
  export interface SessionFindFirstArgs extends SessionFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Session findFirstOrThrow
   */
  export type SessionFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: Enumerable<SessionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: Enumerable<SessionScalarFieldEnum>
  }


  /**
   * Session findMany
   */
  export type SessionFindManyArgs = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude | null
    /**
     * Filter, which Sessions to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: Enumerable<SessionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    distinct?: Enumerable<SessionScalarFieldEnum>
  }


  /**
   * Session create
   */
  export type SessionCreateArgs = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude | null
    /**
     * The data needed to create a Session.
     */
    data: XOR<SessionCreateInput, SessionUncheckedCreateInput>
  }


  /**
   * Session createMany
   */
  export type SessionCreateManyArgs = {
    /**
     * The data used to create many Sessions.
     */
    data: Enumerable<SessionCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Session update
   */
  export type SessionUpdateArgs = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude | null
    /**
     * The data needed to update a Session.
     */
    data: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
    /**
     * Choose, which Session to update.
     */
    where: SessionWhereUniqueInput
  }


  /**
   * Session updateMany
   */
  export type SessionUpdateManyArgs = {
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
  }


  /**
   * Session upsert
   */
  export type SessionUpsertArgs = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude | null
    /**
     * The filter to search for the Session to update in case it exists.
     */
    where: SessionWhereUniqueInput
    /**
     * In case the Session found by the `where` argument doesn't exist, create a new Session with this data.
     */
    create: XOR<SessionCreateInput, SessionUncheckedCreateInput>
    /**
     * In case the Session was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
  }


  /**
   * Session delete
   */
  export type SessionDeleteArgs = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude | null
    /**
     * Filter which Session to delete.
     */
    where: SessionWhereUniqueInput
  }


  /**
   * Session deleteMany
   */
  export type SessionDeleteManyArgs = {
    /**
     * Filter which Sessions to delete
     */
    where?: SessionWhereInput
  }


  /**
   * Session without action
   */
  export type SessionArgs = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude | null
  }



  /**
   * Model Key
   */


  export type AggregateKey = {
    _count: KeyCountAggregateOutputType | null
    _min: KeyMinAggregateOutputType | null
    _max: KeyMaxAggregateOutputType | null
  }

  export type KeyMinAggregateOutputType = {
    id: string | null
    hashed_password: string | null
    user_id: string | null
    primary: boolean | null
  }

  export type KeyMaxAggregateOutputType = {
    id: string | null
    hashed_password: string | null
    user_id: string | null
    primary: boolean | null
  }

  export type KeyCountAggregateOutputType = {
    id: number
    hashed_password: number
    user_id: number
    primary: number
    _all: number
  }


  export type KeyMinAggregateInputType = {
    id?: true
    hashed_password?: true
    user_id?: true
    primary?: true
  }

  export type KeyMaxAggregateInputType = {
    id?: true
    hashed_password?: true
    user_id?: true
    primary?: true
  }

  export type KeyCountAggregateInputType = {
    id?: true
    hashed_password?: true
    user_id?: true
    primary?: true
    _all?: true
  }

  export type KeyAggregateArgs = {
    /**
     * Filter which Key to aggregate.
     */
    where?: KeyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Keys to fetch.
     */
    orderBy?: Enumerable<KeyOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: KeyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Keys from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Keys.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Keys
    **/
    _count?: true | KeyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: KeyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: KeyMaxAggregateInputType
  }

  export type GetKeyAggregateType<T extends KeyAggregateArgs> = {
        [P in keyof T & keyof AggregateKey]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateKey[P]>
      : GetScalarType<T[P], AggregateKey[P]>
  }




  export type KeyGroupByArgs = {
    where?: KeyWhereInput
    orderBy?: Enumerable<KeyOrderByWithAggregationInput>
    by: KeyScalarFieldEnum[]
    having?: KeyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: KeyCountAggregateInputType | true
    _min?: KeyMinAggregateInputType
    _max?: KeyMaxAggregateInputType
  }


  export type KeyGroupByOutputType = {
    id: string
    hashed_password: string | null
    user_id: string
    primary: boolean
    _count: KeyCountAggregateOutputType | null
    _min: KeyMinAggregateOutputType | null
    _max: KeyMaxAggregateOutputType | null
  }

  type GetKeyGroupByPayload<T extends KeyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<KeyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof KeyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], KeyGroupByOutputType[P]>
            : GetScalarType<T[P], KeyGroupByOutputType[P]>
        }
      >
    >


  export type KeySelect = {
    id?: boolean
    hashed_password?: boolean
    user_id?: boolean
    primary?: boolean
    user?: boolean | UserArgs
  }


  export type KeyInclude = {
    user?: boolean | UserArgs
  }

  export type KeyGetPayload<S extends boolean | null | undefined | KeyArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Key :
    S extends undefined ? never :
    S extends { include: any } & (KeyArgs | KeyFindManyArgs)
    ? Key  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (KeyArgs | KeyFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<S['select'][P]> :  P extends keyof Key ? Key[P] : never
  } 
      : Key


  type KeyCountArgs = 
    Omit<KeyFindManyArgs, 'select' | 'include'> & {
      select?: KeyCountAggregateInputType | true
    }

  export interface KeyDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Key that matches the filter.
     * @param {KeyFindUniqueArgs} args - Arguments to find a Key
     * @example
     * // Get one Key
     * const key = await prisma.key.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends KeyFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, KeyFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Key'> extends True ? Prisma__KeyClient<KeyGetPayload<T>> : Prisma__KeyClient<KeyGetPayload<T> | null, null>

    /**
     * Find one Key that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {KeyFindUniqueOrThrowArgs} args - Arguments to find a Key
     * @example
     * // Get one Key
     * const key = await prisma.key.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends KeyFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, KeyFindUniqueOrThrowArgs>
    ): Prisma__KeyClient<KeyGetPayload<T>>

    /**
     * Find the first Key that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KeyFindFirstArgs} args - Arguments to find a Key
     * @example
     * // Get one Key
     * const key = await prisma.key.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends KeyFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, KeyFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Key'> extends True ? Prisma__KeyClient<KeyGetPayload<T>> : Prisma__KeyClient<KeyGetPayload<T> | null, null>

    /**
     * Find the first Key that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KeyFindFirstOrThrowArgs} args - Arguments to find a Key
     * @example
     * // Get one Key
     * const key = await prisma.key.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends KeyFindFirstOrThrowArgs>(
      args?: SelectSubset<T, KeyFindFirstOrThrowArgs>
    ): Prisma__KeyClient<KeyGetPayload<T>>

    /**
     * Find zero or more Keys that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KeyFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Keys
     * const keys = await prisma.key.findMany()
     * 
     * // Get first 10 Keys
     * const keys = await prisma.key.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const keyWithIdOnly = await prisma.key.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends KeyFindManyArgs>(
      args?: SelectSubset<T, KeyFindManyArgs>
    ): Prisma.PrismaPromise<Array<KeyGetPayload<T>>>

    /**
     * Create a Key.
     * @param {KeyCreateArgs} args - Arguments to create a Key.
     * @example
     * // Create one Key
     * const Key = await prisma.key.create({
     *   data: {
     *     // ... data to create a Key
     *   }
     * })
     * 
    **/
    create<T extends KeyCreateArgs>(
      args: SelectSubset<T, KeyCreateArgs>
    ): Prisma__KeyClient<KeyGetPayload<T>>

    /**
     * Create many Keys.
     *     @param {KeyCreateManyArgs} args - Arguments to create many Keys.
     *     @example
     *     // Create many Keys
     *     const key = await prisma.key.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends KeyCreateManyArgs>(
      args?: SelectSubset<T, KeyCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Key.
     * @param {KeyDeleteArgs} args - Arguments to delete one Key.
     * @example
     * // Delete one Key
     * const Key = await prisma.key.delete({
     *   where: {
     *     // ... filter to delete one Key
     *   }
     * })
     * 
    **/
    delete<T extends KeyDeleteArgs>(
      args: SelectSubset<T, KeyDeleteArgs>
    ): Prisma__KeyClient<KeyGetPayload<T>>

    /**
     * Update one Key.
     * @param {KeyUpdateArgs} args - Arguments to update one Key.
     * @example
     * // Update one Key
     * const key = await prisma.key.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends KeyUpdateArgs>(
      args: SelectSubset<T, KeyUpdateArgs>
    ): Prisma__KeyClient<KeyGetPayload<T>>

    /**
     * Delete zero or more Keys.
     * @param {KeyDeleteManyArgs} args - Arguments to filter Keys to delete.
     * @example
     * // Delete a few Keys
     * const { count } = await prisma.key.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends KeyDeleteManyArgs>(
      args?: SelectSubset<T, KeyDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Keys.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KeyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Keys
     * const key = await prisma.key.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends KeyUpdateManyArgs>(
      args: SelectSubset<T, KeyUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Key.
     * @param {KeyUpsertArgs} args - Arguments to update or create a Key.
     * @example
     * // Update or create a Key
     * const key = await prisma.key.upsert({
     *   create: {
     *     // ... data to create a Key
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Key we want to update
     *   }
     * })
    **/
    upsert<T extends KeyUpsertArgs>(
      args: SelectSubset<T, KeyUpsertArgs>
    ): Prisma__KeyClient<KeyGetPayload<T>>

    /**
     * Count the number of Keys.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KeyCountArgs} args - Arguments to filter Keys to count.
     * @example
     * // Count the number of Keys
     * const count = await prisma.key.count({
     *   where: {
     *     // ... the filter for the Keys we want to count
     *   }
     * })
    **/
    count<T extends KeyCountArgs>(
      args?: Subset<T, KeyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], KeyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Key.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KeyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends KeyAggregateArgs>(args: Subset<T, KeyAggregateArgs>): Prisma.PrismaPromise<GetKeyAggregateType<T>>

    /**
     * Group by Key.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KeyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends KeyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: KeyGroupByArgs['orderBy'] }
        : { orderBy?: KeyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, KeyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetKeyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Key.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__KeyClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Key base type for findUnique actions
   */
  export type KeyFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Key
     */
    select?: KeySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: KeyInclude | null
    /**
     * Filter, which Key to fetch.
     */
    where: KeyWhereUniqueInput
  }

  /**
   * Key findUnique
   */
  export interface KeyFindUniqueArgs extends KeyFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Key findUniqueOrThrow
   */
  export type KeyFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Key
     */
    select?: KeySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: KeyInclude | null
    /**
     * Filter, which Key to fetch.
     */
    where: KeyWhereUniqueInput
  }


  /**
   * Key base type for findFirst actions
   */
  export type KeyFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Key
     */
    select?: KeySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: KeyInclude | null
    /**
     * Filter, which Key to fetch.
     */
    where?: KeyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Keys to fetch.
     */
    orderBy?: Enumerable<KeyOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Keys.
     */
    cursor?: KeyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Keys from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Keys.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Keys.
     */
    distinct?: Enumerable<KeyScalarFieldEnum>
  }

  /**
   * Key findFirst
   */
  export interface KeyFindFirstArgs extends KeyFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Key findFirstOrThrow
   */
  export type KeyFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Key
     */
    select?: KeySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: KeyInclude | null
    /**
     * Filter, which Key to fetch.
     */
    where?: KeyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Keys to fetch.
     */
    orderBy?: Enumerable<KeyOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Keys.
     */
    cursor?: KeyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Keys from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Keys.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Keys.
     */
    distinct?: Enumerable<KeyScalarFieldEnum>
  }


  /**
   * Key findMany
   */
  export type KeyFindManyArgs = {
    /**
     * Select specific fields to fetch from the Key
     */
    select?: KeySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: KeyInclude | null
    /**
     * Filter, which Keys to fetch.
     */
    where?: KeyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Keys to fetch.
     */
    orderBy?: Enumerable<KeyOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Keys.
     */
    cursor?: KeyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Keys from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Keys.
     */
    skip?: number
    distinct?: Enumerable<KeyScalarFieldEnum>
  }


  /**
   * Key create
   */
  export type KeyCreateArgs = {
    /**
     * Select specific fields to fetch from the Key
     */
    select?: KeySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: KeyInclude | null
    /**
     * The data needed to create a Key.
     */
    data: XOR<KeyCreateInput, KeyUncheckedCreateInput>
  }


  /**
   * Key createMany
   */
  export type KeyCreateManyArgs = {
    /**
     * The data used to create many Keys.
     */
    data: Enumerable<KeyCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Key update
   */
  export type KeyUpdateArgs = {
    /**
     * Select specific fields to fetch from the Key
     */
    select?: KeySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: KeyInclude | null
    /**
     * The data needed to update a Key.
     */
    data: XOR<KeyUpdateInput, KeyUncheckedUpdateInput>
    /**
     * Choose, which Key to update.
     */
    where: KeyWhereUniqueInput
  }


  /**
   * Key updateMany
   */
  export type KeyUpdateManyArgs = {
    /**
     * The data used to update Keys.
     */
    data: XOR<KeyUpdateManyMutationInput, KeyUncheckedUpdateManyInput>
    /**
     * Filter which Keys to update
     */
    where?: KeyWhereInput
  }


  /**
   * Key upsert
   */
  export type KeyUpsertArgs = {
    /**
     * Select specific fields to fetch from the Key
     */
    select?: KeySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: KeyInclude | null
    /**
     * The filter to search for the Key to update in case it exists.
     */
    where: KeyWhereUniqueInput
    /**
     * In case the Key found by the `where` argument doesn't exist, create a new Key with this data.
     */
    create: XOR<KeyCreateInput, KeyUncheckedCreateInput>
    /**
     * In case the Key was found with the provided `where` argument, update it with this data.
     */
    update: XOR<KeyUpdateInput, KeyUncheckedUpdateInput>
  }


  /**
   * Key delete
   */
  export type KeyDeleteArgs = {
    /**
     * Select specific fields to fetch from the Key
     */
    select?: KeySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: KeyInclude | null
    /**
     * Filter which Key to delete.
     */
    where: KeyWhereUniqueInput
  }


  /**
   * Key deleteMany
   */
  export type KeyDeleteManyArgs = {
    /**
     * Filter which Keys to delete
     */
    where?: KeyWhereInput
  }


  /**
   * Key without action
   */
  export type KeyArgs = {
    /**
     * Select specific fields to fetch from the Key
     */
    select?: KeySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: KeyInclude | null
  }



  /**
   * Model Article
   */


  export type AggregateArticle = {
    _count: ArticleCountAggregateOutputType | null
    _min: ArticleMinAggregateOutputType | null
    _max: ArticleMaxAggregateOutputType | null
  }

  export type ArticleMinAggregateOutputType = {
    id: string | null
    title: string | null
    content: string | null
    userId: string | null
    bogus: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ArticleMaxAggregateOutputType = {
    id: string | null
    title: string | null
    content: string | null
    userId: string | null
    bogus: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ArticleCountAggregateOutputType = {
    id: number
    title: number
    content: number
    userId: number
    bogus: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ArticleMinAggregateInputType = {
    id?: true
    title?: true
    content?: true
    userId?: true
    bogus?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ArticleMaxAggregateInputType = {
    id?: true
    title?: true
    content?: true
    userId?: true
    bogus?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ArticleCountAggregateInputType = {
    id?: true
    title?: true
    content?: true
    userId?: true
    bogus?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ArticleAggregateArgs = {
    /**
     * Filter which Article to aggregate.
     */
    where?: ArticleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Articles to fetch.
     */
    orderBy?: Enumerable<ArticleOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ArticleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Articles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Articles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Articles
    **/
    _count?: true | ArticleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ArticleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ArticleMaxAggregateInputType
  }

  export type GetArticleAggregateType<T extends ArticleAggregateArgs> = {
        [P in keyof T & keyof AggregateArticle]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateArticle[P]>
      : GetScalarType<T[P], AggregateArticle[P]>
  }




  export type ArticleGroupByArgs = {
    where?: ArticleWhereInput
    orderBy?: Enumerable<ArticleOrderByWithAggregationInput>
    by: ArticleScalarFieldEnum[]
    having?: ArticleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ArticleCountAggregateInputType | true
    _min?: ArticleMinAggregateInputType
    _max?: ArticleMaxAggregateInputType
  }


  export type ArticleGroupByOutputType = {
    id: string
    title: string
    content: string | null
    userId: string | null
    bogus: string | null
    createdAt: Date | null
    updatedAt: Date | null
    _count: ArticleCountAggregateOutputType | null
    _min: ArticleMinAggregateOutputType | null
    _max: ArticleMaxAggregateOutputType | null
  }

  type GetArticleGroupByPayload<T extends ArticleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ArticleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ArticleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ArticleGroupByOutputType[P]>
            : GetScalarType<T[P], ArticleGroupByOutputType[P]>
        }
      >
    >


  export type ArticleSelect = {
    id?: boolean
    title?: boolean
    content?: boolean
    userId?: boolean
    bogus?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserArgs
  }


  export type ArticleInclude = {
    user?: boolean | UserArgs
  }

  export type ArticleGetPayload<S extends boolean | null | undefined | ArticleArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Article :
    S extends undefined ? never :
    S extends { include: any } & (ArticleArgs | ArticleFindManyArgs)
    ? Article  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<S['include'][P]> | null :  never
  } 
    : S extends { select: any } & (ArticleArgs | ArticleFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<S['select'][P]> | null :  P extends keyof Article ? Article[P] : never
  } 
      : Article


  type ArticleCountArgs = 
    Omit<ArticleFindManyArgs, 'select' | 'include'> & {
      select?: ArticleCountAggregateInputType | true
    }

  export interface ArticleDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Article that matches the filter.
     * @param {ArticleFindUniqueArgs} args - Arguments to find a Article
     * @example
     * // Get one Article
     * const article = await prisma.article.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ArticleFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ArticleFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Article'> extends True ? Prisma__ArticleClient<ArticleGetPayload<T>> : Prisma__ArticleClient<ArticleGetPayload<T> | null, null>

    /**
     * Find one Article that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ArticleFindUniqueOrThrowArgs} args - Arguments to find a Article
     * @example
     * // Get one Article
     * const article = await prisma.article.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ArticleFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ArticleFindUniqueOrThrowArgs>
    ): Prisma__ArticleClient<ArticleGetPayload<T>>

    /**
     * Find the first Article that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArticleFindFirstArgs} args - Arguments to find a Article
     * @example
     * // Get one Article
     * const article = await prisma.article.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ArticleFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ArticleFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Article'> extends True ? Prisma__ArticleClient<ArticleGetPayload<T>> : Prisma__ArticleClient<ArticleGetPayload<T> | null, null>

    /**
     * Find the first Article that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArticleFindFirstOrThrowArgs} args - Arguments to find a Article
     * @example
     * // Get one Article
     * const article = await prisma.article.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ArticleFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ArticleFindFirstOrThrowArgs>
    ): Prisma__ArticleClient<ArticleGetPayload<T>>

    /**
     * Find zero or more Articles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArticleFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Articles
     * const articles = await prisma.article.findMany()
     * 
     * // Get first 10 Articles
     * const articles = await prisma.article.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const articleWithIdOnly = await prisma.article.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ArticleFindManyArgs>(
      args?: SelectSubset<T, ArticleFindManyArgs>
    ): Prisma.PrismaPromise<Array<ArticleGetPayload<T>>>

    /**
     * Create a Article.
     * @param {ArticleCreateArgs} args - Arguments to create a Article.
     * @example
     * // Create one Article
     * const Article = await prisma.article.create({
     *   data: {
     *     // ... data to create a Article
     *   }
     * })
     * 
    **/
    create<T extends ArticleCreateArgs>(
      args: SelectSubset<T, ArticleCreateArgs>
    ): Prisma__ArticleClient<ArticleGetPayload<T>>

    /**
     * Create many Articles.
     *     @param {ArticleCreateManyArgs} args - Arguments to create many Articles.
     *     @example
     *     // Create many Articles
     *     const article = await prisma.article.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ArticleCreateManyArgs>(
      args?: SelectSubset<T, ArticleCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Article.
     * @param {ArticleDeleteArgs} args - Arguments to delete one Article.
     * @example
     * // Delete one Article
     * const Article = await prisma.article.delete({
     *   where: {
     *     // ... filter to delete one Article
     *   }
     * })
     * 
    **/
    delete<T extends ArticleDeleteArgs>(
      args: SelectSubset<T, ArticleDeleteArgs>
    ): Prisma__ArticleClient<ArticleGetPayload<T>>

    /**
     * Update one Article.
     * @param {ArticleUpdateArgs} args - Arguments to update one Article.
     * @example
     * // Update one Article
     * const article = await prisma.article.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ArticleUpdateArgs>(
      args: SelectSubset<T, ArticleUpdateArgs>
    ): Prisma__ArticleClient<ArticleGetPayload<T>>

    /**
     * Delete zero or more Articles.
     * @param {ArticleDeleteManyArgs} args - Arguments to filter Articles to delete.
     * @example
     * // Delete a few Articles
     * const { count } = await prisma.article.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ArticleDeleteManyArgs>(
      args?: SelectSubset<T, ArticleDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Articles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArticleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Articles
     * const article = await prisma.article.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ArticleUpdateManyArgs>(
      args: SelectSubset<T, ArticleUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Article.
     * @param {ArticleUpsertArgs} args - Arguments to update or create a Article.
     * @example
     * // Update or create a Article
     * const article = await prisma.article.upsert({
     *   create: {
     *     // ... data to create a Article
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Article we want to update
     *   }
     * })
    **/
    upsert<T extends ArticleUpsertArgs>(
      args: SelectSubset<T, ArticleUpsertArgs>
    ): Prisma__ArticleClient<ArticleGetPayload<T>>

    /**
     * Count the number of Articles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArticleCountArgs} args - Arguments to filter Articles to count.
     * @example
     * // Count the number of Articles
     * const count = await prisma.article.count({
     *   where: {
     *     // ... the filter for the Articles we want to count
     *   }
     * })
    **/
    count<T extends ArticleCountArgs>(
      args?: Subset<T, ArticleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ArticleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Article.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArticleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ArticleAggregateArgs>(args: Subset<T, ArticleAggregateArgs>): Prisma.PrismaPromise<GetArticleAggregateType<T>>

    /**
     * Group by Article.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArticleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ArticleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ArticleGroupByArgs['orderBy'] }
        : { orderBy?: ArticleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ArticleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetArticleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Article.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ArticleClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Article base type for findUnique actions
   */
  export type ArticleFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Article
     */
    select?: ArticleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ArticleInclude | null
    /**
     * Filter, which Article to fetch.
     */
    where: ArticleWhereUniqueInput
  }

  /**
   * Article findUnique
   */
  export interface ArticleFindUniqueArgs extends ArticleFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Article findUniqueOrThrow
   */
  export type ArticleFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Article
     */
    select?: ArticleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ArticleInclude | null
    /**
     * Filter, which Article to fetch.
     */
    where: ArticleWhereUniqueInput
  }


  /**
   * Article base type for findFirst actions
   */
  export type ArticleFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Article
     */
    select?: ArticleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ArticleInclude | null
    /**
     * Filter, which Article to fetch.
     */
    where?: ArticleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Articles to fetch.
     */
    orderBy?: Enumerable<ArticleOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Articles.
     */
    cursor?: ArticleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Articles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Articles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Articles.
     */
    distinct?: Enumerable<ArticleScalarFieldEnum>
  }

  /**
   * Article findFirst
   */
  export interface ArticleFindFirstArgs extends ArticleFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Article findFirstOrThrow
   */
  export type ArticleFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Article
     */
    select?: ArticleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ArticleInclude | null
    /**
     * Filter, which Article to fetch.
     */
    where?: ArticleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Articles to fetch.
     */
    orderBy?: Enumerable<ArticleOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Articles.
     */
    cursor?: ArticleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Articles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Articles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Articles.
     */
    distinct?: Enumerable<ArticleScalarFieldEnum>
  }


  /**
   * Article findMany
   */
  export type ArticleFindManyArgs = {
    /**
     * Select specific fields to fetch from the Article
     */
    select?: ArticleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ArticleInclude | null
    /**
     * Filter, which Articles to fetch.
     */
    where?: ArticleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Articles to fetch.
     */
    orderBy?: Enumerable<ArticleOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Articles.
     */
    cursor?: ArticleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Articles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Articles.
     */
    skip?: number
    distinct?: Enumerable<ArticleScalarFieldEnum>
  }


  /**
   * Article create
   */
  export type ArticleCreateArgs = {
    /**
     * Select specific fields to fetch from the Article
     */
    select?: ArticleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ArticleInclude | null
    /**
     * The data needed to create a Article.
     */
    data: XOR<ArticleCreateInput, ArticleUncheckedCreateInput>
  }


  /**
   * Article createMany
   */
  export type ArticleCreateManyArgs = {
    /**
     * The data used to create many Articles.
     */
    data: Enumerable<ArticleCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Article update
   */
  export type ArticleUpdateArgs = {
    /**
     * Select specific fields to fetch from the Article
     */
    select?: ArticleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ArticleInclude | null
    /**
     * The data needed to update a Article.
     */
    data: XOR<ArticleUpdateInput, ArticleUncheckedUpdateInput>
    /**
     * Choose, which Article to update.
     */
    where: ArticleWhereUniqueInput
  }


  /**
   * Article updateMany
   */
  export type ArticleUpdateManyArgs = {
    /**
     * The data used to update Articles.
     */
    data: XOR<ArticleUpdateManyMutationInput, ArticleUncheckedUpdateManyInput>
    /**
     * Filter which Articles to update
     */
    where?: ArticleWhereInput
  }


  /**
   * Article upsert
   */
  export type ArticleUpsertArgs = {
    /**
     * Select specific fields to fetch from the Article
     */
    select?: ArticleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ArticleInclude | null
    /**
     * The filter to search for the Article to update in case it exists.
     */
    where: ArticleWhereUniqueInput
    /**
     * In case the Article found by the `where` argument doesn't exist, create a new Article with this data.
     */
    create: XOR<ArticleCreateInput, ArticleUncheckedCreateInput>
    /**
     * In case the Article was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ArticleUpdateInput, ArticleUncheckedUpdateInput>
  }


  /**
   * Article delete
   */
  export type ArticleDeleteArgs = {
    /**
     * Select specific fields to fetch from the Article
     */
    select?: ArticleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ArticleInclude | null
    /**
     * Filter which Article to delete.
     */
    where: ArticleWhereUniqueInput
  }


  /**
   * Article deleteMany
   */
  export type ArticleDeleteManyArgs = {
    /**
     * Filter which Articles to delete
     */
    where?: ArticleWhereInput
  }


  /**
   * Article without action
   */
  export type ArticleArgs = {
    /**
     * Select specific fields to fetch from the Article
     */
    select?: ArticleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ArticleInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const ArticleScalarFieldEnum: {
    id: 'id',
    title: 'title',
    content: 'content',
    userId: 'userId',
    bogus: 'bogus',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ArticleScalarFieldEnum = (typeof ArticleScalarFieldEnum)[keyof typeof ArticleScalarFieldEnum]


  export const CompScalarFieldEnum: {
    id: 'id',
    compId: 'compId',
    club: 'club',
    boat: 'boat',
    skipper: 'skipper',
    fleet: 'fleet',
    division: 'division',
    rating: 'rating',
    rank: 'rank',
    nett: 'nett',
    total: 'total',
    rest: 'rest',
    publisherId: 'publisherId',
    eventId: 'eventId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CompScalarFieldEnum = (typeof CompScalarFieldEnum)[keyof typeof CompScalarFieldEnum]


  export const EventScalarFieldEnum: {
    id: 'id',
    eventeid: 'eventeid',
    uniqueIdString: 'uniqueIdString',
    name: 'name',
    eventwebsite: 'eventwebsite',
    email: 'email',
    venueName: 'venueName',
    description: 'description',
    titleImage: 'titleImage',
    public: 'public',
    fileInfo: 'fileInfo',
    resultColumns: 'resultColumns',
    rest: 'rest',
    publisherId: 'publisherId',
    venueId: 'venueId',
    organizationId: 'organizationId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    seriesId: 'seriesId'
  };

  export type EventScalarFieldEnum = (typeof EventScalarFieldEnum)[keyof typeof EventScalarFieldEnum]


  export const FollowScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    type: 'type',
    seriesId: 'seriesId',
    eventId: 'eventId',
    organizationId: 'organizationId',
    raceId: 'raceId',
    compId: 'compId',
    updatedAt: 'updatedAt',
    createdAt: 'createdAt'
  };

  export type FollowScalarFieldEnum = (typeof FollowScalarFieldEnum)[keyof typeof FollowScalarFieldEnum]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  export const KeyScalarFieldEnum: {
    id: 'id',
    hashed_password: 'hashed_password',
    user_id: 'user_id',
    primary: 'primary'
  };

  export type KeyScalarFieldEnum = (typeof KeyScalarFieldEnum)[keyof typeof KeyScalarFieldEnum]


  export const LikeScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    type: 'type',
    seriesId: 'seriesId',
    eventId: 'eventId',
    organizationId: 'organizationId',
    raceId: 'raceId',
    compId: 'compId',
    updatedAt: 'updatedAt',
    createdAt: 'createdAt'
  };

  export type LikeScalarFieldEnum = (typeof LikeScalarFieldEnum)[keyof typeof LikeScalarFieldEnum]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const OrganizationScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    tag: 'tag',
    website: 'website',
    email: 'email',
    contact: 'contact',
    titleImage: 'titleImage',
    ownerId: 'ownerId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type OrganizationScalarFieldEnum = (typeof OrganizationScalarFieldEnum)[keyof typeof OrganizationScalarFieldEnum]


  export const RaceScalarFieldEnum: {
    id: 'id',
    raceId: 'raceId',
    uniqueRaceString: 'uniqueRaceString',
    name: 'name',
    starts: 'starts',
    rank: 'rank',
    date: 'date',
    time: 'time',
    notes: 'notes',
    sailed: 'sailed',
    resultColumns: 'resultColumns',
    rest: 'rest',
    eventId: 'eventId',
    publisherId: 'publisherId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type RaceScalarFieldEnum = (typeof RaceScalarFieldEnum)[keyof typeof RaceScalarFieldEnum]


  export const ResultScalarFieldEnum: {
    id: 'id',
    resultId: 'resultId',
    finish: 'finish',
    start: 'start',
    points: 'points',
    position: 'position',
    discard: 'discard',
    corrected: 'corrected',
    resultType: 'resultType',
    elasped: 'elasped',
    supposedRating: 'supposedRating',
    elapsedWin: 'elapsedWin',
    ratingWin: 'ratingWin',
    rrset: 'rrset',
    publisherId: 'publisherId',
    eventId: 'eventId',
    compId: 'compId',
    raceId: 'raceId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ResultScalarFieldEnum = (typeof ResultScalarFieldEnum)[keyof typeof ResultScalarFieldEnum]


  export const SeriesScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    rest: 'rest',
    organizationId: 'organizationId',
    publisherId: 'publisherId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SeriesScalarFieldEnum = (typeof SeriesScalarFieldEnum)[keyof typeof SeriesScalarFieldEnum]


  export const SessionScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    active_expires: 'active_expires',
    idle_expires: 'idle_expires'
  };

  export type SessionScalarFieldEnum = (typeof SessionScalarFieldEnum)[keyof typeof SessionScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    username: 'username',
    email: 'email',
    avatar: 'avatar'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const UserSettingsScalarFieldEnum: {
    id: 'id',
    theme: 'theme',
    language: 'language',
    userId: 'userId'
  };

  export type UserSettingsScalarFieldEnum = (typeof UserSettingsScalarFieldEnum)[keyof typeof UserSettingsScalarFieldEnum]


  export const VenueScalarFieldEnum: {
    id: 'id',
    name: 'name',
    website: 'website',
    email: 'email',
    burgee: 'burgee',
    publisherId: 'publisherId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type VenueScalarFieldEnum = (typeof VenueScalarFieldEnum)[keyof typeof VenueScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type SeriesWhereInput = {
    AND?: Enumerable<SeriesWhereInput>
    OR?: Enumerable<SeriesWhereInput>
    NOT?: Enumerable<SeriesWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    description?: StringNullableFilter | string | null
    rest?: JsonNullableFilter
    organizationId?: StringNullableFilter | string | null
    publisherId?: StringNullableFilter | string | null
    createdAt?: DateTimeNullableFilter | Date | string | null
    updatedAt?: DateTimeNullableFilter | Date | string | null
    Org?: XOR<OrganizationRelationFilter, OrganizationWhereInput> | null
    Publisher?: XOR<UserRelationFilter, UserWhereInput> | null
    Venues?: VenueListRelationFilter
    Events?: EventListRelationFilter
    follow?: FollowListRelationFilter
    like?: LikeListRelationFilter
  }

  export type SeriesOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    rest?: SortOrder
    organizationId?: SortOrder
    publisherId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    Org?: OrganizationOrderByWithRelationInput
    Publisher?: UserOrderByWithRelationInput
    Venues?: VenueOrderByRelationAggregateInput
    Events?: EventOrderByRelationAggregateInput
    follow?: followOrderByRelationAggregateInput
    like?: likeOrderByRelationAggregateInput
  }

  export type SeriesWhereUniqueInput = {
    id?: string
  }

  export type SeriesOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    rest?: SortOrder
    organizationId?: SortOrder
    publisherId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SeriesCountOrderByAggregateInput
    _max?: SeriesMaxOrderByAggregateInput
    _min?: SeriesMinOrderByAggregateInput
  }

  export type SeriesScalarWhereWithAggregatesInput = {
    AND?: Enumerable<SeriesScalarWhereWithAggregatesInput>
    OR?: Enumerable<SeriesScalarWhereWithAggregatesInput>
    NOT?: Enumerable<SeriesScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    description?: StringNullableWithAggregatesFilter | string | null
    rest?: JsonNullableWithAggregatesFilter
    organizationId?: StringNullableWithAggregatesFilter | string | null
    publisherId?: StringNullableWithAggregatesFilter | string | null
    createdAt?: DateTimeNullableWithAggregatesFilter | Date | string | null
    updatedAt?: DateTimeNullableWithAggregatesFilter | Date | string | null
  }

  export type EventWhereInput = {
    AND?: Enumerable<EventWhereInput>
    OR?: Enumerable<EventWhereInput>
    NOT?: Enumerable<EventWhereInput>
    id?: StringFilter | string
    eventeid?: StringFilter | string
    uniqueIdString?: StringFilter | string
    name?: StringFilter | string
    eventwebsite?: StringNullableFilter | string | null
    email?: StringNullableFilter | string | null
    venueName?: StringNullableFilter | string | null
    description?: StringNullableFilter | string | null
    titleImage?: StringNullableFilter | string | null
    public?: BoolFilter | boolean
    fileInfo?: JsonNullableFilter
    resultColumns?: JsonNullableFilter
    rest?: JsonNullableFilter
    publisherId?: StringNullableFilter | string | null
    venueId?: StringNullableFilter | string | null
    organizationId?: StringNullableFilter | string | null
    createdAt?: DateTimeNullableFilter | Date | string | null
    updatedAt?: DateTimeNullableFilter | Date | string | null
    seriesId?: StringNullableFilter | string | null
    Publisher?: XOR<UserRelationFilter, UserWhereInput> | null
    Venue?: XOR<VenueRelationFilter, VenueWhereInput> | null
    Organization?: XOR<OrganizationRelationFilter, OrganizationWhereInput> | null
    Races?: RaceListRelationFilter
    Results?: ResultListRelationFilter
    Comps?: CompListRelationFilter
    Series?: XOR<SeriesRelationFilter, SeriesWhereInput> | null
    follow?: FollowListRelationFilter
    like?: LikeListRelationFilter
  }

  export type EventOrderByWithRelationInput = {
    id?: SortOrder
    eventeid?: SortOrder
    uniqueIdString?: SortOrder
    name?: SortOrder
    eventwebsite?: SortOrder
    email?: SortOrder
    venueName?: SortOrder
    description?: SortOrder
    titleImage?: SortOrder
    public?: SortOrder
    fileInfo?: SortOrder
    resultColumns?: SortOrder
    rest?: SortOrder
    publisherId?: SortOrder
    venueId?: SortOrder
    organizationId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    seriesId?: SortOrder
    Publisher?: UserOrderByWithRelationInput
    Venue?: VenueOrderByWithRelationInput
    Organization?: OrganizationOrderByWithRelationInput
    Races?: RaceOrderByRelationAggregateInput
    Results?: ResultOrderByRelationAggregateInput
    Comps?: CompOrderByRelationAggregateInput
    Series?: SeriesOrderByWithRelationInput
    follow?: followOrderByRelationAggregateInput
    like?: likeOrderByRelationAggregateInput
  }

  export type EventWhereUniqueInput = {
    id?: string
    uniqueIdString?: string
  }

  export type EventOrderByWithAggregationInput = {
    id?: SortOrder
    eventeid?: SortOrder
    uniqueIdString?: SortOrder
    name?: SortOrder
    eventwebsite?: SortOrder
    email?: SortOrder
    venueName?: SortOrder
    description?: SortOrder
    titleImage?: SortOrder
    public?: SortOrder
    fileInfo?: SortOrder
    resultColumns?: SortOrder
    rest?: SortOrder
    publisherId?: SortOrder
    venueId?: SortOrder
    organizationId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    seriesId?: SortOrder
    _count?: EventCountOrderByAggregateInput
    _max?: EventMaxOrderByAggregateInput
    _min?: EventMinOrderByAggregateInput
  }

  export type EventScalarWhereWithAggregatesInput = {
    AND?: Enumerable<EventScalarWhereWithAggregatesInput>
    OR?: Enumerable<EventScalarWhereWithAggregatesInput>
    NOT?: Enumerable<EventScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    eventeid?: StringWithAggregatesFilter | string
    uniqueIdString?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    eventwebsite?: StringNullableWithAggregatesFilter | string | null
    email?: StringNullableWithAggregatesFilter | string | null
    venueName?: StringNullableWithAggregatesFilter | string | null
    description?: StringNullableWithAggregatesFilter | string | null
    titleImage?: StringNullableWithAggregatesFilter | string | null
    public?: BoolWithAggregatesFilter | boolean
    fileInfo?: JsonNullableWithAggregatesFilter
    resultColumns?: JsonNullableWithAggregatesFilter
    rest?: JsonNullableWithAggregatesFilter
    publisherId?: StringNullableWithAggregatesFilter | string | null
    venueId?: StringNullableWithAggregatesFilter | string | null
    organizationId?: StringNullableWithAggregatesFilter | string | null
    createdAt?: DateTimeNullableWithAggregatesFilter | Date | string | null
    updatedAt?: DateTimeNullableWithAggregatesFilter | Date | string | null
    seriesId?: StringNullableWithAggregatesFilter | string | null
  }

  export type RaceWhereInput = {
    AND?: Enumerable<RaceWhereInput>
    OR?: Enumerable<RaceWhereInput>
    NOT?: Enumerable<RaceWhereInput>
    id?: StringFilter | string
    raceId?: StringNullableFilter | string | null
    uniqueRaceString?: StringNullableFilter | string | null
    name?: StringNullableFilter | string | null
    starts?: JsonNullableFilter
    rank?: StringNullableFilter | string | null
    date?: StringNullableFilter | string | null
    time?: StringNullableFilter | string | null
    notes?: StringNullableFilter | string | null
    sailed?: StringNullableFilter | string | null
    resultColumns?: JsonNullableFilter
    rest?: JsonNullableFilter
    eventId?: StringNullableFilter | string | null
    publisherId?: StringNullableFilter | string | null
    createdAt?: DateTimeNullableFilter | Date | string | null
    updatedAt?: DateTimeNullableFilter | Date | string | null
    Event?: XOR<EventRelationFilter, EventWhereInput> | null
    Publisher?: XOR<UserRelationFilter, UserWhereInput> | null
    Comps?: CompListRelationFilter
    Results?: ResultListRelationFilter
    follow?: FollowListRelationFilter
    like?: LikeListRelationFilter
  }

  export type RaceOrderByWithRelationInput = {
    id?: SortOrder
    raceId?: SortOrder
    uniqueRaceString?: SortOrder
    name?: SortOrder
    starts?: SortOrder
    rank?: SortOrder
    date?: SortOrder
    time?: SortOrder
    notes?: SortOrder
    sailed?: SortOrder
    resultColumns?: SortOrder
    rest?: SortOrder
    eventId?: SortOrder
    publisherId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    Event?: EventOrderByWithRelationInput
    Publisher?: UserOrderByWithRelationInput
    Comps?: CompOrderByRelationAggregateInput
    Results?: ResultOrderByRelationAggregateInput
    follow?: followOrderByRelationAggregateInput
    like?: likeOrderByRelationAggregateInput
  }

  export type RaceWhereUniqueInput = {
    id?: string
  }

  export type RaceOrderByWithAggregationInput = {
    id?: SortOrder
    raceId?: SortOrder
    uniqueRaceString?: SortOrder
    name?: SortOrder
    starts?: SortOrder
    rank?: SortOrder
    date?: SortOrder
    time?: SortOrder
    notes?: SortOrder
    sailed?: SortOrder
    resultColumns?: SortOrder
    rest?: SortOrder
    eventId?: SortOrder
    publisherId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: RaceCountOrderByAggregateInput
    _max?: RaceMaxOrderByAggregateInput
    _min?: RaceMinOrderByAggregateInput
  }

  export type RaceScalarWhereWithAggregatesInput = {
    AND?: Enumerable<RaceScalarWhereWithAggregatesInput>
    OR?: Enumerable<RaceScalarWhereWithAggregatesInput>
    NOT?: Enumerable<RaceScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    raceId?: StringNullableWithAggregatesFilter | string | null
    uniqueRaceString?: StringNullableWithAggregatesFilter | string | null
    name?: StringNullableWithAggregatesFilter | string | null
    starts?: JsonNullableWithAggregatesFilter
    rank?: StringNullableWithAggregatesFilter | string | null
    date?: StringNullableWithAggregatesFilter | string | null
    time?: StringNullableWithAggregatesFilter | string | null
    notes?: StringNullableWithAggregatesFilter | string | null
    sailed?: StringNullableWithAggregatesFilter | string | null
    resultColumns?: JsonNullableWithAggregatesFilter
    rest?: JsonNullableWithAggregatesFilter
    eventId?: StringNullableWithAggregatesFilter | string | null
    publisherId?: StringNullableWithAggregatesFilter | string | null
    createdAt?: DateTimeNullableWithAggregatesFilter | Date | string | null
    updatedAt?: DateTimeNullableWithAggregatesFilter | Date | string | null
  }

  export type CompWhereInput = {
    AND?: Enumerable<CompWhereInput>
    OR?: Enumerable<CompWhereInput>
    NOT?: Enumerable<CompWhereInput>
    id?: StringFilter | string
    compId?: StringFilter | string
    club?: StringNullableFilter | string | null
    boat?: StringNullableFilter | string | null
    skipper?: StringNullableFilter | string | null
    fleet?: StringNullableFilter | string | null
    division?: StringNullableFilter | string | null
    rating?: StringNullableFilter | string | null
    rank?: StringNullableFilter | string | null
    nett?: StringNullableFilter | string | null
    total?: StringNullableFilter | string | null
    rest?: JsonNullableFilter
    publisherId?: StringNullableFilter | string | null
    eventId?: StringNullableFilter | string | null
    createdAt?: DateTimeNullableFilter | Date | string | null
    updatedAt?: DateTimeNullableFilter | Date | string | null
    Publisher?: XOR<UserRelationFilter, UserWhereInput> | null
    Event?: XOR<EventRelationFilter, EventWhereInput> | null
    Results?: ResultListRelationFilter
    Races?: RaceListRelationFilter
    follow?: FollowListRelationFilter
    like?: LikeListRelationFilter
  }

  export type CompOrderByWithRelationInput = {
    id?: SortOrder
    compId?: SortOrder
    club?: SortOrder
    boat?: SortOrder
    skipper?: SortOrder
    fleet?: SortOrder
    division?: SortOrder
    rating?: SortOrder
    rank?: SortOrder
    nett?: SortOrder
    total?: SortOrder
    rest?: SortOrder
    publisherId?: SortOrder
    eventId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    Publisher?: UserOrderByWithRelationInput
    Event?: EventOrderByWithRelationInput
    Results?: ResultOrderByRelationAggregateInput
    Races?: RaceOrderByRelationAggregateInput
    follow?: followOrderByRelationAggregateInput
    like?: likeOrderByRelationAggregateInput
  }

  export type CompWhereUniqueInput = {
    id?: string
    compId?: string
  }

  export type CompOrderByWithAggregationInput = {
    id?: SortOrder
    compId?: SortOrder
    club?: SortOrder
    boat?: SortOrder
    skipper?: SortOrder
    fleet?: SortOrder
    division?: SortOrder
    rating?: SortOrder
    rank?: SortOrder
    nett?: SortOrder
    total?: SortOrder
    rest?: SortOrder
    publisherId?: SortOrder
    eventId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CompCountOrderByAggregateInput
    _max?: CompMaxOrderByAggregateInput
    _min?: CompMinOrderByAggregateInput
  }

  export type CompScalarWhereWithAggregatesInput = {
    AND?: Enumerable<CompScalarWhereWithAggregatesInput>
    OR?: Enumerable<CompScalarWhereWithAggregatesInput>
    NOT?: Enumerable<CompScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    compId?: StringWithAggregatesFilter | string
    club?: StringNullableWithAggregatesFilter | string | null
    boat?: StringNullableWithAggregatesFilter | string | null
    skipper?: StringNullableWithAggregatesFilter | string | null
    fleet?: StringNullableWithAggregatesFilter | string | null
    division?: StringNullableWithAggregatesFilter | string | null
    rating?: StringNullableWithAggregatesFilter | string | null
    rank?: StringNullableWithAggregatesFilter | string | null
    nett?: StringNullableWithAggregatesFilter | string | null
    total?: StringNullableWithAggregatesFilter | string | null
    rest?: JsonNullableWithAggregatesFilter
    publisherId?: StringNullableWithAggregatesFilter | string | null
    eventId?: StringNullableWithAggregatesFilter | string | null
    createdAt?: DateTimeNullableWithAggregatesFilter | Date | string | null
    updatedAt?: DateTimeNullableWithAggregatesFilter | Date | string | null
  }

  export type ResultWhereInput = {
    AND?: Enumerable<ResultWhereInput>
    OR?: Enumerable<ResultWhereInput>
    NOT?: Enumerable<ResultWhereInput>
    id?: StringFilter | string
    resultId?: StringNullableFilter | string | null
    finish?: StringNullableFilter | string | null
    start?: StringNullableFilter | string | null
    points?: StringNullableFilter | string | null
    position?: StringNullableFilter | string | null
    discard?: StringNullableFilter | string | null
    corrected?: StringNullableFilter | string | null
    resultType?: StringNullableFilter | string | null
    elasped?: StringNullableFilter | string | null
    supposedRating?: StringNullableFilter | string | null
    elapsedWin?: StringNullableFilter | string | null
    ratingWin?: StringNullableFilter | string | null
    rrset?: StringNullableFilter | string | null
    publisherId?: StringFilter | string
    eventId?: StringNullableFilter | string | null
    compId?: StringNullableFilter | string | null
    raceId?: StringNullableFilter | string | null
    createdAt?: DateTimeNullableFilter | Date | string | null
    updatedAt?: DateTimeNullableFilter | Date | string | null
    Publisher?: XOR<UserRelationFilter, UserWhereInput>
    Event?: XOR<EventRelationFilter, EventWhereInput> | null
    Comp?: XOR<CompRelationFilter, CompWhereInput> | null
    Race?: XOR<RaceRelationFilter, RaceWhereInput> | null
  }

  export type ResultOrderByWithRelationInput = {
    id?: SortOrder
    resultId?: SortOrder
    finish?: SortOrder
    start?: SortOrder
    points?: SortOrder
    position?: SortOrder
    discard?: SortOrder
    corrected?: SortOrder
    resultType?: SortOrder
    elasped?: SortOrder
    supposedRating?: SortOrder
    elapsedWin?: SortOrder
    ratingWin?: SortOrder
    rrset?: SortOrder
    publisherId?: SortOrder
    eventId?: SortOrder
    compId?: SortOrder
    raceId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    Publisher?: UserOrderByWithRelationInput
    Event?: EventOrderByWithRelationInput
    Comp?: CompOrderByWithRelationInput
    Race?: RaceOrderByWithRelationInput
  }

  export type ResultWhereUniqueInput = {
    id?: string
  }

  export type ResultOrderByWithAggregationInput = {
    id?: SortOrder
    resultId?: SortOrder
    finish?: SortOrder
    start?: SortOrder
    points?: SortOrder
    position?: SortOrder
    discard?: SortOrder
    corrected?: SortOrder
    resultType?: SortOrder
    elasped?: SortOrder
    supposedRating?: SortOrder
    elapsedWin?: SortOrder
    ratingWin?: SortOrder
    rrset?: SortOrder
    publisherId?: SortOrder
    eventId?: SortOrder
    compId?: SortOrder
    raceId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ResultCountOrderByAggregateInput
    _max?: ResultMaxOrderByAggregateInput
    _min?: ResultMinOrderByAggregateInput
  }

  export type ResultScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ResultScalarWhereWithAggregatesInput>
    OR?: Enumerable<ResultScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ResultScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    resultId?: StringNullableWithAggregatesFilter | string | null
    finish?: StringNullableWithAggregatesFilter | string | null
    start?: StringNullableWithAggregatesFilter | string | null
    points?: StringNullableWithAggregatesFilter | string | null
    position?: StringNullableWithAggregatesFilter | string | null
    discard?: StringNullableWithAggregatesFilter | string | null
    corrected?: StringNullableWithAggregatesFilter | string | null
    resultType?: StringNullableWithAggregatesFilter | string | null
    elasped?: StringNullableWithAggregatesFilter | string | null
    supposedRating?: StringNullableWithAggregatesFilter | string | null
    elapsedWin?: StringNullableWithAggregatesFilter | string | null
    ratingWin?: StringNullableWithAggregatesFilter | string | null
    rrset?: StringNullableWithAggregatesFilter | string | null
    publisherId?: StringWithAggregatesFilter | string
    eventId?: StringNullableWithAggregatesFilter | string | null
    compId?: StringNullableWithAggregatesFilter | string | null
    raceId?: StringNullableWithAggregatesFilter | string | null
    createdAt?: DateTimeNullableWithAggregatesFilter | Date | string | null
    updatedAt?: DateTimeNullableWithAggregatesFilter | Date | string | null
  }

  export type OrganizationWhereInput = {
    AND?: Enumerable<OrganizationWhereInput>
    OR?: Enumerable<OrganizationWhereInput>
    NOT?: Enumerable<OrganizationWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    description?: StringNullableFilter | string | null
    tag?: StringNullableFilter | string | null
    website?: StringNullableFilter | string | null
    email?: StringNullableFilter | string | null
    contact?: JsonNullableFilter
    titleImage?: StringNullableFilter | string | null
    ownerId?: StringNullableFilter | string | null
    createdAt?: DateTimeNullableFilter | Date | string | null
    updatedAt?: DateTimeNullableFilter | Date | string | null
    Owner?: XOR<UserRelationFilter, UserWhereInput> | null
    Series?: SeriesListRelationFilter
    Events?: EventListRelationFilter
    follow?: FollowListRelationFilter
    like?: LikeListRelationFilter
  }

  export type OrganizationOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    tag?: SortOrder
    website?: SortOrder
    email?: SortOrder
    contact?: SortOrder
    titleImage?: SortOrder
    ownerId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    Owner?: UserOrderByWithRelationInput
    Series?: SeriesOrderByRelationAggregateInput
    Events?: EventOrderByRelationAggregateInput
    follow?: followOrderByRelationAggregateInput
    like?: likeOrderByRelationAggregateInput
  }

  export type OrganizationWhereUniqueInput = {
    id?: string
    name?: string
  }

  export type OrganizationOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    tag?: SortOrder
    website?: SortOrder
    email?: SortOrder
    contact?: SortOrder
    titleImage?: SortOrder
    ownerId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: OrganizationCountOrderByAggregateInput
    _max?: OrganizationMaxOrderByAggregateInput
    _min?: OrganizationMinOrderByAggregateInput
  }

  export type OrganizationScalarWhereWithAggregatesInput = {
    AND?: Enumerable<OrganizationScalarWhereWithAggregatesInput>
    OR?: Enumerable<OrganizationScalarWhereWithAggregatesInput>
    NOT?: Enumerable<OrganizationScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    description?: StringNullableWithAggregatesFilter | string | null
    tag?: StringNullableWithAggregatesFilter | string | null
    website?: StringNullableWithAggregatesFilter | string | null
    email?: StringNullableWithAggregatesFilter | string | null
    contact?: JsonNullableWithAggregatesFilter
    titleImage?: StringNullableWithAggregatesFilter | string | null
    ownerId?: StringNullableWithAggregatesFilter | string | null
    createdAt?: DateTimeNullableWithAggregatesFilter | Date | string | null
    updatedAt?: DateTimeNullableWithAggregatesFilter | Date | string | null
  }

  export type followWhereInput = {
    AND?: Enumerable<followWhereInput>
    OR?: Enumerable<followWhereInput>
    NOT?: Enumerable<followWhereInput>
    id?: StringFilter | string
    userId?: StringFilter | string
    type?: StringFilter | string
    seriesId?: StringNullableFilter | string | null
    eventId?: StringNullableFilter | string | null
    organizationId?: StringNullableFilter | string | null
    raceId?: StringNullableFilter | string | null
    compId?: StringNullableFilter | string | null
    updatedAt?: DateTimeFilter | Date | string
    createdAt?: DateTimeFilter | Date | string
    User?: XOR<UserRelationFilter, UserWhereInput>
    Series?: XOR<SeriesRelationFilter, SeriesWhereInput> | null
    Event?: XOR<EventRelationFilter, EventWhereInput> | null
    Organization?: XOR<OrganizationRelationFilter, OrganizationWhereInput> | null
    Race?: XOR<RaceRelationFilter, RaceWhereInput> | null
    Comp?: XOR<CompRelationFilter, CompWhereInput> | null
  }

  export type followOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    seriesId?: SortOrder
    eventId?: SortOrder
    organizationId?: SortOrder
    raceId?: SortOrder
    compId?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
    User?: UserOrderByWithRelationInput
    Series?: SeriesOrderByWithRelationInput
    Event?: EventOrderByWithRelationInput
    Organization?: OrganizationOrderByWithRelationInput
    Race?: RaceOrderByWithRelationInput
    Comp?: CompOrderByWithRelationInput
  }

  export type followWhereUniqueInput = {
    id?: string
  }

  export type followOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    seriesId?: SortOrder
    eventId?: SortOrder
    organizationId?: SortOrder
    raceId?: SortOrder
    compId?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
    _count?: followCountOrderByAggregateInput
    _max?: followMaxOrderByAggregateInput
    _min?: followMinOrderByAggregateInput
  }

  export type followScalarWhereWithAggregatesInput = {
    AND?: Enumerable<followScalarWhereWithAggregatesInput>
    OR?: Enumerable<followScalarWhereWithAggregatesInput>
    NOT?: Enumerable<followScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    userId?: StringWithAggregatesFilter | string
    type?: StringWithAggregatesFilter | string
    seriesId?: StringNullableWithAggregatesFilter | string | null
    eventId?: StringNullableWithAggregatesFilter | string | null
    organizationId?: StringNullableWithAggregatesFilter | string | null
    raceId?: StringNullableWithAggregatesFilter | string | null
    compId?: StringNullableWithAggregatesFilter | string | null
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type likeWhereInput = {
    AND?: Enumerable<likeWhereInput>
    OR?: Enumerable<likeWhereInput>
    NOT?: Enumerable<likeWhereInput>
    id?: StringFilter | string
    userId?: StringFilter | string
    type?: StringFilter | string
    seriesId?: StringNullableFilter | string | null
    eventId?: StringNullableFilter | string | null
    organizationId?: StringNullableFilter | string | null
    raceId?: StringNullableFilter | string | null
    compId?: StringNullableFilter | string | null
    updatedAt?: DateTimeFilter | Date | string
    createdAt?: DateTimeFilter | Date | string
    User?: XOR<UserRelationFilter, UserWhereInput>
    Series?: XOR<SeriesRelationFilter, SeriesWhereInput> | null
    Event?: XOR<EventRelationFilter, EventWhereInput> | null
    Organization?: XOR<OrganizationRelationFilter, OrganizationWhereInput> | null
    Race?: XOR<RaceRelationFilter, RaceWhereInput> | null
    Comp?: XOR<CompRelationFilter, CompWhereInput> | null
  }

  export type likeOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    seriesId?: SortOrder
    eventId?: SortOrder
    organizationId?: SortOrder
    raceId?: SortOrder
    compId?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
    User?: UserOrderByWithRelationInput
    Series?: SeriesOrderByWithRelationInput
    Event?: EventOrderByWithRelationInput
    Organization?: OrganizationOrderByWithRelationInput
    Race?: RaceOrderByWithRelationInput
    Comp?: CompOrderByWithRelationInput
  }

  export type likeWhereUniqueInput = {
    id?: string
  }

  export type likeOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    seriesId?: SortOrder
    eventId?: SortOrder
    organizationId?: SortOrder
    raceId?: SortOrder
    compId?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
    _count?: likeCountOrderByAggregateInput
    _max?: likeMaxOrderByAggregateInput
    _min?: likeMinOrderByAggregateInput
  }

  export type likeScalarWhereWithAggregatesInput = {
    AND?: Enumerable<likeScalarWhereWithAggregatesInput>
    OR?: Enumerable<likeScalarWhereWithAggregatesInput>
    NOT?: Enumerable<likeScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    userId?: StringWithAggregatesFilter | string
    type?: StringWithAggregatesFilter | string
    seriesId?: StringNullableWithAggregatesFilter | string | null
    eventId?: StringNullableWithAggregatesFilter | string | null
    organizationId?: StringNullableWithAggregatesFilter | string | null
    raceId?: StringNullableWithAggregatesFilter | string | null
    compId?: StringNullableWithAggregatesFilter | string | null
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type VenueWhereInput = {
    AND?: Enumerable<VenueWhereInput>
    OR?: Enumerable<VenueWhereInput>
    NOT?: Enumerable<VenueWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    website?: StringNullableFilter | string | null
    email?: StringNullableFilter | string | null
    burgee?: StringNullableFilter | string | null
    publisherId?: StringNullableFilter | string | null
    createdAt?: DateTimeNullableFilter | Date | string | null
    updatedAt?: DateTimeNullableFilter | Date | string | null
    Publisher?: XOR<UserRelationFilter, UserWhereInput> | null
    Series?: SeriesListRelationFilter
    Event?: EventListRelationFilter
  }

  export type VenueOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    website?: SortOrder
    email?: SortOrder
    burgee?: SortOrder
    publisherId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    Publisher?: UserOrderByWithRelationInput
    Series?: SeriesOrderByRelationAggregateInput
    Event?: EventOrderByRelationAggregateInput
  }

  export type VenueWhereUniqueInput = {
    id?: string
    name?: string
  }

  export type VenueOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    website?: SortOrder
    email?: SortOrder
    burgee?: SortOrder
    publisherId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: VenueCountOrderByAggregateInput
    _max?: VenueMaxOrderByAggregateInput
    _min?: VenueMinOrderByAggregateInput
  }

  export type VenueScalarWhereWithAggregatesInput = {
    AND?: Enumerable<VenueScalarWhereWithAggregatesInput>
    OR?: Enumerable<VenueScalarWhereWithAggregatesInput>
    NOT?: Enumerable<VenueScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    website?: StringNullableWithAggregatesFilter | string | null
    email?: StringNullableWithAggregatesFilter | string | null
    burgee?: StringNullableWithAggregatesFilter | string | null
    publisherId?: StringNullableWithAggregatesFilter | string | null
    createdAt?: DateTimeNullableWithAggregatesFilter | Date | string | null
    updatedAt?: DateTimeNullableWithAggregatesFilter | Date | string | null
  }

  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    username?: StringFilter | string
    email?: StringNullableFilter | string | null
    avatar?: StringNullableFilter | string | null
    session?: SessionListRelationFilter
    Key?: KeyListRelationFilter
    Article?: ArticleListRelationFilter
    Series?: SeriesListRelationFilter
    Event?: EventListRelationFilter
    Organization?: OrganizationListRelationFilter
    Comp?: CompListRelationFilter
    Venue?: VenueListRelationFilter
    UserSettings?: XOR<UserSettingsRelationFilter, UserSettingsWhereInput> | null
    Race?: RaceListRelationFilter
    Result?: ResultListRelationFilter
    follow?: FollowListRelationFilter
    like?: LikeListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    username?: SortOrder
    email?: SortOrder
    avatar?: SortOrder
    session?: SessionOrderByRelationAggregateInput
    Key?: KeyOrderByRelationAggregateInput
    Article?: ArticleOrderByRelationAggregateInput
    Series?: SeriesOrderByRelationAggregateInput
    Event?: EventOrderByRelationAggregateInput
    Organization?: OrganizationOrderByRelationAggregateInput
    Comp?: CompOrderByRelationAggregateInput
    Venue?: VenueOrderByRelationAggregateInput
    UserSettings?: UserSettingsOrderByWithRelationInput
    Race?: RaceOrderByRelationAggregateInput
    Result?: ResultOrderByRelationAggregateInput
    follow?: followOrderByRelationAggregateInput
    like?: likeOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = {
    id?: string
    username?: string
    email?: string
  }

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    username?: SortOrder
    email?: SortOrder
    avatar?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    username?: StringWithAggregatesFilter | string
    email?: StringNullableWithAggregatesFilter | string | null
    avatar?: StringNullableWithAggregatesFilter | string | null
  }

  export type UserSettingsWhereInput = {
    AND?: Enumerable<UserSettingsWhereInput>
    OR?: Enumerable<UserSettingsWhereInput>
    NOT?: Enumerable<UserSettingsWhereInput>
    id?: StringFilter | string
    theme?: StringNullableFilter | string | null
    language?: EnumLangNullableFilter | Lang | null
    userId?: StringNullableFilter | string | null
    user?: XOR<UserRelationFilter, UserWhereInput> | null
  }

  export type UserSettingsOrderByWithRelationInput = {
    id?: SortOrder
    theme?: SortOrder
    language?: SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type UserSettingsWhereUniqueInput = {
    id?: string
    userId?: string
  }

  export type UserSettingsOrderByWithAggregationInput = {
    id?: SortOrder
    theme?: SortOrder
    language?: SortOrder
    userId?: SortOrder
    _count?: UserSettingsCountOrderByAggregateInput
    _max?: UserSettingsMaxOrderByAggregateInput
    _min?: UserSettingsMinOrderByAggregateInput
  }

  export type UserSettingsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserSettingsScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserSettingsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserSettingsScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    theme?: StringNullableWithAggregatesFilter | string | null
    language?: EnumLangNullableWithAggregatesFilter | Lang | null
    userId?: StringNullableWithAggregatesFilter | string | null
  }

  export type SessionWhereInput = {
    AND?: Enumerable<SessionWhereInput>
    OR?: Enumerable<SessionWhereInput>
    NOT?: Enumerable<SessionWhereInput>
    id?: StringFilter | string
    user_id?: StringFilter | string
    active_expires?: BigIntFilter | bigint | number
    idle_expires?: BigIntFilter | bigint | number
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type SessionOrderByWithRelationInput = {
    id?: SortOrder
    user_id?: SortOrder
    active_expires?: SortOrder
    idle_expires?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type SessionWhereUniqueInput = {
    id?: string
  }

  export type SessionOrderByWithAggregationInput = {
    id?: SortOrder
    user_id?: SortOrder
    active_expires?: SortOrder
    idle_expires?: SortOrder
    _count?: SessionCountOrderByAggregateInput
    _avg?: SessionAvgOrderByAggregateInput
    _max?: SessionMaxOrderByAggregateInput
    _min?: SessionMinOrderByAggregateInput
    _sum?: SessionSumOrderByAggregateInput
  }

  export type SessionScalarWhereWithAggregatesInput = {
    AND?: Enumerable<SessionScalarWhereWithAggregatesInput>
    OR?: Enumerable<SessionScalarWhereWithAggregatesInput>
    NOT?: Enumerable<SessionScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    user_id?: StringWithAggregatesFilter | string
    active_expires?: BigIntWithAggregatesFilter | bigint | number
    idle_expires?: BigIntWithAggregatesFilter | bigint | number
  }

  export type KeyWhereInput = {
    AND?: Enumerable<KeyWhereInput>
    OR?: Enumerable<KeyWhereInput>
    NOT?: Enumerable<KeyWhereInput>
    id?: StringFilter | string
    hashed_password?: StringNullableFilter | string | null
    user_id?: StringFilter | string
    primary?: BoolFilter | boolean
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type KeyOrderByWithRelationInput = {
    id?: SortOrder
    hashed_password?: SortOrder
    user_id?: SortOrder
    primary?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type KeyWhereUniqueInput = {
    id?: string
  }

  export type KeyOrderByWithAggregationInput = {
    id?: SortOrder
    hashed_password?: SortOrder
    user_id?: SortOrder
    primary?: SortOrder
    _count?: KeyCountOrderByAggregateInput
    _max?: KeyMaxOrderByAggregateInput
    _min?: KeyMinOrderByAggregateInput
  }

  export type KeyScalarWhereWithAggregatesInput = {
    AND?: Enumerable<KeyScalarWhereWithAggregatesInput>
    OR?: Enumerable<KeyScalarWhereWithAggregatesInput>
    NOT?: Enumerable<KeyScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    hashed_password?: StringNullableWithAggregatesFilter | string | null
    user_id?: StringWithAggregatesFilter | string
    primary?: BoolWithAggregatesFilter | boolean
  }

  export type ArticleWhereInput = {
    AND?: Enumerable<ArticleWhereInput>
    OR?: Enumerable<ArticleWhereInput>
    NOT?: Enumerable<ArticleWhereInput>
    id?: StringFilter | string
    title?: StringFilter | string
    content?: StringNullableFilter | string | null
    userId?: StringNullableFilter | string | null
    bogus?: StringNullableFilter | string | null
    createdAt?: DateTimeNullableFilter | Date | string | null
    updatedAt?: DateTimeNullableFilter | Date | string | null
    user?: XOR<UserRelationFilter, UserWhereInput> | null
  }

  export type ArticleOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    userId?: SortOrder
    bogus?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type ArticleWhereUniqueInput = {
    id?: string
  }

  export type ArticleOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    userId?: SortOrder
    bogus?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ArticleCountOrderByAggregateInput
    _max?: ArticleMaxOrderByAggregateInput
    _min?: ArticleMinOrderByAggregateInput
  }

  export type ArticleScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ArticleScalarWhereWithAggregatesInput>
    OR?: Enumerable<ArticleScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ArticleScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    title?: StringWithAggregatesFilter | string
    content?: StringNullableWithAggregatesFilter | string | null
    userId?: StringNullableWithAggregatesFilter | string | null
    bogus?: StringNullableWithAggregatesFilter | string | null
    createdAt?: DateTimeNullableWithAggregatesFilter | Date | string | null
    updatedAt?: DateTimeNullableWithAggregatesFilter | Date | string | null
  }

  export type SeriesCreateInput = {
    id?: string
    name: string
    description?: string | null
    rest?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    Org?: OrganizationCreateNestedOneWithoutSeriesInput
    Publisher?: UserCreateNestedOneWithoutSeriesInput
    Venues?: VenueCreateNestedManyWithoutSeriesInput
    Events?: EventCreateNestedManyWithoutSeriesInput
    follow?: followCreateNestedManyWithoutSeriesInput
    like?: likeCreateNestedManyWithoutSeriesInput
  }

  export type SeriesUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    rest?: NullableJsonNullValueInput | InputJsonValue
    organizationId?: string | null
    publisherId?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    Venues?: VenueUncheckedCreateNestedManyWithoutSeriesInput
    Events?: EventUncheckedCreateNestedManyWithoutSeriesInput
    follow?: followUncheckedCreateNestedManyWithoutSeriesInput
    like?: likeUncheckedCreateNestedManyWithoutSeriesInput
  }

  export type SeriesUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    rest?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Org?: OrganizationUpdateOneWithoutSeriesNestedInput
    Publisher?: UserUpdateOneWithoutSeriesNestedInput
    Venues?: VenueUpdateManyWithoutSeriesNestedInput
    Events?: EventUpdateManyWithoutSeriesNestedInput
    follow?: followUpdateManyWithoutSeriesNestedInput
    like?: likeUpdateManyWithoutSeriesNestedInput
  }

  export type SeriesUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    rest?: NullableJsonNullValueInput | InputJsonValue
    organizationId?: NullableStringFieldUpdateOperationsInput | string | null
    publisherId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Venues?: VenueUncheckedUpdateManyWithoutSeriesNestedInput
    Events?: EventUncheckedUpdateManyWithoutSeriesNestedInput
    follow?: followUncheckedUpdateManyWithoutSeriesNestedInput
    like?: likeUncheckedUpdateManyWithoutSeriesNestedInput
  }

  export type SeriesCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    rest?: NullableJsonNullValueInput | InputJsonValue
    organizationId?: string | null
    publisherId?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
  }

  export type SeriesUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    rest?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SeriesUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    rest?: NullableJsonNullValueInput | InputJsonValue
    organizationId?: NullableStringFieldUpdateOperationsInput | string | null
    publisherId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type EventCreateInput = {
    id?: string
    eventeid: string
    uniqueIdString: string
    name: string
    eventwebsite?: string | null
    email?: string | null
    venueName?: string | null
    description?: string | null
    titleImage?: string | null
    public?: boolean
    fileInfo?: NullableJsonNullValueInput | InputJsonValue
    resultColumns?: NullableJsonNullValueInput | InputJsonValue
    rest?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    Publisher?: UserCreateNestedOneWithoutEventInput
    Venue?: VenueCreateNestedOneWithoutEventInput
    Organization?: OrganizationCreateNestedOneWithoutEventsInput
    Races?: RaceCreateNestedManyWithoutEventInput
    Results?: ResultCreateNestedManyWithoutEventInput
    Comps?: CompCreateNestedManyWithoutEventInput
    Series?: SeriesCreateNestedOneWithoutEventsInput
    follow?: followCreateNestedManyWithoutEventInput
    like?: likeCreateNestedManyWithoutEventInput
  }

  export type EventUncheckedCreateInput = {
    id?: string
    eventeid: string
    uniqueIdString: string
    name: string
    eventwebsite?: string | null
    email?: string | null
    venueName?: string | null
    description?: string | null
    titleImage?: string | null
    public?: boolean
    fileInfo?: NullableJsonNullValueInput | InputJsonValue
    resultColumns?: NullableJsonNullValueInput | InputJsonValue
    rest?: NullableJsonNullValueInput | InputJsonValue
    publisherId?: string | null
    venueId?: string | null
    organizationId?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    seriesId?: string | null
    Races?: RaceUncheckedCreateNestedManyWithoutEventInput
    Results?: ResultUncheckedCreateNestedManyWithoutEventInput
    Comps?: CompUncheckedCreateNestedManyWithoutEventInput
    follow?: followUncheckedCreateNestedManyWithoutEventInput
    like?: likeUncheckedCreateNestedManyWithoutEventInput
  }

  export type EventUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventeid?: StringFieldUpdateOperationsInput | string
    uniqueIdString?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    eventwebsite?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    venueName?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    titleImage?: NullableStringFieldUpdateOperationsInput | string | null
    public?: BoolFieldUpdateOperationsInput | boolean
    fileInfo?: NullableJsonNullValueInput | InputJsonValue
    resultColumns?: NullableJsonNullValueInput | InputJsonValue
    rest?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Publisher?: UserUpdateOneWithoutEventNestedInput
    Venue?: VenueUpdateOneWithoutEventNestedInput
    Organization?: OrganizationUpdateOneWithoutEventsNestedInput
    Races?: RaceUpdateManyWithoutEventNestedInput
    Results?: ResultUpdateManyWithoutEventNestedInput
    Comps?: CompUpdateManyWithoutEventNestedInput
    Series?: SeriesUpdateOneWithoutEventsNestedInput
    follow?: followUpdateManyWithoutEventNestedInput
    like?: likeUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventeid?: StringFieldUpdateOperationsInput | string
    uniqueIdString?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    eventwebsite?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    venueName?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    titleImage?: NullableStringFieldUpdateOperationsInput | string | null
    public?: BoolFieldUpdateOperationsInput | boolean
    fileInfo?: NullableJsonNullValueInput | InputJsonValue
    resultColumns?: NullableJsonNullValueInput | InputJsonValue
    rest?: NullableJsonNullValueInput | InputJsonValue
    publisherId?: NullableStringFieldUpdateOperationsInput | string | null
    venueId?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    seriesId?: NullableStringFieldUpdateOperationsInput | string | null
    Races?: RaceUncheckedUpdateManyWithoutEventNestedInput
    Results?: ResultUncheckedUpdateManyWithoutEventNestedInput
    Comps?: CompUncheckedUpdateManyWithoutEventNestedInput
    follow?: followUncheckedUpdateManyWithoutEventNestedInput
    like?: likeUncheckedUpdateManyWithoutEventNestedInput
  }

  export type EventCreateManyInput = {
    id?: string
    eventeid: string
    uniqueIdString: string
    name: string
    eventwebsite?: string | null
    email?: string | null
    venueName?: string | null
    description?: string | null
    titleImage?: string | null
    public?: boolean
    fileInfo?: NullableJsonNullValueInput | InputJsonValue
    resultColumns?: NullableJsonNullValueInput | InputJsonValue
    rest?: NullableJsonNullValueInput | InputJsonValue
    publisherId?: string | null
    venueId?: string | null
    organizationId?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    seriesId?: string | null
  }

  export type EventUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventeid?: StringFieldUpdateOperationsInput | string
    uniqueIdString?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    eventwebsite?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    venueName?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    titleImage?: NullableStringFieldUpdateOperationsInput | string | null
    public?: BoolFieldUpdateOperationsInput | boolean
    fileInfo?: NullableJsonNullValueInput | InputJsonValue
    resultColumns?: NullableJsonNullValueInput | InputJsonValue
    rest?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type EventUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventeid?: StringFieldUpdateOperationsInput | string
    uniqueIdString?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    eventwebsite?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    venueName?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    titleImage?: NullableStringFieldUpdateOperationsInput | string | null
    public?: BoolFieldUpdateOperationsInput | boolean
    fileInfo?: NullableJsonNullValueInput | InputJsonValue
    resultColumns?: NullableJsonNullValueInput | InputJsonValue
    rest?: NullableJsonNullValueInput | InputJsonValue
    publisherId?: NullableStringFieldUpdateOperationsInput | string | null
    venueId?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    seriesId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RaceCreateInput = {
    id?: string
    raceId?: string | null
    uniqueRaceString?: string | null
    name?: string | null
    starts?: NullableJsonNullValueInput | InputJsonValue
    rank?: string | null
    date?: string | null
    time?: string | null
    notes?: string | null
    sailed?: string | null
    resultColumns?: NullableJsonNullValueInput | InputJsonValue
    rest?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    Event?: EventCreateNestedOneWithoutRacesInput
    Publisher?: UserCreateNestedOneWithoutRaceInput
    Comps?: CompCreateNestedManyWithoutRacesInput
    Results?: ResultCreateNestedManyWithoutRaceInput
    follow?: followCreateNestedManyWithoutRaceInput
    like?: likeCreateNestedManyWithoutRaceInput
  }

  export type RaceUncheckedCreateInput = {
    id?: string
    raceId?: string | null
    uniqueRaceString?: string | null
    name?: string | null
    starts?: NullableJsonNullValueInput | InputJsonValue
    rank?: string | null
    date?: string | null
    time?: string | null
    notes?: string | null
    sailed?: string | null
    resultColumns?: NullableJsonNullValueInput | InputJsonValue
    rest?: NullableJsonNullValueInput | InputJsonValue
    eventId?: string | null
    publisherId?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    Comps?: CompUncheckedCreateNestedManyWithoutRacesInput
    Results?: ResultUncheckedCreateNestedManyWithoutRaceInput
    follow?: followUncheckedCreateNestedManyWithoutRaceInput
    like?: likeUncheckedCreateNestedManyWithoutRaceInput
  }

  export type RaceUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    raceId?: NullableStringFieldUpdateOperationsInput | string | null
    uniqueRaceString?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    starts?: NullableJsonNullValueInput | InputJsonValue
    rank?: NullableStringFieldUpdateOperationsInput | string | null
    date?: NullableStringFieldUpdateOperationsInput | string | null
    time?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    sailed?: NullableStringFieldUpdateOperationsInput | string | null
    resultColumns?: NullableJsonNullValueInput | InputJsonValue
    rest?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Event?: EventUpdateOneWithoutRacesNestedInput
    Publisher?: UserUpdateOneWithoutRaceNestedInput
    Comps?: CompUpdateManyWithoutRacesNestedInput
    Results?: ResultUpdateManyWithoutRaceNestedInput
    follow?: followUpdateManyWithoutRaceNestedInput
    like?: likeUpdateManyWithoutRaceNestedInput
  }

  export type RaceUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    raceId?: NullableStringFieldUpdateOperationsInput | string | null
    uniqueRaceString?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    starts?: NullableJsonNullValueInput | InputJsonValue
    rank?: NullableStringFieldUpdateOperationsInput | string | null
    date?: NullableStringFieldUpdateOperationsInput | string | null
    time?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    sailed?: NullableStringFieldUpdateOperationsInput | string | null
    resultColumns?: NullableJsonNullValueInput | InputJsonValue
    rest?: NullableJsonNullValueInput | InputJsonValue
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
    publisherId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Comps?: CompUncheckedUpdateManyWithoutRacesNestedInput
    Results?: ResultUncheckedUpdateManyWithoutRaceNestedInput
    follow?: followUncheckedUpdateManyWithoutRaceNestedInput
    like?: likeUncheckedUpdateManyWithoutRaceNestedInput
  }

  export type RaceCreateManyInput = {
    id?: string
    raceId?: string | null
    uniqueRaceString?: string | null
    name?: string | null
    starts?: NullableJsonNullValueInput | InputJsonValue
    rank?: string | null
    date?: string | null
    time?: string | null
    notes?: string | null
    sailed?: string | null
    resultColumns?: NullableJsonNullValueInput | InputJsonValue
    rest?: NullableJsonNullValueInput | InputJsonValue
    eventId?: string | null
    publisherId?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
  }

  export type RaceUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    raceId?: NullableStringFieldUpdateOperationsInput | string | null
    uniqueRaceString?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    starts?: NullableJsonNullValueInput | InputJsonValue
    rank?: NullableStringFieldUpdateOperationsInput | string | null
    date?: NullableStringFieldUpdateOperationsInput | string | null
    time?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    sailed?: NullableStringFieldUpdateOperationsInput | string | null
    resultColumns?: NullableJsonNullValueInput | InputJsonValue
    rest?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type RaceUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    raceId?: NullableStringFieldUpdateOperationsInput | string | null
    uniqueRaceString?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    starts?: NullableJsonNullValueInput | InputJsonValue
    rank?: NullableStringFieldUpdateOperationsInput | string | null
    date?: NullableStringFieldUpdateOperationsInput | string | null
    time?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    sailed?: NullableStringFieldUpdateOperationsInput | string | null
    resultColumns?: NullableJsonNullValueInput | InputJsonValue
    rest?: NullableJsonNullValueInput | InputJsonValue
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
    publisherId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CompCreateInput = {
    id?: string
    compId: string
    club?: string | null
    boat?: string | null
    skipper?: string | null
    fleet?: string | null
    division?: string | null
    rating?: string | null
    rank?: string | null
    nett?: string | null
    total?: string | null
    rest?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    Publisher?: UserCreateNestedOneWithoutCompInput
    Event?: EventCreateNestedOneWithoutCompsInput
    Results?: ResultCreateNestedManyWithoutCompInput
    Races?: RaceCreateNestedManyWithoutCompsInput
    follow?: followCreateNestedManyWithoutCompInput
    like?: likeCreateNestedManyWithoutCompInput
  }

  export type CompUncheckedCreateInput = {
    id?: string
    compId: string
    club?: string | null
    boat?: string | null
    skipper?: string | null
    fleet?: string | null
    division?: string | null
    rating?: string | null
    rank?: string | null
    nett?: string | null
    total?: string | null
    rest?: NullableJsonNullValueInput | InputJsonValue
    publisherId?: string | null
    eventId?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    Results?: ResultUncheckedCreateNestedManyWithoutCompInput
    Races?: RaceUncheckedCreateNestedManyWithoutCompsInput
    follow?: followUncheckedCreateNestedManyWithoutCompInput
    like?: likeUncheckedCreateNestedManyWithoutCompInput
  }

  export type CompUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    compId?: StringFieldUpdateOperationsInput | string
    club?: NullableStringFieldUpdateOperationsInput | string | null
    boat?: NullableStringFieldUpdateOperationsInput | string | null
    skipper?: NullableStringFieldUpdateOperationsInput | string | null
    fleet?: NullableStringFieldUpdateOperationsInput | string | null
    division?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableStringFieldUpdateOperationsInput | string | null
    rank?: NullableStringFieldUpdateOperationsInput | string | null
    nett?: NullableStringFieldUpdateOperationsInput | string | null
    total?: NullableStringFieldUpdateOperationsInput | string | null
    rest?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Publisher?: UserUpdateOneWithoutCompNestedInput
    Event?: EventUpdateOneWithoutCompsNestedInput
    Results?: ResultUpdateManyWithoutCompNestedInput
    Races?: RaceUpdateManyWithoutCompsNestedInput
    follow?: followUpdateManyWithoutCompNestedInput
    like?: likeUpdateManyWithoutCompNestedInput
  }

  export type CompUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    compId?: StringFieldUpdateOperationsInput | string
    club?: NullableStringFieldUpdateOperationsInput | string | null
    boat?: NullableStringFieldUpdateOperationsInput | string | null
    skipper?: NullableStringFieldUpdateOperationsInput | string | null
    fleet?: NullableStringFieldUpdateOperationsInput | string | null
    division?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableStringFieldUpdateOperationsInput | string | null
    rank?: NullableStringFieldUpdateOperationsInput | string | null
    nett?: NullableStringFieldUpdateOperationsInput | string | null
    total?: NullableStringFieldUpdateOperationsInput | string | null
    rest?: NullableJsonNullValueInput | InputJsonValue
    publisherId?: NullableStringFieldUpdateOperationsInput | string | null
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Results?: ResultUncheckedUpdateManyWithoutCompNestedInput
    Races?: RaceUncheckedUpdateManyWithoutCompsNestedInput
    follow?: followUncheckedUpdateManyWithoutCompNestedInput
    like?: likeUncheckedUpdateManyWithoutCompNestedInput
  }

  export type CompCreateManyInput = {
    id?: string
    compId: string
    club?: string | null
    boat?: string | null
    skipper?: string | null
    fleet?: string | null
    division?: string | null
    rating?: string | null
    rank?: string | null
    nett?: string | null
    total?: string | null
    rest?: NullableJsonNullValueInput | InputJsonValue
    publisherId?: string | null
    eventId?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
  }

  export type CompUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    compId?: StringFieldUpdateOperationsInput | string
    club?: NullableStringFieldUpdateOperationsInput | string | null
    boat?: NullableStringFieldUpdateOperationsInput | string | null
    skipper?: NullableStringFieldUpdateOperationsInput | string | null
    fleet?: NullableStringFieldUpdateOperationsInput | string | null
    division?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableStringFieldUpdateOperationsInput | string | null
    rank?: NullableStringFieldUpdateOperationsInput | string | null
    nett?: NullableStringFieldUpdateOperationsInput | string | null
    total?: NullableStringFieldUpdateOperationsInput | string | null
    rest?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CompUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    compId?: StringFieldUpdateOperationsInput | string
    club?: NullableStringFieldUpdateOperationsInput | string | null
    boat?: NullableStringFieldUpdateOperationsInput | string | null
    skipper?: NullableStringFieldUpdateOperationsInput | string | null
    fleet?: NullableStringFieldUpdateOperationsInput | string | null
    division?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableStringFieldUpdateOperationsInput | string | null
    rank?: NullableStringFieldUpdateOperationsInput | string | null
    nett?: NullableStringFieldUpdateOperationsInput | string | null
    total?: NullableStringFieldUpdateOperationsInput | string | null
    rest?: NullableJsonNullValueInput | InputJsonValue
    publisherId?: NullableStringFieldUpdateOperationsInput | string | null
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ResultCreateInput = {
    id?: string
    resultId?: string | null
    finish?: string | null
    start?: string | null
    points?: string | null
    position?: string | null
    discard?: string | null
    corrected?: string | null
    resultType?: string | null
    elasped?: string | null
    supposedRating?: string | null
    elapsedWin?: string | null
    ratingWin?: string | null
    rrset?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    Publisher: UserCreateNestedOneWithoutResultInput
    Event?: EventCreateNestedOneWithoutResultsInput
    Comp?: CompCreateNestedOneWithoutResultsInput
    Race?: RaceCreateNestedOneWithoutResultsInput
  }

  export type ResultUncheckedCreateInput = {
    id?: string
    resultId?: string | null
    finish?: string | null
    start?: string | null
    points?: string | null
    position?: string | null
    discard?: string | null
    corrected?: string | null
    resultType?: string | null
    elasped?: string | null
    supposedRating?: string | null
    elapsedWin?: string | null
    ratingWin?: string | null
    rrset?: string | null
    publisherId: string
    eventId?: string | null
    compId?: string | null
    raceId?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
  }

  export type ResultUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    resultId?: NullableStringFieldUpdateOperationsInput | string | null
    finish?: NullableStringFieldUpdateOperationsInput | string | null
    start?: NullableStringFieldUpdateOperationsInput | string | null
    points?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    discard?: NullableStringFieldUpdateOperationsInput | string | null
    corrected?: NullableStringFieldUpdateOperationsInput | string | null
    resultType?: NullableStringFieldUpdateOperationsInput | string | null
    elasped?: NullableStringFieldUpdateOperationsInput | string | null
    supposedRating?: NullableStringFieldUpdateOperationsInput | string | null
    elapsedWin?: NullableStringFieldUpdateOperationsInput | string | null
    ratingWin?: NullableStringFieldUpdateOperationsInput | string | null
    rrset?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Publisher?: UserUpdateOneRequiredWithoutResultNestedInput
    Event?: EventUpdateOneWithoutResultsNestedInput
    Comp?: CompUpdateOneWithoutResultsNestedInput
    Race?: RaceUpdateOneWithoutResultsNestedInput
  }

  export type ResultUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    resultId?: NullableStringFieldUpdateOperationsInput | string | null
    finish?: NullableStringFieldUpdateOperationsInput | string | null
    start?: NullableStringFieldUpdateOperationsInput | string | null
    points?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    discard?: NullableStringFieldUpdateOperationsInput | string | null
    corrected?: NullableStringFieldUpdateOperationsInput | string | null
    resultType?: NullableStringFieldUpdateOperationsInput | string | null
    elasped?: NullableStringFieldUpdateOperationsInput | string | null
    supposedRating?: NullableStringFieldUpdateOperationsInput | string | null
    elapsedWin?: NullableStringFieldUpdateOperationsInput | string | null
    ratingWin?: NullableStringFieldUpdateOperationsInput | string | null
    rrset?: NullableStringFieldUpdateOperationsInput | string | null
    publisherId?: StringFieldUpdateOperationsInput | string
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
    compId?: NullableStringFieldUpdateOperationsInput | string | null
    raceId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ResultCreateManyInput = {
    id?: string
    resultId?: string | null
    finish?: string | null
    start?: string | null
    points?: string | null
    position?: string | null
    discard?: string | null
    corrected?: string | null
    resultType?: string | null
    elasped?: string | null
    supposedRating?: string | null
    elapsedWin?: string | null
    ratingWin?: string | null
    rrset?: string | null
    publisherId: string
    eventId?: string | null
    compId?: string | null
    raceId?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
  }

  export type ResultUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    resultId?: NullableStringFieldUpdateOperationsInput | string | null
    finish?: NullableStringFieldUpdateOperationsInput | string | null
    start?: NullableStringFieldUpdateOperationsInput | string | null
    points?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    discard?: NullableStringFieldUpdateOperationsInput | string | null
    corrected?: NullableStringFieldUpdateOperationsInput | string | null
    resultType?: NullableStringFieldUpdateOperationsInput | string | null
    elasped?: NullableStringFieldUpdateOperationsInput | string | null
    supposedRating?: NullableStringFieldUpdateOperationsInput | string | null
    elapsedWin?: NullableStringFieldUpdateOperationsInput | string | null
    ratingWin?: NullableStringFieldUpdateOperationsInput | string | null
    rrset?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ResultUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    resultId?: NullableStringFieldUpdateOperationsInput | string | null
    finish?: NullableStringFieldUpdateOperationsInput | string | null
    start?: NullableStringFieldUpdateOperationsInput | string | null
    points?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    discard?: NullableStringFieldUpdateOperationsInput | string | null
    corrected?: NullableStringFieldUpdateOperationsInput | string | null
    resultType?: NullableStringFieldUpdateOperationsInput | string | null
    elasped?: NullableStringFieldUpdateOperationsInput | string | null
    supposedRating?: NullableStringFieldUpdateOperationsInput | string | null
    elapsedWin?: NullableStringFieldUpdateOperationsInput | string | null
    ratingWin?: NullableStringFieldUpdateOperationsInput | string | null
    rrset?: NullableStringFieldUpdateOperationsInput | string | null
    publisherId?: StringFieldUpdateOperationsInput | string
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
    compId?: NullableStringFieldUpdateOperationsInput | string | null
    raceId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type OrganizationCreateInput = {
    id?: string
    name: string
    description?: string | null
    tag?: string | null
    website?: string | null
    email?: string | null
    contact?: NullableJsonNullValueInput | InputJsonValue
    titleImage?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    Owner?: UserCreateNestedOneWithoutOrganizationInput
    Series?: SeriesCreateNestedManyWithoutOrgInput
    Events?: EventCreateNestedManyWithoutOrganizationInput
    follow?: followCreateNestedManyWithoutOrganizationInput
    like?: likeCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    tag?: string | null
    website?: string | null
    email?: string | null
    contact?: NullableJsonNullValueInput | InputJsonValue
    titleImage?: string | null
    ownerId?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    Series?: SeriesUncheckedCreateNestedManyWithoutOrgInput
    Events?: EventUncheckedCreateNestedManyWithoutOrganizationInput
    follow?: followUncheckedCreateNestedManyWithoutOrganizationInput
    like?: likeUncheckedCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    tag?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableJsonNullValueInput | InputJsonValue
    titleImage?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Owner?: UserUpdateOneWithoutOrganizationNestedInput
    Series?: SeriesUpdateManyWithoutOrgNestedInput
    Events?: EventUpdateManyWithoutOrganizationNestedInput
    follow?: followUpdateManyWithoutOrganizationNestedInput
    like?: likeUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    tag?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableJsonNullValueInput | InputJsonValue
    titleImage?: NullableStringFieldUpdateOperationsInput | string | null
    ownerId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Series?: SeriesUncheckedUpdateManyWithoutOrgNestedInput
    Events?: EventUncheckedUpdateManyWithoutOrganizationNestedInput
    follow?: followUncheckedUpdateManyWithoutOrganizationNestedInput
    like?: likeUncheckedUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    tag?: string | null
    website?: string | null
    email?: string | null
    contact?: NullableJsonNullValueInput | InputJsonValue
    titleImage?: string | null
    ownerId?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
  }

  export type OrganizationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    tag?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableJsonNullValueInput | InputJsonValue
    titleImage?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type OrganizationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    tag?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableJsonNullValueInput | InputJsonValue
    titleImage?: NullableStringFieldUpdateOperationsInput | string | null
    ownerId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type followCreateInput = {
    id?: string
    type: string
    updatedAt?: Date | string
    createdAt?: Date | string
    User: UserCreateNestedOneWithoutFollowInput
    Series?: SeriesCreateNestedOneWithoutFollowInput
    Event?: EventCreateNestedOneWithoutFollowInput
    Organization?: OrganizationCreateNestedOneWithoutFollowInput
    Race?: RaceCreateNestedOneWithoutFollowInput
    Comp?: CompCreateNestedOneWithoutFollowInput
  }

  export type followUncheckedCreateInput = {
    id?: string
    userId: string
    type: string
    seriesId?: string | null
    eventId?: string | null
    organizationId?: string | null
    raceId?: string | null
    compId?: string | null
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type followUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    User?: UserUpdateOneRequiredWithoutFollowNestedInput
    Series?: SeriesUpdateOneWithoutFollowNestedInput
    Event?: EventUpdateOneWithoutFollowNestedInput
    Organization?: OrganizationUpdateOneWithoutFollowNestedInput
    Race?: RaceUpdateOneWithoutFollowNestedInput
    Comp?: CompUpdateOneWithoutFollowNestedInput
  }

  export type followUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    seriesId?: NullableStringFieldUpdateOperationsInput | string | null
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: NullableStringFieldUpdateOperationsInput | string | null
    raceId?: NullableStringFieldUpdateOperationsInput | string | null
    compId?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type followCreateManyInput = {
    id?: string
    userId: string
    type: string
    seriesId?: string | null
    eventId?: string | null
    organizationId?: string | null
    raceId?: string | null
    compId?: string | null
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type followUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type followUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    seriesId?: NullableStringFieldUpdateOperationsInput | string | null
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: NullableStringFieldUpdateOperationsInput | string | null
    raceId?: NullableStringFieldUpdateOperationsInput | string | null
    compId?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type likeCreateInput = {
    id?: string
    type: string
    updatedAt?: Date | string
    createdAt?: Date | string
    User: UserCreateNestedOneWithoutLikeInput
    Series?: SeriesCreateNestedOneWithoutLikeInput
    Event?: EventCreateNestedOneWithoutLikeInput
    Organization?: OrganizationCreateNestedOneWithoutLikeInput
    Race?: RaceCreateNestedOneWithoutLikeInput
    Comp?: CompCreateNestedOneWithoutLikeInput
  }

  export type likeUncheckedCreateInput = {
    id?: string
    userId: string
    type: string
    seriesId?: string | null
    eventId?: string | null
    organizationId?: string | null
    raceId?: string | null
    compId?: string | null
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type likeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    User?: UserUpdateOneRequiredWithoutLikeNestedInput
    Series?: SeriesUpdateOneWithoutLikeNestedInput
    Event?: EventUpdateOneWithoutLikeNestedInput
    Organization?: OrganizationUpdateOneWithoutLikeNestedInput
    Race?: RaceUpdateOneWithoutLikeNestedInput
    Comp?: CompUpdateOneWithoutLikeNestedInput
  }

  export type likeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    seriesId?: NullableStringFieldUpdateOperationsInput | string | null
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: NullableStringFieldUpdateOperationsInput | string | null
    raceId?: NullableStringFieldUpdateOperationsInput | string | null
    compId?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type likeCreateManyInput = {
    id?: string
    userId: string
    type: string
    seriesId?: string | null
    eventId?: string | null
    organizationId?: string | null
    raceId?: string | null
    compId?: string | null
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type likeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type likeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    seriesId?: NullableStringFieldUpdateOperationsInput | string | null
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: NullableStringFieldUpdateOperationsInput | string | null
    raceId?: NullableStringFieldUpdateOperationsInput | string | null
    compId?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VenueCreateInput = {
    id?: string
    name: string
    website?: string | null
    email?: string | null
    burgee?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    Publisher?: UserCreateNestedOneWithoutVenueInput
    Series?: SeriesCreateNestedManyWithoutVenuesInput
    Event?: EventCreateNestedManyWithoutVenueInput
  }

  export type VenueUncheckedCreateInput = {
    id?: string
    name: string
    website?: string | null
    email?: string | null
    burgee?: string | null
    publisherId?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    Series?: SeriesUncheckedCreateNestedManyWithoutVenuesInput
    Event?: EventUncheckedCreateNestedManyWithoutVenueInput
  }

  export type VenueUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    burgee?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Publisher?: UserUpdateOneWithoutVenueNestedInput
    Series?: SeriesUpdateManyWithoutVenuesNestedInput
    Event?: EventUpdateManyWithoutVenueNestedInput
  }

  export type VenueUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    burgee?: NullableStringFieldUpdateOperationsInput | string | null
    publisherId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Series?: SeriesUncheckedUpdateManyWithoutVenuesNestedInput
    Event?: EventUncheckedUpdateManyWithoutVenueNestedInput
  }

  export type VenueCreateManyInput = {
    id?: string
    name: string
    website?: string | null
    email?: string | null
    burgee?: string | null
    publisherId?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
  }

  export type VenueUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    burgee?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type VenueUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    burgee?: NullableStringFieldUpdateOperationsInput | string | null
    publisherId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserCreateInput = {
    id: string
    name: string
    username: string
    email?: string | null
    avatar?: string | null
    session?: SessionCreateNestedManyWithoutUserInput
    Key?: KeyCreateNestedManyWithoutUserInput
    Article?: ArticleCreateNestedManyWithoutUserInput
    Series?: SeriesCreateNestedManyWithoutPublisherInput
    Event?: EventCreateNestedManyWithoutPublisherInput
    Organization?: OrganizationCreateNestedManyWithoutOwnerInput
    Comp?: CompCreateNestedManyWithoutPublisherInput
    Venue?: VenueCreateNestedManyWithoutPublisherInput
    UserSettings?: UserSettingsCreateNestedOneWithoutUserInput
    Race?: RaceCreateNestedManyWithoutPublisherInput
    Result?: ResultCreateNestedManyWithoutPublisherInput
    follow?: followCreateNestedManyWithoutUserInput
    like?: likeCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id: string
    name: string
    username: string
    email?: string | null
    avatar?: string | null
    session?: SessionUncheckedCreateNestedManyWithoutUserInput
    Key?: KeyUncheckedCreateNestedManyWithoutUserInput
    Article?: ArticleUncheckedCreateNestedManyWithoutUserInput
    Series?: SeriesUncheckedCreateNestedManyWithoutPublisherInput
    Event?: EventUncheckedCreateNestedManyWithoutPublisherInput
    Organization?: OrganizationUncheckedCreateNestedManyWithoutOwnerInput
    Comp?: CompUncheckedCreateNestedManyWithoutPublisherInput
    Venue?: VenueUncheckedCreateNestedManyWithoutPublisherInput
    UserSettings?: UserSettingsUncheckedCreateNestedOneWithoutUserInput
    Race?: RaceUncheckedCreateNestedManyWithoutPublisherInput
    Result?: ResultUncheckedCreateNestedManyWithoutPublisherInput
    follow?: followUncheckedCreateNestedManyWithoutUserInput
    like?: likeUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    session?: SessionUpdateManyWithoutUserNestedInput
    Key?: KeyUpdateManyWithoutUserNestedInput
    Article?: ArticleUpdateManyWithoutUserNestedInput
    Series?: SeriesUpdateManyWithoutPublisherNestedInput
    Event?: EventUpdateManyWithoutPublisherNestedInput
    Organization?: OrganizationUpdateManyWithoutOwnerNestedInput
    Comp?: CompUpdateManyWithoutPublisherNestedInput
    Venue?: VenueUpdateManyWithoutPublisherNestedInput
    UserSettings?: UserSettingsUpdateOneWithoutUserNestedInput
    Race?: RaceUpdateManyWithoutPublisherNestedInput
    Result?: ResultUpdateManyWithoutPublisherNestedInput
    follow?: followUpdateManyWithoutUserNestedInput
    like?: likeUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    session?: SessionUncheckedUpdateManyWithoutUserNestedInput
    Key?: KeyUncheckedUpdateManyWithoutUserNestedInput
    Article?: ArticleUncheckedUpdateManyWithoutUserNestedInput
    Series?: SeriesUncheckedUpdateManyWithoutPublisherNestedInput
    Event?: EventUncheckedUpdateManyWithoutPublisherNestedInput
    Organization?: OrganizationUncheckedUpdateManyWithoutOwnerNestedInput
    Comp?: CompUncheckedUpdateManyWithoutPublisherNestedInput
    Venue?: VenueUncheckedUpdateManyWithoutPublisherNestedInput
    UserSettings?: UserSettingsUncheckedUpdateOneWithoutUserNestedInput
    Race?: RaceUncheckedUpdateManyWithoutPublisherNestedInput
    Result?: ResultUncheckedUpdateManyWithoutPublisherNestedInput
    follow?: followUncheckedUpdateManyWithoutUserNestedInput
    like?: likeUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id: string
    name: string
    username: string
    email?: string | null
    avatar?: string | null
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserSettingsCreateInput = {
    id?: string
    theme?: string | null
    language?: Lang | null
    user?: UserCreateNestedOneWithoutUserSettingsInput
  }

  export type UserSettingsUncheckedCreateInput = {
    id?: string
    theme?: string | null
    language?: Lang | null
    userId?: string | null
  }

  export type UserSettingsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    theme?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableEnumLangFieldUpdateOperationsInput | Lang | null
    user?: UserUpdateOneWithoutUserSettingsNestedInput
  }

  export type UserSettingsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    theme?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableEnumLangFieldUpdateOperationsInput | Lang | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserSettingsCreateManyInput = {
    id?: string
    theme?: string | null
    language?: Lang | null
    userId?: string | null
  }

  export type UserSettingsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    theme?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableEnumLangFieldUpdateOperationsInput | Lang | null
  }

  export type UserSettingsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    theme?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableEnumLangFieldUpdateOperationsInput | Lang | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SessionCreateInput = {
    id: string
    active_expires: bigint | number
    idle_expires: bigint | number
    user: UserCreateNestedOneWithoutSessionInput
  }

  export type SessionUncheckedCreateInput = {
    id: string
    user_id: string
    active_expires: bigint | number
    idle_expires: bigint | number
  }

  export type SessionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    active_expires?: BigIntFieldUpdateOperationsInput | bigint | number
    idle_expires?: BigIntFieldUpdateOperationsInput | bigint | number
    user?: UserUpdateOneRequiredWithoutSessionNestedInput
  }

  export type SessionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    active_expires?: BigIntFieldUpdateOperationsInput | bigint | number
    idle_expires?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type SessionCreateManyInput = {
    id: string
    user_id: string
    active_expires: bigint | number
    idle_expires: bigint | number
  }

  export type SessionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    active_expires?: BigIntFieldUpdateOperationsInput | bigint | number
    idle_expires?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type SessionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    active_expires?: BigIntFieldUpdateOperationsInput | bigint | number
    idle_expires?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type KeyCreateInput = {
    id: string
    hashed_password?: string | null
    primary: boolean
    user: UserCreateNestedOneWithoutKeyInput
  }

  export type KeyUncheckedCreateInput = {
    id: string
    hashed_password?: string | null
    user_id: string
    primary: boolean
  }

  export type KeyUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    hashed_password?: NullableStringFieldUpdateOperationsInput | string | null
    primary?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutKeyNestedInput
  }

  export type KeyUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    hashed_password?: NullableStringFieldUpdateOperationsInput | string | null
    user_id?: StringFieldUpdateOperationsInput | string
    primary?: BoolFieldUpdateOperationsInput | boolean
  }

  export type KeyCreateManyInput = {
    id: string
    hashed_password?: string | null
    user_id: string
    primary: boolean
  }

  export type KeyUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    hashed_password?: NullableStringFieldUpdateOperationsInput | string | null
    primary?: BoolFieldUpdateOperationsInput | boolean
  }

  export type KeyUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    hashed_password?: NullableStringFieldUpdateOperationsInput | string | null
    user_id?: StringFieldUpdateOperationsInput | string
    primary?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ArticleCreateInput = {
    id?: string
    title: string
    content?: string | null
    bogus?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    user?: UserCreateNestedOneWithoutArticleInput
  }

  export type ArticleUncheckedCreateInput = {
    id?: string
    title: string
    content?: string | null
    userId?: string | null
    bogus?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
  }

  export type ArticleUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    bogus?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneWithoutArticleNestedInput
  }

  export type ArticleUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    bogus?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ArticleCreateManyInput = {
    id?: string
    title: string
    content?: string | null
    userId?: string | null
    bogus?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
  }

  export type ArticleUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    bogus?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ArticleUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    bogus?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }
  export type JsonNullableFilter = 
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase>, Exclude<keyof Required<JsonNullableFilterBase>, 'path'>>,
        Required<JsonNullableFilterBase>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase>, 'path'>>

  export type JsonNullableFilterBase = {
    equals?: InputJsonValue | JsonNullValueFilter
    path?: string
    string_contains?: string
    string_starts_with?: string
    string_ends_with?: string
    array_contains?: InputJsonValue | null
    array_starts_with?: InputJsonValue | null
    array_ends_with?: InputJsonValue | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonNullValueFilter
  }

  export type DateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type OrganizationRelationFilter = {
    is?: OrganizationWhereInput | null
    isNot?: OrganizationWhereInput | null
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type VenueListRelationFilter = {
    every?: VenueWhereInput
    some?: VenueWhereInput
    none?: VenueWhereInput
  }

  export type EventListRelationFilter = {
    every?: EventWhereInput
    some?: EventWhereInput
    none?: EventWhereInput
  }

  export type FollowListRelationFilter = {
    every?: followWhereInput
    some?: followWhereInput
    none?: followWhereInput
  }

  export type LikeListRelationFilter = {
    every?: likeWhereInput
    some?: likeWhereInput
    none?: likeWhereInput
  }

  export type VenueOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EventOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type followOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type likeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SeriesCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    rest?: SortOrder
    organizationId?: SortOrder
    publisherId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SeriesMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    organizationId?: SortOrder
    publisherId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SeriesMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    organizationId?: SortOrder
    publisherId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }
  export type JsonNullableWithAggregatesFilter = 
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase = {
    equals?: InputJsonValue | JsonNullValueFilter
    path?: string
    string_contains?: string
    string_starts_with?: string
    string_ends_with?: string
    array_contains?: InputJsonValue | null
    array_starts_with?: InputJsonValue | null
    array_ends_with?: InputJsonValue | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonNullValueFilter
    _count?: NestedIntNullableFilter
    _min?: NestedJsonNullableFilter
    _max?: NestedJsonNullableFilter
  }

  export type DateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type VenueRelationFilter = {
    is?: VenueWhereInput | null
    isNot?: VenueWhereInput | null
  }

  export type RaceListRelationFilter = {
    every?: RaceWhereInput
    some?: RaceWhereInput
    none?: RaceWhereInput
  }

  export type ResultListRelationFilter = {
    every?: ResultWhereInput
    some?: ResultWhereInput
    none?: ResultWhereInput
  }

  export type CompListRelationFilter = {
    every?: CompWhereInput
    some?: CompWhereInput
    none?: CompWhereInput
  }

  export type SeriesRelationFilter = {
    is?: SeriesWhereInput | null
    isNot?: SeriesWhereInput | null
  }

  export type RaceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ResultOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CompOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EventCountOrderByAggregateInput = {
    id?: SortOrder
    eventeid?: SortOrder
    uniqueIdString?: SortOrder
    name?: SortOrder
    eventwebsite?: SortOrder
    email?: SortOrder
    venueName?: SortOrder
    description?: SortOrder
    titleImage?: SortOrder
    public?: SortOrder
    fileInfo?: SortOrder
    resultColumns?: SortOrder
    rest?: SortOrder
    publisherId?: SortOrder
    venueId?: SortOrder
    organizationId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    seriesId?: SortOrder
  }

  export type EventMaxOrderByAggregateInput = {
    id?: SortOrder
    eventeid?: SortOrder
    uniqueIdString?: SortOrder
    name?: SortOrder
    eventwebsite?: SortOrder
    email?: SortOrder
    venueName?: SortOrder
    description?: SortOrder
    titleImage?: SortOrder
    public?: SortOrder
    publisherId?: SortOrder
    venueId?: SortOrder
    organizationId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    seriesId?: SortOrder
  }

  export type EventMinOrderByAggregateInput = {
    id?: SortOrder
    eventeid?: SortOrder
    uniqueIdString?: SortOrder
    name?: SortOrder
    eventwebsite?: SortOrder
    email?: SortOrder
    venueName?: SortOrder
    description?: SortOrder
    titleImage?: SortOrder
    public?: SortOrder
    publisherId?: SortOrder
    venueId?: SortOrder
    organizationId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    seriesId?: SortOrder
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type EventRelationFilter = {
    is?: EventWhereInput | null
    isNot?: EventWhereInput | null
  }

  export type RaceCountOrderByAggregateInput = {
    id?: SortOrder
    raceId?: SortOrder
    uniqueRaceString?: SortOrder
    name?: SortOrder
    starts?: SortOrder
    rank?: SortOrder
    date?: SortOrder
    time?: SortOrder
    notes?: SortOrder
    sailed?: SortOrder
    resultColumns?: SortOrder
    rest?: SortOrder
    eventId?: SortOrder
    publisherId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RaceMaxOrderByAggregateInput = {
    id?: SortOrder
    raceId?: SortOrder
    uniqueRaceString?: SortOrder
    name?: SortOrder
    rank?: SortOrder
    date?: SortOrder
    time?: SortOrder
    notes?: SortOrder
    sailed?: SortOrder
    eventId?: SortOrder
    publisherId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RaceMinOrderByAggregateInput = {
    id?: SortOrder
    raceId?: SortOrder
    uniqueRaceString?: SortOrder
    name?: SortOrder
    rank?: SortOrder
    date?: SortOrder
    time?: SortOrder
    notes?: SortOrder
    sailed?: SortOrder
    eventId?: SortOrder
    publisherId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CompCountOrderByAggregateInput = {
    id?: SortOrder
    compId?: SortOrder
    club?: SortOrder
    boat?: SortOrder
    skipper?: SortOrder
    fleet?: SortOrder
    division?: SortOrder
    rating?: SortOrder
    rank?: SortOrder
    nett?: SortOrder
    total?: SortOrder
    rest?: SortOrder
    publisherId?: SortOrder
    eventId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CompMaxOrderByAggregateInput = {
    id?: SortOrder
    compId?: SortOrder
    club?: SortOrder
    boat?: SortOrder
    skipper?: SortOrder
    fleet?: SortOrder
    division?: SortOrder
    rating?: SortOrder
    rank?: SortOrder
    nett?: SortOrder
    total?: SortOrder
    publisherId?: SortOrder
    eventId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CompMinOrderByAggregateInput = {
    id?: SortOrder
    compId?: SortOrder
    club?: SortOrder
    boat?: SortOrder
    skipper?: SortOrder
    fleet?: SortOrder
    division?: SortOrder
    rating?: SortOrder
    rank?: SortOrder
    nett?: SortOrder
    total?: SortOrder
    publisherId?: SortOrder
    eventId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CompRelationFilter = {
    is?: CompWhereInput | null
    isNot?: CompWhereInput | null
  }

  export type RaceRelationFilter = {
    is?: RaceWhereInput | null
    isNot?: RaceWhereInput | null
  }

  export type ResultCountOrderByAggregateInput = {
    id?: SortOrder
    resultId?: SortOrder
    finish?: SortOrder
    start?: SortOrder
    points?: SortOrder
    position?: SortOrder
    discard?: SortOrder
    corrected?: SortOrder
    resultType?: SortOrder
    elasped?: SortOrder
    supposedRating?: SortOrder
    elapsedWin?: SortOrder
    ratingWin?: SortOrder
    rrset?: SortOrder
    publisherId?: SortOrder
    eventId?: SortOrder
    compId?: SortOrder
    raceId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ResultMaxOrderByAggregateInput = {
    id?: SortOrder
    resultId?: SortOrder
    finish?: SortOrder
    start?: SortOrder
    points?: SortOrder
    position?: SortOrder
    discard?: SortOrder
    corrected?: SortOrder
    resultType?: SortOrder
    elasped?: SortOrder
    supposedRating?: SortOrder
    elapsedWin?: SortOrder
    ratingWin?: SortOrder
    rrset?: SortOrder
    publisherId?: SortOrder
    eventId?: SortOrder
    compId?: SortOrder
    raceId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ResultMinOrderByAggregateInput = {
    id?: SortOrder
    resultId?: SortOrder
    finish?: SortOrder
    start?: SortOrder
    points?: SortOrder
    position?: SortOrder
    discard?: SortOrder
    corrected?: SortOrder
    resultType?: SortOrder
    elasped?: SortOrder
    supposedRating?: SortOrder
    elapsedWin?: SortOrder
    ratingWin?: SortOrder
    rrset?: SortOrder
    publisherId?: SortOrder
    eventId?: SortOrder
    compId?: SortOrder
    raceId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SeriesListRelationFilter = {
    every?: SeriesWhereInput
    some?: SeriesWhereInput
    none?: SeriesWhereInput
  }

  export type SeriesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OrganizationCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    tag?: SortOrder
    website?: SortOrder
    email?: SortOrder
    contact?: SortOrder
    titleImage?: SortOrder
    ownerId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OrganizationMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    tag?: SortOrder
    website?: SortOrder
    email?: SortOrder
    titleImage?: SortOrder
    ownerId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OrganizationMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    tag?: SortOrder
    website?: SortOrder
    email?: SortOrder
    titleImage?: SortOrder
    ownerId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type followCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    seriesId?: SortOrder
    eventId?: SortOrder
    organizationId?: SortOrder
    raceId?: SortOrder
    compId?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type followMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    seriesId?: SortOrder
    eventId?: SortOrder
    organizationId?: SortOrder
    raceId?: SortOrder
    compId?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type followMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    seriesId?: SortOrder
    eventId?: SortOrder
    organizationId?: SortOrder
    raceId?: SortOrder
    compId?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type likeCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    seriesId?: SortOrder
    eventId?: SortOrder
    organizationId?: SortOrder
    raceId?: SortOrder
    compId?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type likeMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    seriesId?: SortOrder
    eventId?: SortOrder
    organizationId?: SortOrder
    raceId?: SortOrder
    compId?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type likeMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    seriesId?: SortOrder
    eventId?: SortOrder
    organizationId?: SortOrder
    raceId?: SortOrder
    compId?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type VenueCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    website?: SortOrder
    email?: SortOrder
    burgee?: SortOrder
    publisherId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type VenueMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    website?: SortOrder
    email?: SortOrder
    burgee?: SortOrder
    publisherId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type VenueMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    website?: SortOrder
    email?: SortOrder
    burgee?: SortOrder
    publisherId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SessionListRelationFilter = {
    every?: SessionWhereInput
    some?: SessionWhereInput
    none?: SessionWhereInput
  }

  export type KeyListRelationFilter = {
    every?: KeyWhereInput
    some?: KeyWhereInput
    none?: KeyWhereInput
  }

  export type ArticleListRelationFilter = {
    every?: ArticleWhereInput
    some?: ArticleWhereInput
    none?: ArticleWhereInput
  }

  export type OrganizationListRelationFilter = {
    every?: OrganizationWhereInput
    some?: OrganizationWhereInput
    none?: OrganizationWhereInput
  }

  export type UserSettingsRelationFilter = {
    is?: UserSettingsWhereInput | null
    isNot?: UserSettingsWhereInput | null
  }

  export type SessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type KeyOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ArticleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OrganizationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    username?: SortOrder
    email?: SortOrder
    avatar?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    username?: SortOrder
    email?: SortOrder
    avatar?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    username?: SortOrder
    email?: SortOrder
    avatar?: SortOrder
  }

  export type EnumLangNullableFilter = {
    equals?: Lang | null
    in?: Enumerable<Lang> | null
    notIn?: Enumerable<Lang> | null
    not?: NestedEnumLangNullableFilter | Lang | null
  }

  export type UserSettingsCountOrderByAggregateInput = {
    id?: SortOrder
    theme?: SortOrder
    language?: SortOrder
    userId?: SortOrder
  }

  export type UserSettingsMaxOrderByAggregateInput = {
    id?: SortOrder
    theme?: SortOrder
    language?: SortOrder
    userId?: SortOrder
  }

  export type UserSettingsMinOrderByAggregateInput = {
    id?: SortOrder
    theme?: SortOrder
    language?: SortOrder
    userId?: SortOrder
  }

  export type EnumLangNullableWithAggregatesFilter = {
    equals?: Lang | null
    in?: Enumerable<Lang> | null
    notIn?: Enumerable<Lang> | null
    not?: NestedEnumLangNullableWithAggregatesFilter | Lang | null
    _count?: NestedIntNullableFilter
    _min?: NestedEnumLangNullableFilter
    _max?: NestedEnumLangNullableFilter
  }

  export type BigIntFilter = {
    equals?: bigint | number
    in?: Enumerable<bigint> | Enumerable<number>
    notIn?: Enumerable<bigint> | Enumerable<number>
    lt?: bigint | number
    lte?: bigint | number
    gt?: bigint | number
    gte?: bigint | number
    not?: NestedBigIntFilter | bigint | number
  }

  export type SessionCountOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    active_expires?: SortOrder
    idle_expires?: SortOrder
  }

  export type SessionAvgOrderByAggregateInput = {
    active_expires?: SortOrder
    idle_expires?: SortOrder
  }

  export type SessionMaxOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    active_expires?: SortOrder
    idle_expires?: SortOrder
  }

  export type SessionMinOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    active_expires?: SortOrder
    idle_expires?: SortOrder
  }

  export type SessionSumOrderByAggregateInput = {
    active_expires?: SortOrder
    idle_expires?: SortOrder
  }

  export type BigIntWithAggregatesFilter = {
    equals?: bigint | number
    in?: Enumerable<bigint> | Enumerable<number>
    notIn?: Enumerable<bigint> | Enumerable<number>
    lt?: bigint | number
    lte?: bigint | number
    gt?: bigint | number
    gte?: bigint | number
    not?: NestedBigIntWithAggregatesFilter | bigint | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedBigIntFilter
    _min?: NestedBigIntFilter
    _max?: NestedBigIntFilter
  }

  export type KeyCountOrderByAggregateInput = {
    id?: SortOrder
    hashed_password?: SortOrder
    user_id?: SortOrder
    primary?: SortOrder
  }

  export type KeyMaxOrderByAggregateInput = {
    id?: SortOrder
    hashed_password?: SortOrder
    user_id?: SortOrder
    primary?: SortOrder
  }

  export type KeyMinOrderByAggregateInput = {
    id?: SortOrder
    hashed_password?: SortOrder
    user_id?: SortOrder
    primary?: SortOrder
  }

  export type ArticleCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    userId?: SortOrder
    bogus?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ArticleMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    userId?: SortOrder
    bogus?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ArticleMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    userId?: SortOrder
    bogus?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OrganizationCreateNestedOneWithoutSeriesInput = {
    create?: XOR<OrganizationCreateWithoutSeriesInput, OrganizationUncheckedCreateWithoutSeriesInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutSeriesInput
    connect?: OrganizationWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutSeriesInput = {
    create?: XOR<UserCreateWithoutSeriesInput, UserUncheckedCreateWithoutSeriesInput>
    connectOrCreate?: UserCreateOrConnectWithoutSeriesInput
    connect?: UserWhereUniqueInput
  }

  export type VenueCreateNestedManyWithoutSeriesInput = {
    create?: XOR<Enumerable<VenueCreateWithoutSeriesInput>, Enumerable<VenueUncheckedCreateWithoutSeriesInput>>
    connectOrCreate?: Enumerable<VenueCreateOrConnectWithoutSeriesInput>
    connect?: Enumerable<VenueWhereUniqueInput>
  }

  export type EventCreateNestedManyWithoutSeriesInput = {
    create?: XOR<Enumerable<EventCreateWithoutSeriesInput>, Enumerable<EventUncheckedCreateWithoutSeriesInput>>
    connectOrCreate?: Enumerable<EventCreateOrConnectWithoutSeriesInput>
    createMany?: EventCreateManySeriesInputEnvelope
    connect?: Enumerable<EventWhereUniqueInput>
  }

  export type followCreateNestedManyWithoutSeriesInput = {
    create?: XOR<Enumerable<followCreateWithoutSeriesInput>, Enumerable<followUncheckedCreateWithoutSeriesInput>>
    connectOrCreate?: Enumerable<followCreateOrConnectWithoutSeriesInput>
    createMany?: followCreateManySeriesInputEnvelope
    connect?: Enumerable<followWhereUniqueInput>
  }

  export type likeCreateNestedManyWithoutSeriesInput = {
    create?: XOR<Enumerable<likeCreateWithoutSeriesInput>, Enumerable<likeUncheckedCreateWithoutSeriesInput>>
    connectOrCreate?: Enumerable<likeCreateOrConnectWithoutSeriesInput>
    createMany?: likeCreateManySeriesInputEnvelope
    connect?: Enumerable<likeWhereUniqueInput>
  }

  export type VenueUncheckedCreateNestedManyWithoutSeriesInput = {
    create?: XOR<Enumerable<VenueCreateWithoutSeriesInput>, Enumerable<VenueUncheckedCreateWithoutSeriesInput>>
    connectOrCreate?: Enumerable<VenueCreateOrConnectWithoutSeriesInput>
    connect?: Enumerable<VenueWhereUniqueInput>
  }

  export type EventUncheckedCreateNestedManyWithoutSeriesInput = {
    create?: XOR<Enumerable<EventCreateWithoutSeriesInput>, Enumerable<EventUncheckedCreateWithoutSeriesInput>>
    connectOrCreate?: Enumerable<EventCreateOrConnectWithoutSeriesInput>
    createMany?: EventCreateManySeriesInputEnvelope
    connect?: Enumerable<EventWhereUniqueInput>
  }

  export type followUncheckedCreateNestedManyWithoutSeriesInput = {
    create?: XOR<Enumerable<followCreateWithoutSeriesInput>, Enumerable<followUncheckedCreateWithoutSeriesInput>>
    connectOrCreate?: Enumerable<followCreateOrConnectWithoutSeriesInput>
    createMany?: followCreateManySeriesInputEnvelope
    connect?: Enumerable<followWhereUniqueInput>
  }

  export type likeUncheckedCreateNestedManyWithoutSeriesInput = {
    create?: XOR<Enumerable<likeCreateWithoutSeriesInput>, Enumerable<likeUncheckedCreateWithoutSeriesInput>>
    connectOrCreate?: Enumerable<likeCreateOrConnectWithoutSeriesInput>
    createMany?: likeCreateManySeriesInputEnvelope
    connect?: Enumerable<likeWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type OrganizationUpdateOneWithoutSeriesNestedInput = {
    create?: XOR<OrganizationCreateWithoutSeriesInput, OrganizationUncheckedCreateWithoutSeriesInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutSeriesInput
    upsert?: OrganizationUpsertWithoutSeriesInput
    disconnect?: boolean
    delete?: boolean
    connect?: OrganizationWhereUniqueInput
    update?: XOR<OrganizationUpdateWithoutSeriesInput, OrganizationUncheckedUpdateWithoutSeriesInput>
  }

  export type UserUpdateOneWithoutSeriesNestedInput = {
    create?: XOR<UserCreateWithoutSeriesInput, UserUncheckedCreateWithoutSeriesInput>
    connectOrCreate?: UserCreateOrConnectWithoutSeriesInput
    upsert?: UserUpsertWithoutSeriesInput
    disconnect?: boolean
    delete?: boolean
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutSeriesInput, UserUncheckedUpdateWithoutSeriesInput>
  }

  export type VenueUpdateManyWithoutSeriesNestedInput = {
    create?: XOR<Enumerable<VenueCreateWithoutSeriesInput>, Enumerable<VenueUncheckedCreateWithoutSeriesInput>>
    connectOrCreate?: Enumerable<VenueCreateOrConnectWithoutSeriesInput>
    upsert?: Enumerable<VenueUpsertWithWhereUniqueWithoutSeriesInput>
    set?: Enumerable<VenueWhereUniqueInput>
    disconnect?: Enumerable<VenueWhereUniqueInput>
    delete?: Enumerable<VenueWhereUniqueInput>
    connect?: Enumerable<VenueWhereUniqueInput>
    update?: Enumerable<VenueUpdateWithWhereUniqueWithoutSeriesInput>
    updateMany?: Enumerable<VenueUpdateManyWithWhereWithoutSeriesInput>
    deleteMany?: Enumerable<VenueScalarWhereInput>
  }

  export type EventUpdateManyWithoutSeriesNestedInput = {
    create?: XOR<Enumerable<EventCreateWithoutSeriesInput>, Enumerable<EventUncheckedCreateWithoutSeriesInput>>
    connectOrCreate?: Enumerable<EventCreateOrConnectWithoutSeriesInput>
    upsert?: Enumerable<EventUpsertWithWhereUniqueWithoutSeriesInput>
    createMany?: EventCreateManySeriesInputEnvelope
    set?: Enumerable<EventWhereUniqueInput>
    disconnect?: Enumerable<EventWhereUniqueInput>
    delete?: Enumerable<EventWhereUniqueInput>
    connect?: Enumerable<EventWhereUniqueInput>
    update?: Enumerable<EventUpdateWithWhereUniqueWithoutSeriesInput>
    updateMany?: Enumerable<EventUpdateManyWithWhereWithoutSeriesInput>
    deleteMany?: Enumerable<EventScalarWhereInput>
  }

  export type followUpdateManyWithoutSeriesNestedInput = {
    create?: XOR<Enumerable<followCreateWithoutSeriesInput>, Enumerable<followUncheckedCreateWithoutSeriesInput>>
    connectOrCreate?: Enumerable<followCreateOrConnectWithoutSeriesInput>
    upsert?: Enumerable<followUpsertWithWhereUniqueWithoutSeriesInput>
    createMany?: followCreateManySeriesInputEnvelope
    set?: Enumerable<followWhereUniqueInput>
    disconnect?: Enumerable<followWhereUniqueInput>
    delete?: Enumerable<followWhereUniqueInput>
    connect?: Enumerable<followWhereUniqueInput>
    update?: Enumerable<followUpdateWithWhereUniqueWithoutSeriesInput>
    updateMany?: Enumerable<followUpdateManyWithWhereWithoutSeriesInput>
    deleteMany?: Enumerable<followScalarWhereInput>
  }

  export type likeUpdateManyWithoutSeriesNestedInput = {
    create?: XOR<Enumerable<likeCreateWithoutSeriesInput>, Enumerable<likeUncheckedCreateWithoutSeriesInput>>
    connectOrCreate?: Enumerable<likeCreateOrConnectWithoutSeriesInput>
    upsert?: Enumerable<likeUpsertWithWhereUniqueWithoutSeriesInput>
    createMany?: likeCreateManySeriesInputEnvelope
    set?: Enumerable<likeWhereUniqueInput>
    disconnect?: Enumerable<likeWhereUniqueInput>
    delete?: Enumerable<likeWhereUniqueInput>
    connect?: Enumerable<likeWhereUniqueInput>
    update?: Enumerable<likeUpdateWithWhereUniqueWithoutSeriesInput>
    updateMany?: Enumerable<likeUpdateManyWithWhereWithoutSeriesInput>
    deleteMany?: Enumerable<likeScalarWhereInput>
  }

  export type VenueUncheckedUpdateManyWithoutSeriesNestedInput = {
    create?: XOR<Enumerable<VenueCreateWithoutSeriesInput>, Enumerable<VenueUncheckedCreateWithoutSeriesInput>>
    connectOrCreate?: Enumerable<VenueCreateOrConnectWithoutSeriesInput>
    upsert?: Enumerable<VenueUpsertWithWhereUniqueWithoutSeriesInput>
    set?: Enumerable<VenueWhereUniqueInput>
    disconnect?: Enumerable<VenueWhereUniqueInput>
    delete?: Enumerable<VenueWhereUniqueInput>
    connect?: Enumerable<VenueWhereUniqueInput>
    update?: Enumerable<VenueUpdateWithWhereUniqueWithoutSeriesInput>
    updateMany?: Enumerable<VenueUpdateManyWithWhereWithoutSeriesInput>
    deleteMany?: Enumerable<VenueScalarWhereInput>
  }

  export type EventUncheckedUpdateManyWithoutSeriesNestedInput = {
    create?: XOR<Enumerable<EventCreateWithoutSeriesInput>, Enumerable<EventUncheckedCreateWithoutSeriesInput>>
    connectOrCreate?: Enumerable<EventCreateOrConnectWithoutSeriesInput>
    upsert?: Enumerable<EventUpsertWithWhereUniqueWithoutSeriesInput>
    createMany?: EventCreateManySeriesInputEnvelope
    set?: Enumerable<EventWhereUniqueInput>
    disconnect?: Enumerable<EventWhereUniqueInput>
    delete?: Enumerable<EventWhereUniqueInput>
    connect?: Enumerable<EventWhereUniqueInput>
    update?: Enumerable<EventUpdateWithWhereUniqueWithoutSeriesInput>
    updateMany?: Enumerable<EventUpdateManyWithWhereWithoutSeriesInput>
    deleteMany?: Enumerable<EventScalarWhereInput>
  }

  export type followUncheckedUpdateManyWithoutSeriesNestedInput = {
    create?: XOR<Enumerable<followCreateWithoutSeriesInput>, Enumerable<followUncheckedCreateWithoutSeriesInput>>
    connectOrCreate?: Enumerable<followCreateOrConnectWithoutSeriesInput>
    upsert?: Enumerable<followUpsertWithWhereUniqueWithoutSeriesInput>
    createMany?: followCreateManySeriesInputEnvelope
    set?: Enumerable<followWhereUniqueInput>
    disconnect?: Enumerable<followWhereUniqueInput>
    delete?: Enumerable<followWhereUniqueInput>
    connect?: Enumerable<followWhereUniqueInput>
    update?: Enumerable<followUpdateWithWhereUniqueWithoutSeriesInput>
    updateMany?: Enumerable<followUpdateManyWithWhereWithoutSeriesInput>
    deleteMany?: Enumerable<followScalarWhereInput>
  }

  export type likeUncheckedUpdateManyWithoutSeriesNestedInput = {
    create?: XOR<Enumerable<likeCreateWithoutSeriesInput>, Enumerable<likeUncheckedCreateWithoutSeriesInput>>
    connectOrCreate?: Enumerable<likeCreateOrConnectWithoutSeriesInput>
    upsert?: Enumerable<likeUpsertWithWhereUniqueWithoutSeriesInput>
    createMany?: likeCreateManySeriesInputEnvelope
    set?: Enumerable<likeWhereUniqueInput>
    disconnect?: Enumerable<likeWhereUniqueInput>
    delete?: Enumerable<likeWhereUniqueInput>
    connect?: Enumerable<likeWhereUniqueInput>
    update?: Enumerable<likeUpdateWithWhereUniqueWithoutSeriesInput>
    updateMany?: Enumerable<likeUpdateManyWithWhereWithoutSeriesInput>
    deleteMany?: Enumerable<likeScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutEventInput = {
    create?: XOR<UserCreateWithoutEventInput, UserUncheckedCreateWithoutEventInput>
    connectOrCreate?: UserCreateOrConnectWithoutEventInput
    connect?: UserWhereUniqueInput
  }

  export type VenueCreateNestedOneWithoutEventInput = {
    create?: XOR<VenueCreateWithoutEventInput, VenueUncheckedCreateWithoutEventInput>
    connectOrCreate?: VenueCreateOrConnectWithoutEventInput
    connect?: VenueWhereUniqueInput
  }

  export type OrganizationCreateNestedOneWithoutEventsInput = {
    create?: XOR<OrganizationCreateWithoutEventsInput, OrganizationUncheckedCreateWithoutEventsInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutEventsInput
    connect?: OrganizationWhereUniqueInput
  }

  export type RaceCreateNestedManyWithoutEventInput = {
    create?: XOR<Enumerable<RaceCreateWithoutEventInput>, Enumerable<RaceUncheckedCreateWithoutEventInput>>
    connectOrCreate?: Enumerable<RaceCreateOrConnectWithoutEventInput>
    createMany?: RaceCreateManyEventInputEnvelope
    connect?: Enumerable<RaceWhereUniqueInput>
  }

  export type ResultCreateNestedManyWithoutEventInput = {
    create?: XOR<Enumerable<ResultCreateWithoutEventInput>, Enumerable<ResultUncheckedCreateWithoutEventInput>>
    connectOrCreate?: Enumerable<ResultCreateOrConnectWithoutEventInput>
    createMany?: ResultCreateManyEventInputEnvelope
    connect?: Enumerable<ResultWhereUniqueInput>
  }

  export type CompCreateNestedManyWithoutEventInput = {
    create?: XOR<Enumerable<CompCreateWithoutEventInput>, Enumerable<CompUncheckedCreateWithoutEventInput>>
    connectOrCreate?: Enumerable<CompCreateOrConnectWithoutEventInput>
    createMany?: CompCreateManyEventInputEnvelope
    connect?: Enumerable<CompWhereUniqueInput>
  }

  export type SeriesCreateNestedOneWithoutEventsInput = {
    create?: XOR<SeriesCreateWithoutEventsInput, SeriesUncheckedCreateWithoutEventsInput>
    connectOrCreate?: SeriesCreateOrConnectWithoutEventsInput
    connect?: SeriesWhereUniqueInput
  }

  export type followCreateNestedManyWithoutEventInput = {
    create?: XOR<Enumerable<followCreateWithoutEventInput>, Enumerable<followUncheckedCreateWithoutEventInput>>
    connectOrCreate?: Enumerable<followCreateOrConnectWithoutEventInput>
    createMany?: followCreateManyEventInputEnvelope
    connect?: Enumerable<followWhereUniqueInput>
  }

  export type likeCreateNestedManyWithoutEventInput = {
    create?: XOR<Enumerable<likeCreateWithoutEventInput>, Enumerable<likeUncheckedCreateWithoutEventInput>>
    connectOrCreate?: Enumerable<likeCreateOrConnectWithoutEventInput>
    createMany?: likeCreateManyEventInputEnvelope
    connect?: Enumerable<likeWhereUniqueInput>
  }

  export type RaceUncheckedCreateNestedManyWithoutEventInput = {
    create?: XOR<Enumerable<RaceCreateWithoutEventInput>, Enumerable<RaceUncheckedCreateWithoutEventInput>>
    connectOrCreate?: Enumerable<RaceCreateOrConnectWithoutEventInput>
    createMany?: RaceCreateManyEventInputEnvelope
    connect?: Enumerable<RaceWhereUniqueInput>
  }

  export type ResultUncheckedCreateNestedManyWithoutEventInput = {
    create?: XOR<Enumerable<ResultCreateWithoutEventInput>, Enumerable<ResultUncheckedCreateWithoutEventInput>>
    connectOrCreate?: Enumerable<ResultCreateOrConnectWithoutEventInput>
    createMany?: ResultCreateManyEventInputEnvelope
    connect?: Enumerable<ResultWhereUniqueInput>
  }

  export type CompUncheckedCreateNestedManyWithoutEventInput = {
    create?: XOR<Enumerable<CompCreateWithoutEventInput>, Enumerable<CompUncheckedCreateWithoutEventInput>>
    connectOrCreate?: Enumerable<CompCreateOrConnectWithoutEventInput>
    createMany?: CompCreateManyEventInputEnvelope
    connect?: Enumerable<CompWhereUniqueInput>
  }

  export type followUncheckedCreateNestedManyWithoutEventInput = {
    create?: XOR<Enumerable<followCreateWithoutEventInput>, Enumerable<followUncheckedCreateWithoutEventInput>>
    connectOrCreate?: Enumerable<followCreateOrConnectWithoutEventInput>
    createMany?: followCreateManyEventInputEnvelope
    connect?: Enumerable<followWhereUniqueInput>
  }

  export type likeUncheckedCreateNestedManyWithoutEventInput = {
    create?: XOR<Enumerable<likeCreateWithoutEventInput>, Enumerable<likeUncheckedCreateWithoutEventInput>>
    connectOrCreate?: Enumerable<likeCreateOrConnectWithoutEventInput>
    createMany?: likeCreateManyEventInputEnvelope
    connect?: Enumerable<likeWhereUniqueInput>
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type UserUpdateOneWithoutEventNestedInput = {
    create?: XOR<UserCreateWithoutEventInput, UserUncheckedCreateWithoutEventInput>
    connectOrCreate?: UserCreateOrConnectWithoutEventInput
    upsert?: UserUpsertWithoutEventInput
    disconnect?: boolean
    delete?: boolean
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutEventInput, UserUncheckedUpdateWithoutEventInput>
  }

  export type VenueUpdateOneWithoutEventNestedInput = {
    create?: XOR<VenueCreateWithoutEventInput, VenueUncheckedCreateWithoutEventInput>
    connectOrCreate?: VenueCreateOrConnectWithoutEventInput
    upsert?: VenueUpsertWithoutEventInput
    disconnect?: boolean
    delete?: boolean
    connect?: VenueWhereUniqueInput
    update?: XOR<VenueUpdateWithoutEventInput, VenueUncheckedUpdateWithoutEventInput>
  }

  export type OrganizationUpdateOneWithoutEventsNestedInput = {
    create?: XOR<OrganizationCreateWithoutEventsInput, OrganizationUncheckedCreateWithoutEventsInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutEventsInput
    upsert?: OrganizationUpsertWithoutEventsInput
    disconnect?: boolean
    delete?: boolean
    connect?: OrganizationWhereUniqueInput
    update?: XOR<OrganizationUpdateWithoutEventsInput, OrganizationUncheckedUpdateWithoutEventsInput>
  }

  export type RaceUpdateManyWithoutEventNestedInput = {
    create?: XOR<Enumerable<RaceCreateWithoutEventInput>, Enumerable<RaceUncheckedCreateWithoutEventInput>>
    connectOrCreate?: Enumerable<RaceCreateOrConnectWithoutEventInput>
    upsert?: Enumerable<RaceUpsertWithWhereUniqueWithoutEventInput>
    createMany?: RaceCreateManyEventInputEnvelope
    set?: Enumerable<RaceWhereUniqueInput>
    disconnect?: Enumerable<RaceWhereUniqueInput>
    delete?: Enumerable<RaceWhereUniqueInput>
    connect?: Enumerable<RaceWhereUniqueInput>
    update?: Enumerable<RaceUpdateWithWhereUniqueWithoutEventInput>
    updateMany?: Enumerable<RaceUpdateManyWithWhereWithoutEventInput>
    deleteMany?: Enumerable<RaceScalarWhereInput>
  }

  export type ResultUpdateManyWithoutEventNestedInput = {
    create?: XOR<Enumerable<ResultCreateWithoutEventInput>, Enumerable<ResultUncheckedCreateWithoutEventInput>>
    connectOrCreate?: Enumerable<ResultCreateOrConnectWithoutEventInput>
    upsert?: Enumerable<ResultUpsertWithWhereUniqueWithoutEventInput>
    createMany?: ResultCreateManyEventInputEnvelope
    set?: Enumerable<ResultWhereUniqueInput>
    disconnect?: Enumerable<ResultWhereUniqueInput>
    delete?: Enumerable<ResultWhereUniqueInput>
    connect?: Enumerable<ResultWhereUniqueInput>
    update?: Enumerable<ResultUpdateWithWhereUniqueWithoutEventInput>
    updateMany?: Enumerable<ResultUpdateManyWithWhereWithoutEventInput>
    deleteMany?: Enumerable<ResultScalarWhereInput>
  }

  export type CompUpdateManyWithoutEventNestedInput = {
    create?: XOR<Enumerable<CompCreateWithoutEventInput>, Enumerable<CompUncheckedCreateWithoutEventInput>>
    connectOrCreate?: Enumerable<CompCreateOrConnectWithoutEventInput>
    upsert?: Enumerable<CompUpsertWithWhereUniqueWithoutEventInput>
    createMany?: CompCreateManyEventInputEnvelope
    set?: Enumerable<CompWhereUniqueInput>
    disconnect?: Enumerable<CompWhereUniqueInput>
    delete?: Enumerable<CompWhereUniqueInput>
    connect?: Enumerable<CompWhereUniqueInput>
    update?: Enumerable<CompUpdateWithWhereUniqueWithoutEventInput>
    updateMany?: Enumerable<CompUpdateManyWithWhereWithoutEventInput>
    deleteMany?: Enumerable<CompScalarWhereInput>
  }

  export type SeriesUpdateOneWithoutEventsNestedInput = {
    create?: XOR<SeriesCreateWithoutEventsInput, SeriesUncheckedCreateWithoutEventsInput>
    connectOrCreate?: SeriesCreateOrConnectWithoutEventsInput
    upsert?: SeriesUpsertWithoutEventsInput
    disconnect?: boolean
    delete?: boolean
    connect?: SeriesWhereUniqueInput
    update?: XOR<SeriesUpdateWithoutEventsInput, SeriesUncheckedUpdateWithoutEventsInput>
  }

  export type followUpdateManyWithoutEventNestedInput = {
    create?: XOR<Enumerable<followCreateWithoutEventInput>, Enumerable<followUncheckedCreateWithoutEventInput>>
    connectOrCreate?: Enumerable<followCreateOrConnectWithoutEventInput>
    upsert?: Enumerable<followUpsertWithWhereUniqueWithoutEventInput>
    createMany?: followCreateManyEventInputEnvelope
    set?: Enumerable<followWhereUniqueInput>
    disconnect?: Enumerable<followWhereUniqueInput>
    delete?: Enumerable<followWhereUniqueInput>
    connect?: Enumerable<followWhereUniqueInput>
    update?: Enumerable<followUpdateWithWhereUniqueWithoutEventInput>
    updateMany?: Enumerable<followUpdateManyWithWhereWithoutEventInput>
    deleteMany?: Enumerable<followScalarWhereInput>
  }

  export type likeUpdateManyWithoutEventNestedInput = {
    create?: XOR<Enumerable<likeCreateWithoutEventInput>, Enumerable<likeUncheckedCreateWithoutEventInput>>
    connectOrCreate?: Enumerable<likeCreateOrConnectWithoutEventInput>
    upsert?: Enumerable<likeUpsertWithWhereUniqueWithoutEventInput>
    createMany?: likeCreateManyEventInputEnvelope
    set?: Enumerable<likeWhereUniqueInput>
    disconnect?: Enumerable<likeWhereUniqueInput>
    delete?: Enumerable<likeWhereUniqueInput>
    connect?: Enumerable<likeWhereUniqueInput>
    update?: Enumerable<likeUpdateWithWhereUniqueWithoutEventInput>
    updateMany?: Enumerable<likeUpdateManyWithWhereWithoutEventInput>
    deleteMany?: Enumerable<likeScalarWhereInput>
  }

  export type RaceUncheckedUpdateManyWithoutEventNestedInput = {
    create?: XOR<Enumerable<RaceCreateWithoutEventInput>, Enumerable<RaceUncheckedCreateWithoutEventInput>>
    connectOrCreate?: Enumerable<RaceCreateOrConnectWithoutEventInput>
    upsert?: Enumerable<RaceUpsertWithWhereUniqueWithoutEventInput>
    createMany?: RaceCreateManyEventInputEnvelope
    set?: Enumerable<RaceWhereUniqueInput>
    disconnect?: Enumerable<RaceWhereUniqueInput>
    delete?: Enumerable<RaceWhereUniqueInput>
    connect?: Enumerable<RaceWhereUniqueInput>
    update?: Enumerable<RaceUpdateWithWhereUniqueWithoutEventInput>
    updateMany?: Enumerable<RaceUpdateManyWithWhereWithoutEventInput>
    deleteMany?: Enumerable<RaceScalarWhereInput>
  }

  export type ResultUncheckedUpdateManyWithoutEventNestedInput = {
    create?: XOR<Enumerable<ResultCreateWithoutEventInput>, Enumerable<ResultUncheckedCreateWithoutEventInput>>
    connectOrCreate?: Enumerable<ResultCreateOrConnectWithoutEventInput>
    upsert?: Enumerable<ResultUpsertWithWhereUniqueWithoutEventInput>
    createMany?: ResultCreateManyEventInputEnvelope
    set?: Enumerable<ResultWhereUniqueInput>
    disconnect?: Enumerable<ResultWhereUniqueInput>
    delete?: Enumerable<ResultWhereUniqueInput>
    connect?: Enumerable<ResultWhereUniqueInput>
    update?: Enumerable<ResultUpdateWithWhereUniqueWithoutEventInput>
    updateMany?: Enumerable<ResultUpdateManyWithWhereWithoutEventInput>
    deleteMany?: Enumerable<ResultScalarWhereInput>
  }

  export type CompUncheckedUpdateManyWithoutEventNestedInput = {
    create?: XOR<Enumerable<CompCreateWithoutEventInput>, Enumerable<CompUncheckedCreateWithoutEventInput>>
    connectOrCreate?: Enumerable<CompCreateOrConnectWithoutEventInput>
    upsert?: Enumerable<CompUpsertWithWhereUniqueWithoutEventInput>
    createMany?: CompCreateManyEventInputEnvelope
    set?: Enumerable<CompWhereUniqueInput>
    disconnect?: Enumerable<CompWhereUniqueInput>
    delete?: Enumerable<CompWhereUniqueInput>
    connect?: Enumerable<CompWhereUniqueInput>
    update?: Enumerable<CompUpdateWithWhereUniqueWithoutEventInput>
    updateMany?: Enumerable<CompUpdateManyWithWhereWithoutEventInput>
    deleteMany?: Enumerable<CompScalarWhereInput>
  }

  export type followUncheckedUpdateManyWithoutEventNestedInput = {
    create?: XOR<Enumerable<followCreateWithoutEventInput>, Enumerable<followUncheckedCreateWithoutEventInput>>
    connectOrCreate?: Enumerable<followCreateOrConnectWithoutEventInput>
    upsert?: Enumerable<followUpsertWithWhereUniqueWithoutEventInput>
    createMany?: followCreateManyEventInputEnvelope
    set?: Enumerable<followWhereUniqueInput>
    disconnect?: Enumerable<followWhereUniqueInput>
    delete?: Enumerable<followWhereUniqueInput>
    connect?: Enumerable<followWhereUniqueInput>
    update?: Enumerable<followUpdateWithWhereUniqueWithoutEventInput>
    updateMany?: Enumerable<followUpdateManyWithWhereWithoutEventInput>
    deleteMany?: Enumerable<followScalarWhereInput>
  }

  export type likeUncheckedUpdateManyWithoutEventNestedInput = {
    create?: XOR<Enumerable<likeCreateWithoutEventInput>, Enumerable<likeUncheckedCreateWithoutEventInput>>
    connectOrCreate?: Enumerable<likeCreateOrConnectWithoutEventInput>
    upsert?: Enumerable<likeUpsertWithWhereUniqueWithoutEventInput>
    createMany?: likeCreateManyEventInputEnvelope
    set?: Enumerable<likeWhereUniqueInput>
    disconnect?: Enumerable<likeWhereUniqueInput>
    delete?: Enumerable<likeWhereUniqueInput>
    connect?: Enumerable<likeWhereUniqueInput>
    update?: Enumerable<likeUpdateWithWhereUniqueWithoutEventInput>
    updateMany?: Enumerable<likeUpdateManyWithWhereWithoutEventInput>
    deleteMany?: Enumerable<likeScalarWhereInput>
  }

  export type EventCreateNestedOneWithoutRacesInput = {
    create?: XOR<EventCreateWithoutRacesInput, EventUncheckedCreateWithoutRacesInput>
    connectOrCreate?: EventCreateOrConnectWithoutRacesInput
    connect?: EventWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutRaceInput = {
    create?: XOR<UserCreateWithoutRaceInput, UserUncheckedCreateWithoutRaceInput>
    connectOrCreate?: UserCreateOrConnectWithoutRaceInput
    connect?: UserWhereUniqueInput
  }

  export type CompCreateNestedManyWithoutRacesInput = {
    create?: XOR<Enumerable<CompCreateWithoutRacesInput>, Enumerable<CompUncheckedCreateWithoutRacesInput>>
    connectOrCreate?: Enumerable<CompCreateOrConnectWithoutRacesInput>
    connect?: Enumerable<CompWhereUniqueInput>
  }

  export type ResultCreateNestedManyWithoutRaceInput = {
    create?: XOR<Enumerable<ResultCreateWithoutRaceInput>, Enumerable<ResultUncheckedCreateWithoutRaceInput>>
    connectOrCreate?: Enumerable<ResultCreateOrConnectWithoutRaceInput>
    createMany?: ResultCreateManyRaceInputEnvelope
    connect?: Enumerable<ResultWhereUniqueInput>
  }

  export type followCreateNestedManyWithoutRaceInput = {
    create?: XOR<Enumerable<followCreateWithoutRaceInput>, Enumerable<followUncheckedCreateWithoutRaceInput>>
    connectOrCreate?: Enumerable<followCreateOrConnectWithoutRaceInput>
    createMany?: followCreateManyRaceInputEnvelope
    connect?: Enumerable<followWhereUniqueInput>
  }

  export type likeCreateNestedManyWithoutRaceInput = {
    create?: XOR<Enumerable<likeCreateWithoutRaceInput>, Enumerable<likeUncheckedCreateWithoutRaceInput>>
    connectOrCreate?: Enumerable<likeCreateOrConnectWithoutRaceInput>
    createMany?: likeCreateManyRaceInputEnvelope
    connect?: Enumerable<likeWhereUniqueInput>
  }

  export type CompUncheckedCreateNestedManyWithoutRacesInput = {
    create?: XOR<Enumerable<CompCreateWithoutRacesInput>, Enumerable<CompUncheckedCreateWithoutRacesInput>>
    connectOrCreate?: Enumerable<CompCreateOrConnectWithoutRacesInput>
    connect?: Enumerable<CompWhereUniqueInput>
  }

  export type ResultUncheckedCreateNestedManyWithoutRaceInput = {
    create?: XOR<Enumerable<ResultCreateWithoutRaceInput>, Enumerable<ResultUncheckedCreateWithoutRaceInput>>
    connectOrCreate?: Enumerable<ResultCreateOrConnectWithoutRaceInput>
    createMany?: ResultCreateManyRaceInputEnvelope
    connect?: Enumerable<ResultWhereUniqueInput>
  }

  export type followUncheckedCreateNestedManyWithoutRaceInput = {
    create?: XOR<Enumerable<followCreateWithoutRaceInput>, Enumerable<followUncheckedCreateWithoutRaceInput>>
    connectOrCreate?: Enumerable<followCreateOrConnectWithoutRaceInput>
    createMany?: followCreateManyRaceInputEnvelope
    connect?: Enumerable<followWhereUniqueInput>
  }

  export type likeUncheckedCreateNestedManyWithoutRaceInput = {
    create?: XOR<Enumerable<likeCreateWithoutRaceInput>, Enumerable<likeUncheckedCreateWithoutRaceInput>>
    connectOrCreate?: Enumerable<likeCreateOrConnectWithoutRaceInput>
    createMany?: likeCreateManyRaceInputEnvelope
    connect?: Enumerable<likeWhereUniqueInput>
  }

  export type EventUpdateOneWithoutRacesNestedInput = {
    create?: XOR<EventCreateWithoutRacesInput, EventUncheckedCreateWithoutRacesInput>
    connectOrCreate?: EventCreateOrConnectWithoutRacesInput
    upsert?: EventUpsertWithoutRacesInput
    disconnect?: boolean
    delete?: boolean
    connect?: EventWhereUniqueInput
    update?: XOR<EventUpdateWithoutRacesInput, EventUncheckedUpdateWithoutRacesInput>
  }

  export type UserUpdateOneWithoutRaceNestedInput = {
    create?: XOR<UserCreateWithoutRaceInput, UserUncheckedCreateWithoutRaceInput>
    connectOrCreate?: UserCreateOrConnectWithoutRaceInput
    upsert?: UserUpsertWithoutRaceInput
    disconnect?: boolean
    delete?: boolean
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutRaceInput, UserUncheckedUpdateWithoutRaceInput>
  }

  export type CompUpdateManyWithoutRacesNestedInput = {
    create?: XOR<Enumerable<CompCreateWithoutRacesInput>, Enumerable<CompUncheckedCreateWithoutRacesInput>>
    connectOrCreate?: Enumerable<CompCreateOrConnectWithoutRacesInput>
    upsert?: Enumerable<CompUpsertWithWhereUniqueWithoutRacesInput>
    set?: Enumerable<CompWhereUniqueInput>
    disconnect?: Enumerable<CompWhereUniqueInput>
    delete?: Enumerable<CompWhereUniqueInput>
    connect?: Enumerable<CompWhereUniqueInput>
    update?: Enumerable<CompUpdateWithWhereUniqueWithoutRacesInput>
    updateMany?: Enumerable<CompUpdateManyWithWhereWithoutRacesInput>
    deleteMany?: Enumerable<CompScalarWhereInput>
  }

  export type ResultUpdateManyWithoutRaceNestedInput = {
    create?: XOR<Enumerable<ResultCreateWithoutRaceInput>, Enumerable<ResultUncheckedCreateWithoutRaceInput>>
    connectOrCreate?: Enumerable<ResultCreateOrConnectWithoutRaceInput>
    upsert?: Enumerable<ResultUpsertWithWhereUniqueWithoutRaceInput>
    createMany?: ResultCreateManyRaceInputEnvelope
    set?: Enumerable<ResultWhereUniqueInput>
    disconnect?: Enumerable<ResultWhereUniqueInput>
    delete?: Enumerable<ResultWhereUniqueInput>
    connect?: Enumerable<ResultWhereUniqueInput>
    update?: Enumerable<ResultUpdateWithWhereUniqueWithoutRaceInput>
    updateMany?: Enumerable<ResultUpdateManyWithWhereWithoutRaceInput>
    deleteMany?: Enumerable<ResultScalarWhereInput>
  }

  export type followUpdateManyWithoutRaceNestedInput = {
    create?: XOR<Enumerable<followCreateWithoutRaceInput>, Enumerable<followUncheckedCreateWithoutRaceInput>>
    connectOrCreate?: Enumerable<followCreateOrConnectWithoutRaceInput>
    upsert?: Enumerable<followUpsertWithWhereUniqueWithoutRaceInput>
    createMany?: followCreateManyRaceInputEnvelope
    set?: Enumerable<followWhereUniqueInput>
    disconnect?: Enumerable<followWhereUniqueInput>
    delete?: Enumerable<followWhereUniqueInput>
    connect?: Enumerable<followWhereUniqueInput>
    update?: Enumerable<followUpdateWithWhereUniqueWithoutRaceInput>
    updateMany?: Enumerable<followUpdateManyWithWhereWithoutRaceInput>
    deleteMany?: Enumerable<followScalarWhereInput>
  }

  export type likeUpdateManyWithoutRaceNestedInput = {
    create?: XOR<Enumerable<likeCreateWithoutRaceInput>, Enumerable<likeUncheckedCreateWithoutRaceInput>>
    connectOrCreate?: Enumerable<likeCreateOrConnectWithoutRaceInput>
    upsert?: Enumerable<likeUpsertWithWhereUniqueWithoutRaceInput>
    createMany?: likeCreateManyRaceInputEnvelope
    set?: Enumerable<likeWhereUniqueInput>
    disconnect?: Enumerable<likeWhereUniqueInput>
    delete?: Enumerable<likeWhereUniqueInput>
    connect?: Enumerable<likeWhereUniqueInput>
    update?: Enumerable<likeUpdateWithWhereUniqueWithoutRaceInput>
    updateMany?: Enumerable<likeUpdateManyWithWhereWithoutRaceInput>
    deleteMany?: Enumerable<likeScalarWhereInput>
  }

  export type CompUncheckedUpdateManyWithoutRacesNestedInput = {
    create?: XOR<Enumerable<CompCreateWithoutRacesInput>, Enumerable<CompUncheckedCreateWithoutRacesInput>>
    connectOrCreate?: Enumerable<CompCreateOrConnectWithoutRacesInput>
    upsert?: Enumerable<CompUpsertWithWhereUniqueWithoutRacesInput>
    set?: Enumerable<CompWhereUniqueInput>
    disconnect?: Enumerable<CompWhereUniqueInput>
    delete?: Enumerable<CompWhereUniqueInput>
    connect?: Enumerable<CompWhereUniqueInput>
    update?: Enumerable<CompUpdateWithWhereUniqueWithoutRacesInput>
    updateMany?: Enumerable<CompUpdateManyWithWhereWithoutRacesInput>
    deleteMany?: Enumerable<CompScalarWhereInput>
  }

  export type ResultUncheckedUpdateManyWithoutRaceNestedInput = {
    create?: XOR<Enumerable<ResultCreateWithoutRaceInput>, Enumerable<ResultUncheckedCreateWithoutRaceInput>>
    connectOrCreate?: Enumerable<ResultCreateOrConnectWithoutRaceInput>
    upsert?: Enumerable<ResultUpsertWithWhereUniqueWithoutRaceInput>
    createMany?: ResultCreateManyRaceInputEnvelope
    set?: Enumerable<ResultWhereUniqueInput>
    disconnect?: Enumerable<ResultWhereUniqueInput>
    delete?: Enumerable<ResultWhereUniqueInput>
    connect?: Enumerable<ResultWhereUniqueInput>
    update?: Enumerable<ResultUpdateWithWhereUniqueWithoutRaceInput>
    updateMany?: Enumerable<ResultUpdateManyWithWhereWithoutRaceInput>
    deleteMany?: Enumerable<ResultScalarWhereInput>
  }

  export type followUncheckedUpdateManyWithoutRaceNestedInput = {
    create?: XOR<Enumerable<followCreateWithoutRaceInput>, Enumerable<followUncheckedCreateWithoutRaceInput>>
    connectOrCreate?: Enumerable<followCreateOrConnectWithoutRaceInput>
    upsert?: Enumerable<followUpsertWithWhereUniqueWithoutRaceInput>
    createMany?: followCreateManyRaceInputEnvelope
    set?: Enumerable<followWhereUniqueInput>
    disconnect?: Enumerable<followWhereUniqueInput>
    delete?: Enumerable<followWhereUniqueInput>
    connect?: Enumerable<followWhereUniqueInput>
    update?: Enumerable<followUpdateWithWhereUniqueWithoutRaceInput>
    updateMany?: Enumerable<followUpdateManyWithWhereWithoutRaceInput>
    deleteMany?: Enumerable<followScalarWhereInput>
  }

  export type likeUncheckedUpdateManyWithoutRaceNestedInput = {
    create?: XOR<Enumerable<likeCreateWithoutRaceInput>, Enumerable<likeUncheckedCreateWithoutRaceInput>>
    connectOrCreate?: Enumerable<likeCreateOrConnectWithoutRaceInput>
    upsert?: Enumerable<likeUpsertWithWhereUniqueWithoutRaceInput>
    createMany?: likeCreateManyRaceInputEnvelope
    set?: Enumerable<likeWhereUniqueInput>
    disconnect?: Enumerable<likeWhereUniqueInput>
    delete?: Enumerable<likeWhereUniqueInput>
    connect?: Enumerable<likeWhereUniqueInput>
    update?: Enumerable<likeUpdateWithWhereUniqueWithoutRaceInput>
    updateMany?: Enumerable<likeUpdateManyWithWhereWithoutRaceInput>
    deleteMany?: Enumerable<likeScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutCompInput = {
    create?: XOR<UserCreateWithoutCompInput, UserUncheckedCreateWithoutCompInput>
    connectOrCreate?: UserCreateOrConnectWithoutCompInput
    connect?: UserWhereUniqueInput
  }

  export type EventCreateNestedOneWithoutCompsInput = {
    create?: XOR<EventCreateWithoutCompsInput, EventUncheckedCreateWithoutCompsInput>
    connectOrCreate?: EventCreateOrConnectWithoutCompsInput
    connect?: EventWhereUniqueInput
  }

  export type ResultCreateNestedManyWithoutCompInput = {
    create?: XOR<Enumerable<ResultCreateWithoutCompInput>, Enumerable<ResultUncheckedCreateWithoutCompInput>>
    connectOrCreate?: Enumerable<ResultCreateOrConnectWithoutCompInput>
    createMany?: ResultCreateManyCompInputEnvelope
    connect?: Enumerable<ResultWhereUniqueInput>
  }

  export type RaceCreateNestedManyWithoutCompsInput = {
    create?: XOR<Enumerable<RaceCreateWithoutCompsInput>, Enumerable<RaceUncheckedCreateWithoutCompsInput>>
    connectOrCreate?: Enumerable<RaceCreateOrConnectWithoutCompsInput>
    connect?: Enumerable<RaceWhereUniqueInput>
  }

  export type followCreateNestedManyWithoutCompInput = {
    create?: XOR<Enumerable<followCreateWithoutCompInput>, Enumerable<followUncheckedCreateWithoutCompInput>>
    connectOrCreate?: Enumerable<followCreateOrConnectWithoutCompInput>
    createMany?: followCreateManyCompInputEnvelope
    connect?: Enumerable<followWhereUniqueInput>
  }

  export type likeCreateNestedManyWithoutCompInput = {
    create?: XOR<Enumerable<likeCreateWithoutCompInput>, Enumerable<likeUncheckedCreateWithoutCompInput>>
    connectOrCreate?: Enumerable<likeCreateOrConnectWithoutCompInput>
    createMany?: likeCreateManyCompInputEnvelope
    connect?: Enumerable<likeWhereUniqueInput>
  }

  export type ResultUncheckedCreateNestedManyWithoutCompInput = {
    create?: XOR<Enumerable<ResultCreateWithoutCompInput>, Enumerable<ResultUncheckedCreateWithoutCompInput>>
    connectOrCreate?: Enumerable<ResultCreateOrConnectWithoutCompInput>
    createMany?: ResultCreateManyCompInputEnvelope
    connect?: Enumerable<ResultWhereUniqueInput>
  }

  export type RaceUncheckedCreateNestedManyWithoutCompsInput = {
    create?: XOR<Enumerable<RaceCreateWithoutCompsInput>, Enumerable<RaceUncheckedCreateWithoutCompsInput>>
    connectOrCreate?: Enumerable<RaceCreateOrConnectWithoutCompsInput>
    connect?: Enumerable<RaceWhereUniqueInput>
  }

  export type followUncheckedCreateNestedManyWithoutCompInput = {
    create?: XOR<Enumerable<followCreateWithoutCompInput>, Enumerable<followUncheckedCreateWithoutCompInput>>
    connectOrCreate?: Enumerable<followCreateOrConnectWithoutCompInput>
    createMany?: followCreateManyCompInputEnvelope
    connect?: Enumerable<followWhereUniqueInput>
  }

  export type likeUncheckedCreateNestedManyWithoutCompInput = {
    create?: XOR<Enumerable<likeCreateWithoutCompInput>, Enumerable<likeUncheckedCreateWithoutCompInput>>
    connectOrCreate?: Enumerable<likeCreateOrConnectWithoutCompInput>
    createMany?: likeCreateManyCompInputEnvelope
    connect?: Enumerable<likeWhereUniqueInput>
  }

  export type UserUpdateOneWithoutCompNestedInput = {
    create?: XOR<UserCreateWithoutCompInput, UserUncheckedCreateWithoutCompInput>
    connectOrCreate?: UserCreateOrConnectWithoutCompInput
    upsert?: UserUpsertWithoutCompInput
    disconnect?: boolean
    delete?: boolean
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutCompInput, UserUncheckedUpdateWithoutCompInput>
  }

  export type EventUpdateOneWithoutCompsNestedInput = {
    create?: XOR<EventCreateWithoutCompsInput, EventUncheckedCreateWithoutCompsInput>
    connectOrCreate?: EventCreateOrConnectWithoutCompsInput
    upsert?: EventUpsertWithoutCompsInput
    disconnect?: boolean
    delete?: boolean
    connect?: EventWhereUniqueInput
    update?: XOR<EventUpdateWithoutCompsInput, EventUncheckedUpdateWithoutCompsInput>
  }

  export type ResultUpdateManyWithoutCompNestedInput = {
    create?: XOR<Enumerable<ResultCreateWithoutCompInput>, Enumerable<ResultUncheckedCreateWithoutCompInput>>
    connectOrCreate?: Enumerable<ResultCreateOrConnectWithoutCompInput>
    upsert?: Enumerable<ResultUpsertWithWhereUniqueWithoutCompInput>
    createMany?: ResultCreateManyCompInputEnvelope
    set?: Enumerable<ResultWhereUniqueInput>
    disconnect?: Enumerable<ResultWhereUniqueInput>
    delete?: Enumerable<ResultWhereUniqueInput>
    connect?: Enumerable<ResultWhereUniqueInput>
    update?: Enumerable<ResultUpdateWithWhereUniqueWithoutCompInput>
    updateMany?: Enumerable<ResultUpdateManyWithWhereWithoutCompInput>
    deleteMany?: Enumerable<ResultScalarWhereInput>
  }

  export type RaceUpdateManyWithoutCompsNestedInput = {
    create?: XOR<Enumerable<RaceCreateWithoutCompsInput>, Enumerable<RaceUncheckedCreateWithoutCompsInput>>
    connectOrCreate?: Enumerable<RaceCreateOrConnectWithoutCompsInput>
    upsert?: Enumerable<RaceUpsertWithWhereUniqueWithoutCompsInput>
    set?: Enumerable<RaceWhereUniqueInput>
    disconnect?: Enumerable<RaceWhereUniqueInput>
    delete?: Enumerable<RaceWhereUniqueInput>
    connect?: Enumerable<RaceWhereUniqueInput>
    update?: Enumerable<RaceUpdateWithWhereUniqueWithoutCompsInput>
    updateMany?: Enumerable<RaceUpdateManyWithWhereWithoutCompsInput>
    deleteMany?: Enumerable<RaceScalarWhereInput>
  }

  export type followUpdateManyWithoutCompNestedInput = {
    create?: XOR<Enumerable<followCreateWithoutCompInput>, Enumerable<followUncheckedCreateWithoutCompInput>>
    connectOrCreate?: Enumerable<followCreateOrConnectWithoutCompInput>
    upsert?: Enumerable<followUpsertWithWhereUniqueWithoutCompInput>
    createMany?: followCreateManyCompInputEnvelope
    set?: Enumerable<followWhereUniqueInput>
    disconnect?: Enumerable<followWhereUniqueInput>
    delete?: Enumerable<followWhereUniqueInput>
    connect?: Enumerable<followWhereUniqueInput>
    update?: Enumerable<followUpdateWithWhereUniqueWithoutCompInput>
    updateMany?: Enumerable<followUpdateManyWithWhereWithoutCompInput>
    deleteMany?: Enumerable<followScalarWhereInput>
  }

  export type likeUpdateManyWithoutCompNestedInput = {
    create?: XOR<Enumerable<likeCreateWithoutCompInput>, Enumerable<likeUncheckedCreateWithoutCompInput>>
    connectOrCreate?: Enumerable<likeCreateOrConnectWithoutCompInput>
    upsert?: Enumerable<likeUpsertWithWhereUniqueWithoutCompInput>
    createMany?: likeCreateManyCompInputEnvelope
    set?: Enumerable<likeWhereUniqueInput>
    disconnect?: Enumerable<likeWhereUniqueInput>
    delete?: Enumerable<likeWhereUniqueInput>
    connect?: Enumerable<likeWhereUniqueInput>
    update?: Enumerable<likeUpdateWithWhereUniqueWithoutCompInput>
    updateMany?: Enumerable<likeUpdateManyWithWhereWithoutCompInput>
    deleteMany?: Enumerable<likeScalarWhereInput>
  }

  export type ResultUncheckedUpdateManyWithoutCompNestedInput = {
    create?: XOR<Enumerable<ResultCreateWithoutCompInput>, Enumerable<ResultUncheckedCreateWithoutCompInput>>
    connectOrCreate?: Enumerable<ResultCreateOrConnectWithoutCompInput>
    upsert?: Enumerable<ResultUpsertWithWhereUniqueWithoutCompInput>
    createMany?: ResultCreateManyCompInputEnvelope
    set?: Enumerable<ResultWhereUniqueInput>
    disconnect?: Enumerable<ResultWhereUniqueInput>
    delete?: Enumerable<ResultWhereUniqueInput>
    connect?: Enumerable<ResultWhereUniqueInput>
    update?: Enumerable<ResultUpdateWithWhereUniqueWithoutCompInput>
    updateMany?: Enumerable<ResultUpdateManyWithWhereWithoutCompInput>
    deleteMany?: Enumerable<ResultScalarWhereInput>
  }

  export type RaceUncheckedUpdateManyWithoutCompsNestedInput = {
    create?: XOR<Enumerable<RaceCreateWithoutCompsInput>, Enumerable<RaceUncheckedCreateWithoutCompsInput>>
    connectOrCreate?: Enumerable<RaceCreateOrConnectWithoutCompsInput>
    upsert?: Enumerable<RaceUpsertWithWhereUniqueWithoutCompsInput>
    set?: Enumerable<RaceWhereUniqueInput>
    disconnect?: Enumerable<RaceWhereUniqueInput>
    delete?: Enumerable<RaceWhereUniqueInput>
    connect?: Enumerable<RaceWhereUniqueInput>
    update?: Enumerable<RaceUpdateWithWhereUniqueWithoutCompsInput>
    updateMany?: Enumerable<RaceUpdateManyWithWhereWithoutCompsInput>
    deleteMany?: Enumerable<RaceScalarWhereInput>
  }

  export type followUncheckedUpdateManyWithoutCompNestedInput = {
    create?: XOR<Enumerable<followCreateWithoutCompInput>, Enumerable<followUncheckedCreateWithoutCompInput>>
    connectOrCreate?: Enumerable<followCreateOrConnectWithoutCompInput>
    upsert?: Enumerable<followUpsertWithWhereUniqueWithoutCompInput>
    createMany?: followCreateManyCompInputEnvelope
    set?: Enumerable<followWhereUniqueInput>
    disconnect?: Enumerable<followWhereUniqueInput>
    delete?: Enumerable<followWhereUniqueInput>
    connect?: Enumerable<followWhereUniqueInput>
    update?: Enumerable<followUpdateWithWhereUniqueWithoutCompInput>
    updateMany?: Enumerable<followUpdateManyWithWhereWithoutCompInput>
    deleteMany?: Enumerable<followScalarWhereInput>
  }

  export type likeUncheckedUpdateManyWithoutCompNestedInput = {
    create?: XOR<Enumerable<likeCreateWithoutCompInput>, Enumerable<likeUncheckedCreateWithoutCompInput>>
    connectOrCreate?: Enumerable<likeCreateOrConnectWithoutCompInput>
    upsert?: Enumerable<likeUpsertWithWhereUniqueWithoutCompInput>
    createMany?: likeCreateManyCompInputEnvelope
    set?: Enumerable<likeWhereUniqueInput>
    disconnect?: Enumerable<likeWhereUniqueInput>
    delete?: Enumerable<likeWhereUniqueInput>
    connect?: Enumerable<likeWhereUniqueInput>
    update?: Enumerable<likeUpdateWithWhereUniqueWithoutCompInput>
    updateMany?: Enumerable<likeUpdateManyWithWhereWithoutCompInput>
    deleteMany?: Enumerable<likeScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutResultInput = {
    create?: XOR<UserCreateWithoutResultInput, UserUncheckedCreateWithoutResultInput>
    connectOrCreate?: UserCreateOrConnectWithoutResultInput
    connect?: UserWhereUniqueInput
  }

  export type EventCreateNestedOneWithoutResultsInput = {
    create?: XOR<EventCreateWithoutResultsInput, EventUncheckedCreateWithoutResultsInput>
    connectOrCreate?: EventCreateOrConnectWithoutResultsInput
    connect?: EventWhereUniqueInput
  }

  export type CompCreateNestedOneWithoutResultsInput = {
    create?: XOR<CompCreateWithoutResultsInput, CompUncheckedCreateWithoutResultsInput>
    connectOrCreate?: CompCreateOrConnectWithoutResultsInput
    connect?: CompWhereUniqueInput
  }

  export type RaceCreateNestedOneWithoutResultsInput = {
    create?: XOR<RaceCreateWithoutResultsInput, RaceUncheckedCreateWithoutResultsInput>
    connectOrCreate?: RaceCreateOrConnectWithoutResultsInput
    connect?: RaceWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutResultNestedInput = {
    create?: XOR<UserCreateWithoutResultInput, UserUncheckedCreateWithoutResultInput>
    connectOrCreate?: UserCreateOrConnectWithoutResultInput
    upsert?: UserUpsertWithoutResultInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutResultInput, UserUncheckedUpdateWithoutResultInput>
  }

  export type EventUpdateOneWithoutResultsNestedInput = {
    create?: XOR<EventCreateWithoutResultsInput, EventUncheckedCreateWithoutResultsInput>
    connectOrCreate?: EventCreateOrConnectWithoutResultsInput
    upsert?: EventUpsertWithoutResultsInput
    disconnect?: boolean
    delete?: boolean
    connect?: EventWhereUniqueInput
    update?: XOR<EventUpdateWithoutResultsInput, EventUncheckedUpdateWithoutResultsInput>
  }

  export type CompUpdateOneWithoutResultsNestedInput = {
    create?: XOR<CompCreateWithoutResultsInput, CompUncheckedCreateWithoutResultsInput>
    connectOrCreate?: CompCreateOrConnectWithoutResultsInput
    upsert?: CompUpsertWithoutResultsInput
    disconnect?: boolean
    delete?: boolean
    connect?: CompWhereUniqueInput
    update?: XOR<CompUpdateWithoutResultsInput, CompUncheckedUpdateWithoutResultsInput>
  }

  export type RaceUpdateOneWithoutResultsNestedInput = {
    create?: XOR<RaceCreateWithoutResultsInput, RaceUncheckedCreateWithoutResultsInput>
    connectOrCreate?: RaceCreateOrConnectWithoutResultsInput
    upsert?: RaceUpsertWithoutResultsInput
    disconnect?: boolean
    delete?: boolean
    connect?: RaceWhereUniqueInput
    update?: XOR<RaceUpdateWithoutResultsInput, RaceUncheckedUpdateWithoutResultsInput>
  }

  export type UserCreateNestedOneWithoutOrganizationInput = {
    create?: XOR<UserCreateWithoutOrganizationInput, UserUncheckedCreateWithoutOrganizationInput>
    connectOrCreate?: UserCreateOrConnectWithoutOrganizationInput
    connect?: UserWhereUniqueInput
  }

  export type SeriesCreateNestedManyWithoutOrgInput = {
    create?: XOR<Enumerable<SeriesCreateWithoutOrgInput>, Enumerable<SeriesUncheckedCreateWithoutOrgInput>>
    connectOrCreate?: Enumerable<SeriesCreateOrConnectWithoutOrgInput>
    createMany?: SeriesCreateManyOrgInputEnvelope
    connect?: Enumerable<SeriesWhereUniqueInput>
  }

  export type EventCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<Enumerable<EventCreateWithoutOrganizationInput>, Enumerable<EventUncheckedCreateWithoutOrganizationInput>>
    connectOrCreate?: Enumerable<EventCreateOrConnectWithoutOrganizationInput>
    createMany?: EventCreateManyOrganizationInputEnvelope
    connect?: Enumerable<EventWhereUniqueInput>
  }

  export type followCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<Enumerable<followCreateWithoutOrganizationInput>, Enumerable<followUncheckedCreateWithoutOrganizationInput>>
    connectOrCreate?: Enumerable<followCreateOrConnectWithoutOrganizationInput>
    createMany?: followCreateManyOrganizationInputEnvelope
    connect?: Enumerable<followWhereUniqueInput>
  }

  export type likeCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<Enumerable<likeCreateWithoutOrganizationInput>, Enumerable<likeUncheckedCreateWithoutOrganizationInput>>
    connectOrCreate?: Enumerable<likeCreateOrConnectWithoutOrganizationInput>
    createMany?: likeCreateManyOrganizationInputEnvelope
    connect?: Enumerable<likeWhereUniqueInput>
  }

  export type SeriesUncheckedCreateNestedManyWithoutOrgInput = {
    create?: XOR<Enumerable<SeriesCreateWithoutOrgInput>, Enumerable<SeriesUncheckedCreateWithoutOrgInput>>
    connectOrCreate?: Enumerable<SeriesCreateOrConnectWithoutOrgInput>
    createMany?: SeriesCreateManyOrgInputEnvelope
    connect?: Enumerable<SeriesWhereUniqueInput>
  }

  export type EventUncheckedCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<Enumerable<EventCreateWithoutOrganizationInput>, Enumerable<EventUncheckedCreateWithoutOrganizationInput>>
    connectOrCreate?: Enumerable<EventCreateOrConnectWithoutOrganizationInput>
    createMany?: EventCreateManyOrganizationInputEnvelope
    connect?: Enumerable<EventWhereUniqueInput>
  }

  export type followUncheckedCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<Enumerable<followCreateWithoutOrganizationInput>, Enumerable<followUncheckedCreateWithoutOrganizationInput>>
    connectOrCreate?: Enumerable<followCreateOrConnectWithoutOrganizationInput>
    createMany?: followCreateManyOrganizationInputEnvelope
    connect?: Enumerable<followWhereUniqueInput>
  }

  export type likeUncheckedCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<Enumerable<likeCreateWithoutOrganizationInput>, Enumerable<likeUncheckedCreateWithoutOrganizationInput>>
    connectOrCreate?: Enumerable<likeCreateOrConnectWithoutOrganizationInput>
    createMany?: likeCreateManyOrganizationInputEnvelope
    connect?: Enumerable<likeWhereUniqueInput>
  }

  export type UserUpdateOneWithoutOrganizationNestedInput = {
    create?: XOR<UserCreateWithoutOrganizationInput, UserUncheckedCreateWithoutOrganizationInput>
    connectOrCreate?: UserCreateOrConnectWithoutOrganizationInput
    upsert?: UserUpsertWithoutOrganizationInput
    disconnect?: boolean
    delete?: boolean
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutOrganizationInput, UserUncheckedUpdateWithoutOrganizationInput>
  }

  export type SeriesUpdateManyWithoutOrgNestedInput = {
    create?: XOR<Enumerable<SeriesCreateWithoutOrgInput>, Enumerable<SeriesUncheckedCreateWithoutOrgInput>>
    connectOrCreate?: Enumerable<SeriesCreateOrConnectWithoutOrgInput>
    upsert?: Enumerable<SeriesUpsertWithWhereUniqueWithoutOrgInput>
    createMany?: SeriesCreateManyOrgInputEnvelope
    set?: Enumerable<SeriesWhereUniqueInput>
    disconnect?: Enumerable<SeriesWhereUniqueInput>
    delete?: Enumerable<SeriesWhereUniqueInput>
    connect?: Enumerable<SeriesWhereUniqueInput>
    update?: Enumerable<SeriesUpdateWithWhereUniqueWithoutOrgInput>
    updateMany?: Enumerable<SeriesUpdateManyWithWhereWithoutOrgInput>
    deleteMany?: Enumerable<SeriesScalarWhereInput>
  }

  export type EventUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<Enumerable<EventCreateWithoutOrganizationInput>, Enumerable<EventUncheckedCreateWithoutOrganizationInput>>
    connectOrCreate?: Enumerable<EventCreateOrConnectWithoutOrganizationInput>
    upsert?: Enumerable<EventUpsertWithWhereUniqueWithoutOrganizationInput>
    createMany?: EventCreateManyOrganizationInputEnvelope
    set?: Enumerable<EventWhereUniqueInput>
    disconnect?: Enumerable<EventWhereUniqueInput>
    delete?: Enumerable<EventWhereUniqueInput>
    connect?: Enumerable<EventWhereUniqueInput>
    update?: Enumerable<EventUpdateWithWhereUniqueWithoutOrganizationInput>
    updateMany?: Enumerable<EventUpdateManyWithWhereWithoutOrganizationInput>
    deleteMany?: Enumerable<EventScalarWhereInput>
  }

  export type followUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<Enumerable<followCreateWithoutOrganizationInput>, Enumerable<followUncheckedCreateWithoutOrganizationInput>>
    connectOrCreate?: Enumerable<followCreateOrConnectWithoutOrganizationInput>
    upsert?: Enumerable<followUpsertWithWhereUniqueWithoutOrganizationInput>
    createMany?: followCreateManyOrganizationInputEnvelope
    set?: Enumerable<followWhereUniqueInput>
    disconnect?: Enumerable<followWhereUniqueInput>
    delete?: Enumerable<followWhereUniqueInput>
    connect?: Enumerable<followWhereUniqueInput>
    update?: Enumerable<followUpdateWithWhereUniqueWithoutOrganizationInput>
    updateMany?: Enumerable<followUpdateManyWithWhereWithoutOrganizationInput>
    deleteMany?: Enumerable<followScalarWhereInput>
  }

  export type likeUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<Enumerable<likeCreateWithoutOrganizationInput>, Enumerable<likeUncheckedCreateWithoutOrganizationInput>>
    connectOrCreate?: Enumerable<likeCreateOrConnectWithoutOrganizationInput>
    upsert?: Enumerable<likeUpsertWithWhereUniqueWithoutOrganizationInput>
    createMany?: likeCreateManyOrganizationInputEnvelope
    set?: Enumerable<likeWhereUniqueInput>
    disconnect?: Enumerable<likeWhereUniqueInput>
    delete?: Enumerable<likeWhereUniqueInput>
    connect?: Enumerable<likeWhereUniqueInput>
    update?: Enumerable<likeUpdateWithWhereUniqueWithoutOrganizationInput>
    updateMany?: Enumerable<likeUpdateManyWithWhereWithoutOrganizationInput>
    deleteMany?: Enumerable<likeScalarWhereInput>
  }

  export type SeriesUncheckedUpdateManyWithoutOrgNestedInput = {
    create?: XOR<Enumerable<SeriesCreateWithoutOrgInput>, Enumerable<SeriesUncheckedCreateWithoutOrgInput>>
    connectOrCreate?: Enumerable<SeriesCreateOrConnectWithoutOrgInput>
    upsert?: Enumerable<SeriesUpsertWithWhereUniqueWithoutOrgInput>
    createMany?: SeriesCreateManyOrgInputEnvelope
    set?: Enumerable<SeriesWhereUniqueInput>
    disconnect?: Enumerable<SeriesWhereUniqueInput>
    delete?: Enumerable<SeriesWhereUniqueInput>
    connect?: Enumerable<SeriesWhereUniqueInput>
    update?: Enumerable<SeriesUpdateWithWhereUniqueWithoutOrgInput>
    updateMany?: Enumerable<SeriesUpdateManyWithWhereWithoutOrgInput>
    deleteMany?: Enumerable<SeriesScalarWhereInput>
  }

  export type EventUncheckedUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<Enumerable<EventCreateWithoutOrganizationInput>, Enumerable<EventUncheckedCreateWithoutOrganizationInput>>
    connectOrCreate?: Enumerable<EventCreateOrConnectWithoutOrganizationInput>
    upsert?: Enumerable<EventUpsertWithWhereUniqueWithoutOrganizationInput>
    createMany?: EventCreateManyOrganizationInputEnvelope
    set?: Enumerable<EventWhereUniqueInput>
    disconnect?: Enumerable<EventWhereUniqueInput>
    delete?: Enumerable<EventWhereUniqueInput>
    connect?: Enumerable<EventWhereUniqueInput>
    update?: Enumerable<EventUpdateWithWhereUniqueWithoutOrganizationInput>
    updateMany?: Enumerable<EventUpdateManyWithWhereWithoutOrganizationInput>
    deleteMany?: Enumerable<EventScalarWhereInput>
  }

  export type followUncheckedUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<Enumerable<followCreateWithoutOrganizationInput>, Enumerable<followUncheckedCreateWithoutOrganizationInput>>
    connectOrCreate?: Enumerable<followCreateOrConnectWithoutOrganizationInput>
    upsert?: Enumerable<followUpsertWithWhereUniqueWithoutOrganizationInput>
    createMany?: followCreateManyOrganizationInputEnvelope
    set?: Enumerable<followWhereUniqueInput>
    disconnect?: Enumerable<followWhereUniqueInput>
    delete?: Enumerable<followWhereUniqueInput>
    connect?: Enumerable<followWhereUniqueInput>
    update?: Enumerable<followUpdateWithWhereUniqueWithoutOrganizationInput>
    updateMany?: Enumerable<followUpdateManyWithWhereWithoutOrganizationInput>
    deleteMany?: Enumerable<followScalarWhereInput>
  }

  export type likeUncheckedUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<Enumerable<likeCreateWithoutOrganizationInput>, Enumerable<likeUncheckedCreateWithoutOrganizationInput>>
    connectOrCreate?: Enumerable<likeCreateOrConnectWithoutOrganizationInput>
    upsert?: Enumerable<likeUpsertWithWhereUniqueWithoutOrganizationInput>
    createMany?: likeCreateManyOrganizationInputEnvelope
    set?: Enumerable<likeWhereUniqueInput>
    disconnect?: Enumerable<likeWhereUniqueInput>
    delete?: Enumerable<likeWhereUniqueInput>
    connect?: Enumerable<likeWhereUniqueInput>
    update?: Enumerable<likeUpdateWithWhereUniqueWithoutOrganizationInput>
    updateMany?: Enumerable<likeUpdateManyWithWhereWithoutOrganizationInput>
    deleteMany?: Enumerable<likeScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutFollowInput = {
    create?: XOR<UserCreateWithoutFollowInput, UserUncheckedCreateWithoutFollowInput>
    connectOrCreate?: UserCreateOrConnectWithoutFollowInput
    connect?: UserWhereUniqueInput
  }

  export type SeriesCreateNestedOneWithoutFollowInput = {
    create?: XOR<SeriesCreateWithoutFollowInput, SeriesUncheckedCreateWithoutFollowInput>
    connectOrCreate?: SeriesCreateOrConnectWithoutFollowInput
    connect?: SeriesWhereUniqueInput
  }

  export type EventCreateNestedOneWithoutFollowInput = {
    create?: XOR<EventCreateWithoutFollowInput, EventUncheckedCreateWithoutFollowInput>
    connectOrCreate?: EventCreateOrConnectWithoutFollowInput
    connect?: EventWhereUniqueInput
  }

  export type OrganizationCreateNestedOneWithoutFollowInput = {
    create?: XOR<OrganizationCreateWithoutFollowInput, OrganizationUncheckedCreateWithoutFollowInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutFollowInput
    connect?: OrganizationWhereUniqueInput
  }

  export type RaceCreateNestedOneWithoutFollowInput = {
    create?: XOR<RaceCreateWithoutFollowInput, RaceUncheckedCreateWithoutFollowInput>
    connectOrCreate?: RaceCreateOrConnectWithoutFollowInput
    connect?: RaceWhereUniqueInput
  }

  export type CompCreateNestedOneWithoutFollowInput = {
    create?: XOR<CompCreateWithoutFollowInput, CompUncheckedCreateWithoutFollowInput>
    connectOrCreate?: CompCreateOrConnectWithoutFollowInput
    connect?: CompWhereUniqueInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type UserUpdateOneRequiredWithoutFollowNestedInput = {
    create?: XOR<UserCreateWithoutFollowInput, UserUncheckedCreateWithoutFollowInput>
    connectOrCreate?: UserCreateOrConnectWithoutFollowInput
    upsert?: UserUpsertWithoutFollowInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutFollowInput, UserUncheckedUpdateWithoutFollowInput>
  }

  export type SeriesUpdateOneWithoutFollowNestedInput = {
    create?: XOR<SeriesCreateWithoutFollowInput, SeriesUncheckedCreateWithoutFollowInput>
    connectOrCreate?: SeriesCreateOrConnectWithoutFollowInput
    upsert?: SeriesUpsertWithoutFollowInput
    disconnect?: boolean
    delete?: boolean
    connect?: SeriesWhereUniqueInput
    update?: XOR<SeriesUpdateWithoutFollowInput, SeriesUncheckedUpdateWithoutFollowInput>
  }

  export type EventUpdateOneWithoutFollowNestedInput = {
    create?: XOR<EventCreateWithoutFollowInput, EventUncheckedCreateWithoutFollowInput>
    connectOrCreate?: EventCreateOrConnectWithoutFollowInput
    upsert?: EventUpsertWithoutFollowInput
    disconnect?: boolean
    delete?: boolean
    connect?: EventWhereUniqueInput
    update?: XOR<EventUpdateWithoutFollowInput, EventUncheckedUpdateWithoutFollowInput>
  }

  export type OrganizationUpdateOneWithoutFollowNestedInput = {
    create?: XOR<OrganizationCreateWithoutFollowInput, OrganizationUncheckedCreateWithoutFollowInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutFollowInput
    upsert?: OrganizationUpsertWithoutFollowInput
    disconnect?: boolean
    delete?: boolean
    connect?: OrganizationWhereUniqueInput
    update?: XOR<OrganizationUpdateWithoutFollowInput, OrganizationUncheckedUpdateWithoutFollowInput>
  }

  export type RaceUpdateOneWithoutFollowNestedInput = {
    create?: XOR<RaceCreateWithoutFollowInput, RaceUncheckedCreateWithoutFollowInput>
    connectOrCreate?: RaceCreateOrConnectWithoutFollowInput
    upsert?: RaceUpsertWithoutFollowInput
    disconnect?: boolean
    delete?: boolean
    connect?: RaceWhereUniqueInput
    update?: XOR<RaceUpdateWithoutFollowInput, RaceUncheckedUpdateWithoutFollowInput>
  }

  export type CompUpdateOneWithoutFollowNestedInput = {
    create?: XOR<CompCreateWithoutFollowInput, CompUncheckedCreateWithoutFollowInput>
    connectOrCreate?: CompCreateOrConnectWithoutFollowInput
    upsert?: CompUpsertWithoutFollowInput
    disconnect?: boolean
    delete?: boolean
    connect?: CompWhereUniqueInput
    update?: XOR<CompUpdateWithoutFollowInput, CompUncheckedUpdateWithoutFollowInput>
  }

  export type UserCreateNestedOneWithoutLikeInput = {
    create?: XOR<UserCreateWithoutLikeInput, UserUncheckedCreateWithoutLikeInput>
    connectOrCreate?: UserCreateOrConnectWithoutLikeInput
    connect?: UserWhereUniqueInput
  }

  export type SeriesCreateNestedOneWithoutLikeInput = {
    create?: XOR<SeriesCreateWithoutLikeInput, SeriesUncheckedCreateWithoutLikeInput>
    connectOrCreate?: SeriesCreateOrConnectWithoutLikeInput
    connect?: SeriesWhereUniqueInput
  }

  export type EventCreateNestedOneWithoutLikeInput = {
    create?: XOR<EventCreateWithoutLikeInput, EventUncheckedCreateWithoutLikeInput>
    connectOrCreate?: EventCreateOrConnectWithoutLikeInput
    connect?: EventWhereUniqueInput
  }

  export type OrganizationCreateNestedOneWithoutLikeInput = {
    create?: XOR<OrganizationCreateWithoutLikeInput, OrganizationUncheckedCreateWithoutLikeInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutLikeInput
    connect?: OrganizationWhereUniqueInput
  }

  export type RaceCreateNestedOneWithoutLikeInput = {
    create?: XOR<RaceCreateWithoutLikeInput, RaceUncheckedCreateWithoutLikeInput>
    connectOrCreate?: RaceCreateOrConnectWithoutLikeInput
    connect?: RaceWhereUniqueInput
  }

  export type CompCreateNestedOneWithoutLikeInput = {
    create?: XOR<CompCreateWithoutLikeInput, CompUncheckedCreateWithoutLikeInput>
    connectOrCreate?: CompCreateOrConnectWithoutLikeInput
    connect?: CompWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutLikeNestedInput = {
    create?: XOR<UserCreateWithoutLikeInput, UserUncheckedCreateWithoutLikeInput>
    connectOrCreate?: UserCreateOrConnectWithoutLikeInput
    upsert?: UserUpsertWithoutLikeInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutLikeInput, UserUncheckedUpdateWithoutLikeInput>
  }

  export type SeriesUpdateOneWithoutLikeNestedInput = {
    create?: XOR<SeriesCreateWithoutLikeInput, SeriesUncheckedCreateWithoutLikeInput>
    connectOrCreate?: SeriesCreateOrConnectWithoutLikeInput
    upsert?: SeriesUpsertWithoutLikeInput
    disconnect?: boolean
    delete?: boolean
    connect?: SeriesWhereUniqueInput
    update?: XOR<SeriesUpdateWithoutLikeInput, SeriesUncheckedUpdateWithoutLikeInput>
  }

  export type EventUpdateOneWithoutLikeNestedInput = {
    create?: XOR<EventCreateWithoutLikeInput, EventUncheckedCreateWithoutLikeInput>
    connectOrCreate?: EventCreateOrConnectWithoutLikeInput
    upsert?: EventUpsertWithoutLikeInput
    disconnect?: boolean
    delete?: boolean
    connect?: EventWhereUniqueInput
    update?: XOR<EventUpdateWithoutLikeInput, EventUncheckedUpdateWithoutLikeInput>
  }

  export type OrganizationUpdateOneWithoutLikeNestedInput = {
    create?: XOR<OrganizationCreateWithoutLikeInput, OrganizationUncheckedCreateWithoutLikeInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutLikeInput
    upsert?: OrganizationUpsertWithoutLikeInput
    disconnect?: boolean
    delete?: boolean
    connect?: OrganizationWhereUniqueInput
    update?: XOR<OrganizationUpdateWithoutLikeInput, OrganizationUncheckedUpdateWithoutLikeInput>
  }

  export type RaceUpdateOneWithoutLikeNestedInput = {
    create?: XOR<RaceCreateWithoutLikeInput, RaceUncheckedCreateWithoutLikeInput>
    connectOrCreate?: RaceCreateOrConnectWithoutLikeInput
    upsert?: RaceUpsertWithoutLikeInput
    disconnect?: boolean
    delete?: boolean
    connect?: RaceWhereUniqueInput
    update?: XOR<RaceUpdateWithoutLikeInput, RaceUncheckedUpdateWithoutLikeInput>
  }

  export type CompUpdateOneWithoutLikeNestedInput = {
    create?: XOR<CompCreateWithoutLikeInput, CompUncheckedCreateWithoutLikeInput>
    connectOrCreate?: CompCreateOrConnectWithoutLikeInput
    upsert?: CompUpsertWithoutLikeInput
    disconnect?: boolean
    delete?: boolean
    connect?: CompWhereUniqueInput
    update?: XOR<CompUpdateWithoutLikeInput, CompUncheckedUpdateWithoutLikeInput>
  }

  export type UserCreateNestedOneWithoutVenueInput = {
    create?: XOR<UserCreateWithoutVenueInput, UserUncheckedCreateWithoutVenueInput>
    connectOrCreate?: UserCreateOrConnectWithoutVenueInput
    connect?: UserWhereUniqueInput
  }

  export type SeriesCreateNestedManyWithoutVenuesInput = {
    create?: XOR<Enumerable<SeriesCreateWithoutVenuesInput>, Enumerable<SeriesUncheckedCreateWithoutVenuesInput>>
    connectOrCreate?: Enumerable<SeriesCreateOrConnectWithoutVenuesInput>
    connect?: Enumerable<SeriesWhereUniqueInput>
  }

  export type EventCreateNestedManyWithoutVenueInput = {
    create?: XOR<Enumerable<EventCreateWithoutVenueInput>, Enumerable<EventUncheckedCreateWithoutVenueInput>>
    connectOrCreate?: Enumerable<EventCreateOrConnectWithoutVenueInput>
    createMany?: EventCreateManyVenueInputEnvelope
    connect?: Enumerable<EventWhereUniqueInput>
  }

  export type SeriesUncheckedCreateNestedManyWithoutVenuesInput = {
    create?: XOR<Enumerable<SeriesCreateWithoutVenuesInput>, Enumerable<SeriesUncheckedCreateWithoutVenuesInput>>
    connectOrCreate?: Enumerable<SeriesCreateOrConnectWithoutVenuesInput>
    connect?: Enumerable<SeriesWhereUniqueInput>
  }

  export type EventUncheckedCreateNestedManyWithoutVenueInput = {
    create?: XOR<Enumerable<EventCreateWithoutVenueInput>, Enumerable<EventUncheckedCreateWithoutVenueInput>>
    connectOrCreate?: Enumerable<EventCreateOrConnectWithoutVenueInput>
    createMany?: EventCreateManyVenueInputEnvelope
    connect?: Enumerable<EventWhereUniqueInput>
  }

  export type UserUpdateOneWithoutVenueNestedInput = {
    create?: XOR<UserCreateWithoutVenueInput, UserUncheckedCreateWithoutVenueInput>
    connectOrCreate?: UserCreateOrConnectWithoutVenueInput
    upsert?: UserUpsertWithoutVenueInput
    disconnect?: boolean
    delete?: boolean
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutVenueInput, UserUncheckedUpdateWithoutVenueInput>
  }

  export type SeriesUpdateManyWithoutVenuesNestedInput = {
    create?: XOR<Enumerable<SeriesCreateWithoutVenuesInput>, Enumerable<SeriesUncheckedCreateWithoutVenuesInput>>
    connectOrCreate?: Enumerable<SeriesCreateOrConnectWithoutVenuesInput>
    upsert?: Enumerable<SeriesUpsertWithWhereUniqueWithoutVenuesInput>
    set?: Enumerable<SeriesWhereUniqueInput>
    disconnect?: Enumerable<SeriesWhereUniqueInput>
    delete?: Enumerable<SeriesWhereUniqueInput>
    connect?: Enumerable<SeriesWhereUniqueInput>
    update?: Enumerable<SeriesUpdateWithWhereUniqueWithoutVenuesInput>
    updateMany?: Enumerable<SeriesUpdateManyWithWhereWithoutVenuesInput>
    deleteMany?: Enumerable<SeriesScalarWhereInput>
  }

  export type EventUpdateManyWithoutVenueNestedInput = {
    create?: XOR<Enumerable<EventCreateWithoutVenueInput>, Enumerable<EventUncheckedCreateWithoutVenueInput>>
    connectOrCreate?: Enumerable<EventCreateOrConnectWithoutVenueInput>
    upsert?: Enumerable<EventUpsertWithWhereUniqueWithoutVenueInput>
    createMany?: EventCreateManyVenueInputEnvelope
    set?: Enumerable<EventWhereUniqueInput>
    disconnect?: Enumerable<EventWhereUniqueInput>
    delete?: Enumerable<EventWhereUniqueInput>
    connect?: Enumerable<EventWhereUniqueInput>
    update?: Enumerable<EventUpdateWithWhereUniqueWithoutVenueInput>
    updateMany?: Enumerable<EventUpdateManyWithWhereWithoutVenueInput>
    deleteMany?: Enumerable<EventScalarWhereInput>
  }

  export type SeriesUncheckedUpdateManyWithoutVenuesNestedInput = {
    create?: XOR<Enumerable<SeriesCreateWithoutVenuesInput>, Enumerable<SeriesUncheckedCreateWithoutVenuesInput>>
    connectOrCreate?: Enumerable<SeriesCreateOrConnectWithoutVenuesInput>
    upsert?: Enumerable<SeriesUpsertWithWhereUniqueWithoutVenuesInput>
    set?: Enumerable<SeriesWhereUniqueInput>
    disconnect?: Enumerable<SeriesWhereUniqueInput>
    delete?: Enumerable<SeriesWhereUniqueInput>
    connect?: Enumerable<SeriesWhereUniqueInput>
    update?: Enumerable<SeriesUpdateWithWhereUniqueWithoutVenuesInput>
    updateMany?: Enumerable<SeriesUpdateManyWithWhereWithoutVenuesInput>
    deleteMany?: Enumerable<SeriesScalarWhereInput>
  }

  export type EventUncheckedUpdateManyWithoutVenueNestedInput = {
    create?: XOR<Enumerable<EventCreateWithoutVenueInput>, Enumerable<EventUncheckedCreateWithoutVenueInput>>
    connectOrCreate?: Enumerable<EventCreateOrConnectWithoutVenueInput>
    upsert?: Enumerable<EventUpsertWithWhereUniqueWithoutVenueInput>
    createMany?: EventCreateManyVenueInputEnvelope
    set?: Enumerable<EventWhereUniqueInput>
    disconnect?: Enumerable<EventWhereUniqueInput>
    delete?: Enumerable<EventWhereUniqueInput>
    connect?: Enumerable<EventWhereUniqueInput>
    update?: Enumerable<EventUpdateWithWhereUniqueWithoutVenueInput>
    updateMany?: Enumerable<EventUpdateManyWithWhereWithoutVenueInput>
    deleteMany?: Enumerable<EventScalarWhereInput>
  }

  export type SessionCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<SessionCreateWithoutUserInput>, Enumerable<SessionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<SessionCreateOrConnectWithoutUserInput>
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: Enumerable<SessionWhereUniqueInput>
  }

  export type KeyCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<KeyCreateWithoutUserInput>, Enumerable<KeyUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<KeyCreateOrConnectWithoutUserInput>
    createMany?: KeyCreateManyUserInputEnvelope
    connect?: Enumerable<KeyWhereUniqueInput>
  }

  export type ArticleCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<ArticleCreateWithoutUserInput>, Enumerable<ArticleUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ArticleCreateOrConnectWithoutUserInput>
    createMany?: ArticleCreateManyUserInputEnvelope
    connect?: Enumerable<ArticleWhereUniqueInput>
  }

  export type SeriesCreateNestedManyWithoutPublisherInput = {
    create?: XOR<Enumerable<SeriesCreateWithoutPublisherInput>, Enumerable<SeriesUncheckedCreateWithoutPublisherInput>>
    connectOrCreate?: Enumerable<SeriesCreateOrConnectWithoutPublisherInput>
    createMany?: SeriesCreateManyPublisherInputEnvelope
    connect?: Enumerable<SeriesWhereUniqueInput>
  }

  export type EventCreateNestedManyWithoutPublisherInput = {
    create?: XOR<Enumerable<EventCreateWithoutPublisherInput>, Enumerable<EventUncheckedCreateWithoutPublisherInput>>
    connectOrCreate?: Enumerable<EventCreateOrConnectWithoutPublisherInput>
    createMany?: EventCreateManyPublisherInputEnvelope
    connect?: Enumerable<EventWhereUniqueInput>
  }

  export type OrganizationCreateNestedManyWithoutOwnerInput = {
    create?: XOR<Enumerable<OrganizationCreateWithoutOwnerInput>, Enumerable<OrganizationUncheckedCreateWithoutOwnerInput>>
    connectOrCreate?: Enumerable<OrganizationCreateOrConnectWithoutOwnerInput>
    createMany?: OrganizationCreateManyOwnerInputEnvelope
    connect?: Enumerable<OrganizationWhereUniqueInput>
  }

  export type CompCreateNestedManyWithoutPublisherInput = {
    create?: XOR<Enumerable<CompCreateWithoutPublisherInput>, Enumerable<CompUncheckedCreateWithoutPublisherInput>>
    connectOrCreate?: Enumerable<CompCreateOrConnectWithoutPublisherInput>
    createMany?: CompCreateManyPublisherInputEnvelope
    connect?: Enumerable<CompWhereUniqueInput>
  }

  export type VenueCreateNestedManyWithoutPublisherInput = {
    create?: XOR<Enumerable<VenueCreateWithoutPublisherInput>, Enumerable<VenueUncheckedCreateWithoutPublisherInput>>
    connectOrCreate?: Enumerable<VenueCreateOrConnectWithoutPublisherInput>
    createMany?: VenueCreateManyPublisherInputEnvelope
    connect?: Enumerable<VenueWhereUniqueInput>
  }

  export type UserSettingsCreateNestedOneWithoutUserInput = {
    create?: XOR<UserSettingsCreateWithoutUserInput, UserSettingsUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserSettingsCreateOrConnectWithoutUserInput
    connect?: UserSettingsWhereUniqueInput
  }

  export type RaceCreateNestedManyWithoutPublisherInput = {
    create?: XOR<Enumerable<RaceCreateWithoutPublisherInput>, Enumerable<RaceUncheckedCreateWithoutPublisherInput>>
    connectOrCreate?: Enumerable<RaceCreateOrConnectWithoutPublisherInput>
    createMany?: RaceCreateManyPublisherInputEnvelope
    connect?: Enumerable<RaceWhereUniqueInput>
  }

  export type ResultCreateNestedManyWithoutPublisherInput = {
    create?: XOR<Enumerable<ResultCreateWithoutPublisherInput>, Enumerable<ResultUncheckedCreateWithoutPublisherInput>>
    connectOrCreate?: Enumerable<ResultCreateOrConnectWithoutPublisherInput>
    createMany?: ResultCreateManyPublisherInputEnvelope
    connect?: Enumerable<ResultWhereUniqueInput>
  }

  export type followCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<followCreateWithoutUserInput>, Enumerable<followUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<followCreateOrConnectWithoutUserInput>
    createMany?: followCreateManyUserInputEnvelope
    connect?: Enumerable<followWhereUniqueInput>
  }

  export type likeCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<likeCreateWithoutUserInput>, Enumerable<likeUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<likeCreateOrConnectWithoutUserInput>
    createMany?: likeCreateManyUserInputEnvelope
    connect?: Enumerable<likeWhereUniqueInput>
  }

  export type SessionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<SessionCreateWithoutUserInput>, Enumerable<SessionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<SessionCreateOrConnectWithoutUserInput>
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: Enumerable<SessionWhereUniqueInput>
  }

  export type KeyUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<KeyCreateWithoutUserInput>, Enumerable<KeyUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<KeyCreateOrConnectWithoutUserInput>
    createMany?: KeyCreateManyUserInputEnvelope
    connect?: Enumerable<KeyWhereUniqueInput>
  }

  export type ArticleUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<ArticleCreateWithoutUserInput>, Enumerable<ArticleUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ArticleCreateOrConnectWithoutUserInput>
    createMany?: ArticleCreateManyUserInputEnvelope
    connect?: Enumerable<ArticleWhereUniqueInput>
  }

  export type SeriesUncheckedCreateNestedManyWithoutPublisherInput = {
    create?: XOR<Enumerable<SeriesCreateWithoutPublisherInput>, Enumerable<SeriesUncheckedCreateWithoutPublisherInput>>
    connectOrCreate?: Enumerable<SeriesCreateOrConnectWithoutPublisherInput>
    createMany?: SeriesCreateManyPublisherInputEnvelope
    connect?: Enumerable<SeriesWhereUniqueInput>
  }

  export type EventUncheckedCreateNestedManyWithoutPublisherInput = {
    create?: XOR<Enumerable<EventCreateWithoutPublisherInput>, Enumerable<EventUncheckedCreateWithoutPublisherInput>>
    connectOrCreate?: Enumerable<EventCreateOrConnectWithoutPublisherInput>
    createMany?: EventCreateManyPublisherInputEnvelope
    connect?: Enumerable<EventWhereUniqueInput>
  }

  export type OrganizationUncheckedCreateNestedManyWithoutOwnerInput = {
    create?: XOR<Enumerable<OrganizationCreateWithoutOwnerInput>, Enumerable<OrganizationUncheckedCreateWithoutOwnerInput>>
    connectOrCreate?: Enumerable<OrganizationCreateOrConnectWithoutOwnerInput>
    createMany?: OrganizationCreateManyOwnerInputEnvelope
    connect?: Enumerable<OrganizationWhereUniqueInput>
  }

  export type CompUncheckedCreateNestedManyWithoutPublisherInput = {
    create?: XOR<Enumerable<CompCreateWithoutPublisherInput>, Enumerable<CompUncheckedCreateWithoutPublisherInput>>
    connectOrCreate?: Enumerable<CompCreateOrConnectWithoutPublisherInput>
    createMany?: CompCreateManyPublisherInputEnvelope
    connect?: Enumerable<CompWhereUniqueInput>
  }

  export type VenueUncheckedCreateNestedManyWithoutPublisherInput = {
    create?: XOR<Enumerable<VenueCreateWithoutPublisherInput>, Enumerable<VenueUncheckedCreateWithoutPublisherInput>>
    connectOrCreate?: Enumerable<VenueCreateOrConnectWithoutPublisherInput>
    createMany?: VenueCreateManyPublisherInputEnvelope
    connect?: Enumerable<VenueWhereUniqueInput>
  }

  export type UserSettingsUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<UserSettingsCreateWithoutUserInput, UserSettingsUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserSettingsCreateOrConnectWithoutUserInput
    connect?: UserSettingsWhereUniqueInput
  }

  export type RaceUncheckedCreateNestedManyWithoutPublisherInput = {
    create?: XOR<Enumerable<RaceCreateWithoutPublisherInput>, Enumerable<RaceUncheckedCreateWithoutPublisherInput>>
    connectOrCreate?: Enumerable<RaceCreateOrConnectWithoutPublisherInput>
    createMany?: RaceCreateManyPublisherInputEnvelope
    connect?: Enumerable<RaceWhereUniqueInput>
  }

  export type ResultUncheckedCreateNestedManyWithoutPublisherInput = {
    create?: XOR<Enumerable<ResultCreateWithoutPublisherInput>, Enumerable<ResultUncheckedCreateWithoutPublisherInput>>
    connectOrCreate?: Enumerable<ResultCreateOrConnectWithoutPublisherInput>
    createMany?: ResultCreateManyPublisherInputEnvelope
    connect?: Enumerable<ResultWhereUniqueInput>
  }

  export type followUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<followCreateWithoutUserInput>, Enumerable<followUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<followCreateOrConnectWithoutUserInput>
    createMany?: followCreateManyUserInputEnvelope
    connect?: Enumerable<followWhereUniqueInput>
  }

  export type likeUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<likeCreateWithoutUserInput>, Enumerable<likeUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<likeCreateOrConnectWithoutUserInput>
    createMany?: likeCreateManyUserInputEnvelope
    connect?: Enumerable<likeWhereUniqueInput>
  }

  export type SessionUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<SessionCreateWithoutUserInput>, Enumerable<SessionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<SessionCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<SessionUpsertWithWhereUniqueWithoutUserInput>
    createMany?: SessionCreateManyUserInputEnvelope
    set?: Enumerable<SessionWhereUniqueInput>
    disconnect?: Enumerable<SessionWhereUniqueInput>
    delete?: Enumerable<SessionWhereUniqueInput>
    connect?: Enumerable<SessionWhereUniqueInput>
    update?: Enumerable<SessionUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<SessionUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<SessionScalarWhereInput>
  }

  export type KeyUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<KeyCreateWithoutUserInput>, Enumerable<KeyUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<KeyCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<KeyUpsertWithWhereUniqueWithoutUserInput>
    createMany?: KeyCreateManyUserInputEnvelope
    set?: Enumerable<KeyWhereUniqueInput>
    disconnect?: Enumerable<KeyWhereUniqueInput>
    delete?: Enumerable<KeyWhereUniqueInput>
    connect?: Enumerable<KeyWhereUniqueInput>
    update?: Enumerable<KeyUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<KeyUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<KeyScalarWhereInput>
  }

  export type ArticleUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<ArticleCreateWithoutUserInput>, Enumerable<ArticleUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ArticleCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<ArticleUpsertWithWhereUniqueWithoutUserInput>
    createMany?: ArticleCreateManyUserInputEnvelope
    set?: Enumerable<ArticleWhereUniqueInput>
    disconnect?: Enumerable<ArticleWhereUniqueInput>
    delete?: Enumerable<ArticleWhereUniqueInput>
    connect?: Enumerable<ArticleWhereUniqueInput>
    update?: Enumerable<ArticleUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<ArticleUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<ArticleScalarWhereInput>
  }

  export type SeriesUpdateManyWithoutPublisherNestedInput = {
    create?: XOR<Enumerable<SeriesCreateWithoutPublisherInput>, Enumerable<SeriesUncheckedCreateWithoutPublisherInput>>
    connectOrCreate?: Enumerable<SeriesCreateOrConnectWithoutPublisherInput>
    upsert?: Enumerable<SeriesUpsertWithWhereUniqueWithoutPublisherInput>
    createMany?: SeriesCreateManyPublisherInputEnvelope
    set?: Enumerable<SeriesWhereUniqueInput>
    disconnect?: Enumerable<SeriesWhereUniqueInput>
    delete?: Enumerable<SeriesWhereUniqueInput>
    connect?: Enumerable<SeriesWhereUniqueInput>
    update?: Enumerable<SeriesUpdateWithWhereUniqueWithoutPublisherInput>
    updateMany?: Enumerable<SeriesUpdateManyWithWhereWithoutPublisherInput>
    deleteMany?: Enumerable<SeriesScalarWhereInput>
  }

  export type EventUpdateManyWithoutPublisherNestedInput = {
    create?: XOR<Enumerable<EventCreateWithoutPublisherInput>, Enumerable<EventUncheckedCreateWithoutPublisherInput>>
    connectOrCreate?: Enumerable<EventCreateOrConnectWithoutPublisherInput>
    upsert?: Enumerable<EventUpsertWithWhereUniqueWithoutPublisherInput>
    createMany?: EventCreateManyPublisherInputEnvelope
    set?: Enumerable<EventWhereUniqueInput>
    disconnect?: Enumerable<EventWhereUniqueInput>
    delete?: Enumerable<EventWhereUniqueInput>
    connect?: Enumerable<EventWhereUniqueInput>
    update?: Enumerable<EventUpdateWithWhereUniqueWithoutPublisherInput>
    updateMany?: Enumerable<EventUpdateManyWithWhereWithoutPublisherInput>
    deleteMany?: Enumerable<EventScalarWhereInput>
  }

  export type OrganizationUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<Enumerable<OrganizationCreateWithoutOwnerInput>, Enumerable<OrganizationUncheckedCreateWithoutOwnerInput>>
    connectOrCreate?: Enumerable<OrganizationCreateOrConnectWithoutOwnerInput>
    upsert?: Enumerable<OrganizationUpsertWithWhereUniqueWithoutOwnerInput>
    createMany?: OrganizationCreateManyOwnerInputEnvelope
    set?: Enumerable<OrganizationWhereUniqueInput>
    disconnect?: Enumerable<OrganizationWhereUniqueInput>
    delete?: Enumerable<OrganizationWhereUniqueInput>
    connect?: Enumerable<OrganizationWhereUniqueInput>
    update?: Enumerable<OrganizationUpdateWithWhereUniqueWithoutOwnerInput>
    updateMany?: Enumerable<OrganizationUpdateManyWithWhereWithoutOwnerInput>
    deleteMany?: Enumerable<OrganizationScalarWhereInput>
  }

  export type CompUpdateManyWithoutPublisherNestedInput = {
    create?: XOR<Enumerable<CompCreateWithoutPublisherInput>, Enumerable<CompUncheckedCreateWithoutPublisherInput>>
    connectOrCreate?: Enumerable<CompCreateOrConnectWithoutPublisherInput>
    upsert?: Enumerable<CompUpsertWithWhereUniqueWithoutPublisherInput>
    createMany?: CompCreateManyPublisherInputEnvelope
    set?: Enumerable<CompWhereUniqueInput>
    disconnect?: Enumerable<CompWhereUniqueInput>
    delete?: Enumerable<CompWhereUniqueInput>
    connect?: Enumerable<CompWhereUniqueInput>
    update?: Enumerable<CompUpdateWithWhereUniqueWithoutPublisherInput>
    updateMany?: Enumerable<CompUpdateManyWithWhereWithoutPublisherInput>
    deleteMany?: Enumerable<CompScalarWhereInput>
  }

  export type VenueUpdateManyWithoutPublisherNestedInput = {
    create?: XOR<Enumerable<VenueCreateWithoutPublisherInput>, Enumerable<VenueUncheckedCreateWithoutPublisherInput>>
    connectOrCreate?: Enumerable<VenueCreateOrConnectWithoutPublisherInput>
    upsert?: Enumerable<VenueUpsertWithWhereUniqueWithoutPublisherInput>
    createMany?: VenueCreateManyPublisherInputEnvelope
    set?: Enumerable<VenueWhereUniqueInput>
    disconnect?: Enumerable<VenueWhereUniqueInput>
    delete?: Enumerable<VenueWhereUniqueInput>
    connect?: Enumerable<VenueWhereUniqueInput>
    update?: Enumerable<VenueUpdateWithWhereUniqueWithoutPublisherInput>
    updateMany?: Enumerable<VenueUpdateManyWithWhereWithoutPublisherInput>
    deleteMany?: Enumerable<VenueScalarWhereInput>
  }

  export type UserSettingsUpdateOneWithoutUserNestedInput = {
    create?: XOR<UserSettingsCreateWithoutUserInput, UserSettingsUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserSettingsCreateOrConnectWithoutUserInput
    upsert?: UserSettingsUpsertWithoutUserInput
    disconnect?: boolean
    delete?: boolean
    connect?: UserSettingsWhereUniqueInput
    update?: XOR<UserSettingsUpdateWithoutUserInput, UserSettingsUncheckedUpdateWithoutUserInput>
  }

  export type RaceUpdateManyWithoutPublisherNestedInput = {
    create?: XOR<Enumerable<RaceCreateWithoutPublisherInput>, Enumerable<RaceUncheckedCreateWithoutPublisherInput>>
    connectOrCreate?: Enumerable<RaceCreateOrConnectWithoutPublisherInput>
    upsert?: Enumerable<RaceUpsertWithWhereUniqueWithoutPublisherInput>
    createMany?: RaceCreateManyPublisherInputEnvelope
    set?: Enumerable<RaceWhereUniqueInput>
    disconnect?: Enumerable<RaceWhereUniqueInput>
    delete?: Enumerable<RaceWhereUniqueInput>
    connect?: Enumerable<RaceWhereUniqueInput>
    update?: Enumerable<RaceUpdateWithWhereUniqueWithoutPublisherInput>
    updateMany?: Enumerable<RaceUpdateManyWithWhereWithoutPublisherInput>
    deleteMany?: Enumerable<RaceScalarWhereInput>
  }

  export type ResultUpdateManyWithoutPublisherNestedInput = {
    create?: XOR<Enumerable<ResultCreateWithoutPublisherInput>, Enumerable<ResultUncheckedCreateWithoutPublisherInput>>
    connectOrCreate?: Enumerable<ResultCreateOrConnectWithoutPublisherInput>
    upsert?: Enumerable<ResultUpsertWithWhereUniqueWithoutPublisherInput>
    createMany?: ResultCreateManyPublisherInputEnvelope
    set?: Enumerable<ResultWhereUniqueInput>
    disconnect?: Enumerable<ResultWhereUniqueInput>
    delete?: Enumerable<ResultWhereUniqueInput>
    connect?: Enumerable<ResultWhereUniqueInput>
    update?: Enumerable<ResultUpdateWithWhereUniqueWithoutPublisherInput>
    updateMany?: Enumerable<ResultUpdateManyWithWhereWithoutPublisherInput>
    deleteMany?: Enumerable<ResultScalarWhereInput>
  }

  export type followUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<followCreateWithoutUserInput>, Enumerable<followUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<followCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<followUpsertWithWhereUniqueWithoutUserInput>
    createMany?: followCreateManyUserInputEnvelope
    set?: Enumerable<followWhereUniqueInput>
    disconnect?: Enumerable<followWhereUniqueInput>
    delete?: Enumerable<followWhereUniqueInput>
    connect?: Enumerable<followWhereUniqueInput>
    update?: Enumerable<followUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<followUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<followScalarWhereInput>
  }

  export type likeUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<likeCreateWithoutUserInput>, Enumerable<likeUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<likeCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<likeUpsertWithWhereUniqueWithoutUserInput>
    createMany?: likeCreateManyUserInputEnvelope
    set?: Enumerable<likeWhereUniqueInput>
    disconnect?: Enumerable<likeWhereUniqueInput>
    delete?: Enumerable<likeWhereUniqueInput>
    connect?: Enumerable<likeWhereUniqueInput>
    update?: Enumerable<likeUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<likeUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<likeScalarWhereInput>
  }

  export type SessionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<SessionCreateWithoutUserInput>, Enumerable<SessionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<SessionCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<SessionUpsertWithWhereUniqueWithoutUserInput>
    createMany?: SessionCreateManyUserInputEnvelope
    set?: Enumerable<SessionWhereUniqueInput>
    disconnect?: Enumerable<SessionWhereUniqueInput>
    delete?: Enumerable<SessionWhereUniqueInput>
    connect?: Enumerable<SessionWhereUniqueInput>
    update?: Enumerable<SessionUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<SessionUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<SessionScalarWhereInput>
  }

  export type KeyUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<KeyCreateWithoutUserInput>, Enumerable<KeyUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<KeyCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<KeyUpsertWithWhereUniqueWithoutUserInput>
    createMany?: KeyCreateManyUserInputEnvelope
    set?: Enumerable<KeyWhereUniqueInput>
    disconnect?: Enumerable<KeyWhereUniqueInput>
    delete?: Enumerable<KeyWhereUniqueInput>
    connect?: Enumerable<KeyWhereUniqueInput>
    update?: Enumerable<KeyUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<KeyUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<KeyScalarWhereInput>
  }

  export type ArticleUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<ArticleCreateWithoutUserInput>, Enumerable<ArticleUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ArticleCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<ArticleUpsertWithWhereUniqueWithoutUserInput>
    createMany?: ArticleCreateManyUserInputEnvelope
    set?: Enumerable<ArticleWhereUniqueInput>
    disconnect?: Enumerable<ArticleWhereUniqueInput>
    delete?: Enumerable<ArticleWhereUniqueInput>
    connect?: Enumerable<ArticleWhereUniqueInput>
    update?: Enumerable<ArticleUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<ArticleUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<ArticleScalarWhereInput>
  }

  export type SeriesUncheckedUpdateManyWithoutPublisherNestedInput = {
    create?: XOR<Enumerable<SeriesCreateWithoutPublisherInput>, Enumerable<SeriesUncheckedCreateWithoutPublisherInput>>
    connectOrCreate?: Enumerable<SeriesCreateOrConnectWithoutPublisherInput>
    upsert?: Enumerable<SeriesUpsertWithWhereUniqueWithoutPublisherInput>
    createMany?: SeriesCreateManyPublisherInputEnvelope
    set?: Enumerable<SeriesWhereUniqueInput>
    disconnect?: Enumerable<SeriesWhereUniqueInput>
    delete?: Enumerable<SeriesWhereUniqueInput>
    connect?: Enumerable<SeriesWhereUniqueInput>
    update?: Enumerable<SeriesUpdateWithWhereUniqueWithoutPublisherInput>
    updateMany?: Enumerable<SeriesUpdateManyWithWhereWithoutPublisherInput>
    deleteMany?: Enumerable<SeriesScalarWhereInput>
  }

  export type EventUncheckedUpdateManyWithoutPublisherNestedInput = {
    create?: XOR<Enumerable<EventCreateWithoutPublisherInput>, Enumerable<EventUncheckedCreateWithoutPublisherInput>>
    connectOrCreate?: Enumerable<EventCreateOrConnectWithoutPublisherInput>
    upsert?: Enumerable<EventUpsertWithWhereUniqueWithoutPublisherInput>
    createMany?: EventCreateManyPublisherInputEnvelope
    set?: Enumerable<EventWhereUniqueInput>
    disconnect?: Enumerable<EventWhereUniqueInput>
    delete?: Enumerable<EventWhereUniqueInput>
    connect?: Enumerable<EventWhereUniqueInput>
    update?: Enumerable<EventUpdateWithWhereUniqueWithoutPublisherInput>
    updateMany?: Enumerable<EventUpdateManyWithWhereWithoutPublisherInput>
    deleteMany?: Enumerable<EventScalarWhereInput>
  }

  export type OrganizationUncheckedUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<Enumerable<OrganizationCreateWithoutOwnerInput>, Enumerable<OrganizationUncheckedCreateWithoutOwnerInput>>
    connectOrCreate?: Enumerable<OrganizationCreateOrConnectWithoutOwnerInput>
    upsert?: Enumerable<OrganizationUpsertWithWhereUniqueWithoutOwnerInput>
    createMany?: OrganizationCreateManyOwnerInputEnvelope
    set?: Enumerable<OrganizationWhereUniqueInput>
    disconnect?: Enumerable<OrganizationWhereUniqueInput>
    delete?: Enumerable<OrganizationWhereUniqueInput>
    connect?: Enumerable<OrganizationWhereUniqueInput>
    update?: Enumerable<OrganizationUpdateWithWhereUniqueWithoutOwnerInput>
    updateMany?: Enumerable<OrganizationUpdateManyWithWhereWithoutOwnerInput>
    deleteMany?: Enumerable<OrganizationScalarWhereInput>
  }

  export type CompUncheckedUpdateManyWithoutPublisherNestedInput = {
    create?: XOR<Enumerable<CompCreateWithoutPublisherInput>, Enumerable<CompUncheckedCreateWithoutPublisherInput>>
    connectOrCreate?: Enumerable<CompCreateOrConnectWithoutPublisherInput>
    upsert?: Enumerable<CompUpsertWithWhereUniqueWithoutPublisherInput>
    createMany?: CompCreateManyPublisherInputEnvelope
    set?: Enumerable<CompWhereUniqueInput>
    disconnect?: Enumerable<CompWhereUniqueInput>
    delete?: Enumerable<CompWhereUniqueInput>
    connect?: Enumerable<CompWhereUniqueInput>
    update?: Enumerable<CompUpdateWithWhereUniqueWithoutPublisherInput>
    updateMany?: Enumerable<CompUpdateManyWithWhereWithoutPublisherInput>
    deleteMany?: Enumerable<CompScalarWhereInput>
  }

  export type VenueUncheckedUpdateManyWithoutPublisherNestedInput = {
    create?: XOR<Enumerable<VenueCreateWithoutPublisherInput>, Enumerable<VenueUncheckedCreateWithoutPublisherInput>>
    connectOrCreate?: Enumerable<VenueCreateOrConnectWithoutPublisherInput>
    upsert?: Enumerable<VenueUpsertWithWhereUniqueWithoutPublisherInput>
    createMany?: VenueCreateManyPublisherInputEnvelope
    set?: Enumerable<VenueWhereUniqueInput>
    disconnect?: Enumerable<VenueWhereUniqueInput>
    delete?: Enumerable<VenueWhereUniqueInput>
    connect?: Enumerable<VenueWhereUniqueInput>
    update?: Enumerable<VenueUpdateWithWhereUniqueWithoutPublisherInput>
    updateMany?: Enumerable<VenueUpdateManyWithWhereWithoutPublisherInput>
    deleteMany?: Enumerable<VenueScalarWhereInput>
  }

  export type UserSettingsUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<UserSettingsCreateWithoutUserInput, UserSettingsUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserSettingsCreateOrConnectWithoutUserInput
    upsert?: UserSettingsUpsertWithoutUserInput
    disconnect?: boolean
    delete?: boolean
    connect?: UserSettingsWhereUniqueInput
    update?: XOR<UserSettingsUpdateWithoutUserInput, UserSettingsUncheckedUpdateWithoutUserInput>
  }

  export type RaceUncheckedUpdateManyWithoutPublisherNestedInput = {
    create?: XOR<Enumerable<RaceCreateWithoutPublisherInput>, Enumerable<RaceUncheckedCreateWithoutPublisherInput>>
    connectOrCreate?: Enumerable<RaceCreateOrConnectWithoutPublisherInput>
    upsert?: Enumerable<RaceUpsertWithWhereUniqueWithoutPublisherInput>
    createMany?: RaceCreateManyPublisherInputEnvelope
    set?: Enumerable<RaceWhereUniqueInput>
    disconnect?: Enumerable<RaceWhereUniqueInput>
    delete?: Enumerable<RaceWhereUniqueInput>
    connect?: Enumerable<RaceWhereUniqueInput>
    update?: Enumerable<RaceUpdateWithWhereUniqueWithoutPublisherInput>
    updateMany?: Enumerable<RaceUpdateManyWithWhereWithoutPublisherInput>
    deleteMany?: Enumerable<RaceScalarWhereInput>
  }

  export type ResultUncheckedUpdateManyWithoutPublisherNestedInput = {
    create?: XOR<Enumerable<ResultCreateWithoutPublisherInput>, Enumerable<ResultUncheckedCreateWithoutPublisherInput>>
    connectOrCreate?: Enumerable<ResultCreateOrConnectWithoutPublisherInput>
    upsert?: Enumerable<ResultUpsertWithWhereUniqueWithoutPublisherInput>
    createMany?: ResultCreateManyPublisherInputEnvelope
    set?: Enumerable<ResultWhereUniqueInput>
    disconnect?: Enumerable<ResultWhereUniqueInput>
    delete?: Enumerable<ResultWhereUniqueInput>
    connect?: Enumerable<ResultWhereUniqueInput>
    update?: Enumerable<ResultUpdateWithWhereUniqueWithoutPublisherInput>
    updateMany?: Enumerable<ResultUpdateManyWithWhereWithoutPublisherInput>
    deleteMany?: Enumerable<ResultScalarWhereInput>
  }

  export type followUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<followCreateWithoutUserInput>, Enumerable<followUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<followCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<followUpsertWithWhereUniqueWithoutUserInput>
    createMany?: followCreateManyUserInputEnvelope
    set?: Enumerable<followWhereUniqueInput>
    disconnect?: Enumerable<followWhereUniqueInput>
    delete?: Enumerable<followWhereUniqueInput>
    connect?: Enumerable<followWhereUniqueInput>
    update?: Enumerable<followUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<followUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<followScalarWhereInput>
  }

  export type likeUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<likeCreateWithoutUserInput>, Enumerable<likeUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<likeCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<likeUpsertWithWhereUniqueWithoutUserInput>
    createMany?: likeCreateManyUserInputEnvelope
    set?: Enumerable<likeWhereUniqueInput>
    disconnect?: Enumerable<likeWhereUniqueInput>
    delete?: Enumerable<likeWhereUniqueInput>
    connect?: Enumerable<likeWhereUniqueInput>
    update?: Enumerable<likeUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<likeUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<likeScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutUserSettingsInput = {
    create?: XOR<UserCreateWithoutUserSettingsInput, UserUncheckedCreateWithoutUserSettingsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserSettingsInput
    connect?: UserWhereUniqueInput
  }

  export type NullableEnumLangFieldUpdateOperationsInput = {
    set?: Lang | null
  }

  export type UserUpdateOneWithoutUserSettingsNestedInput = {
    create?: XOR<UserCreateWithoutUserSettingsInput, UserUncheckedCreateWithoutUserSettingsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserSettingsInput
    upsert?: UserUpsertWithoutUserSettingsInput
    disconnect?: boolean
    delete?: boolean
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutUserSettingsInput, UserUncheckedUpdateWithoutUserSettingsInput>
  }

  export type UserCreateNestedOneWithoutSessionInput = {
    create?: XOR<UserCreateWithoutSessionInput, UserUncheckedCreateWithoutSessionInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionInput
    connect?: UserWhereUniqueInput
  }

  export type BigIntFieldUpdateOperationsInput = {
    set?: bigint | number
    increment?: bigint | number
    decrement?: bigint | number
    multiply?: bigint | number
    divide?: bigint | number
  }

  export type UserUpdateOneRequiredWithoutSessionNestedInput = {
    create?: XOR<UserCreateWithoutSessionInput, UserUncheckedCreateWithoutSessionInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionInput
    upsert?: UserUpsertWithoutSessionInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutSessionInput, UserUncheckedUpdateWithoutSessionInput>
  }

  export type UserCreateNestedOneWithoutKeyInput = {
    create?: XOR<UserCreateWithoutKeyInput, UserUncheckedCreateWithoutKeyInput>
    connectOrCreate?: UserCreateOrConnectWithoutKeyInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutKeyNestedInput = {
    create?: XOR<UserCreateWithoutKeyInput, UserUncheckedCreateWithoutKeyInput>
    connectOrCreate?: UserCreateOrConnectWithoutKeyInput
    upsert?: UserUpsertWithoutKeyInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutKeyInput, UserUncheckedUpdateWithoutKeyInput>
  }

  export type UserCreateNestedOneWithoutArticleInput = {
    create?: XOR<UserCreateWithoutArticleInput, UserUncheckedCreateWithoutArticleInput>
    connectOrCreate?: UserCreateOrConnectWithoutArticleInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneWithoutArticleNestedInput = {
    create?: XOR<UserCreateWithoutArticleInput, UserUncheckedCreateWithoutArticleInput>
    connectOrCreate?: UserCreateOrConnectWithoutArticleInput
    upsert?: UserUpsertWithoutArticleInput
    disconnect?: boolean
    delete?: boolean
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutArticleInput, UserUncheckedUpdateWithoutArticleInput>
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedDateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }
  export type NestedJsonNullableFilter = 
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase>, Exclude<keyof Required<NestedJsonNullableFilterBase>, 'path'>>,
        Required<NestedJsonNullableFilterBase>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase>, 'path'>>

  export type NestedJsonNullableFilterBase = {
    equals?: InputJsonValue | JsonNullValueFilter
    path?: string
    string_contains?: string
    string_starts_with?: string
    string_ends_with?: string
    array_contains?: InputJsonValue | null
    array_starts_with?: InputJsonValue | null
    array_ends_with?: InputJsonValue | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonNullValueFilter
  }

  export type NestedDateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedEnumLangNullableFilter = {
    equals?: Lang | null
    in?: Enumerable<Lang> | null
    notIn?: Enumerable<Lang> | null
    not?: NestedEnumLangNullableFilter | Lang | null
  }

  export type NestedEnumLangNullableWithAggregatesFilter = {
    equals?: Lang | null
    in?: Enumerable<Lang> | null
    notIn?: Enumerable<Lang> | null
    not?: NestedEnumLangNullableWithAggregatesFilter | Lang | null
    _count?: NestedIntNullableFilter
    _min?: NestedEnumLangNullableFilter
    _max?: NestedEnumLangNullableFilter
  }

  export type NestedBigIntFilter = {
    equals?: bigint | number
    in?: Enumerable<bigint> | Enumerable<number>
    notIn?: Enumerable<bigint> | Enumerable<number>
    lt?: bigint | number
    lte?: bigint | number
    gt?: bigint | number
    gte?: bigint | number
    not?: NestedBigIntFilter | bigint | number
  }

  export type NestedBigIntWithAggregatesFilter = {
    equals?: bigint | number
    in?: Enumerable<bigint> | Enumerable<number>
    notIn?: Enumerable<bigint> | Enumerable<number>
    lt?: bigint | number
    lte?: bigint | number
    gt?: bigint | number
    gte?: bigint | number
    not?: NestedBigIntWithAggregatesFilter | bigint | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedBigIntFilter
    _min?: NestedBigIntFilter
    _max?: NestedBigIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type OrganizationCreateWithoutSeriesInput = {
    id?: string
    name: string
    description?: string | null
    tag?: string | null
    website?: string | null
    email?: string | null
    contact?: NullableJsonNullValueInput | InputJsonValue
    titleImage?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    Owner?: UserCreateNestedOneWithoutOrganizationInput
    Events?: EventCreateNestedManyWithoutOrganizationInput
    follow?: followCreateNestedManyWithoutOrganizationInput
    like?: likeCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUncheckedCreateWithoutSeriesInput = {
    id?: string
    name: string
    description?: string | null
    tag?: string | null
    website?: string | null
    email?: string | null
    contact?: NullableJsonNullValueInput | InputJsonValue
    titleImage?: string | null
    ownerId?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    Events?: EventUncheckedCreateNestedManyWithoutOrganizationInput
    follow?: followUncheckedCreateNestedManyWithoutOrganizationInput
    like?: likeUncheckedCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationCreateOrConnectWithoutSeriesInput = {
    where: OrganizationWhereUniqueInput
    create: XOR<OrganizationCreateWithoutSeriesInput, OrganizationUncheckedCreateWithoutSeriesInput>
  }

  export type UserCreateWithoutSeriesInput = {
    id: string
    name: string
    username: string
    email?: string | null
    avatar?: string | null
    session?: SessionCreateNestedManyWithoutUserInput
    Key?: KeyCreateNestedManyWithoutUserInput
    Article?: ArticleCreateNestedManyWithoutUserInput
    Event?: EventCreateNestedManyWithoutPublisherInput
    Organization?: OrganizationCreateNestedManyWithoutOwnerInput
    Comp?: CompCreateNestedManyWithoutPublisherInput
    Venue?: VenueCreateNestedManyWithoutPublisherInput
    UserSettings?: UserSettingsCreateNestedOneWithoutUserInput
    Race?: RaceCreateNestedManyWithoutPublisherInput
    Result?: ResultCreateNestedManyWithoutPublisherInput
    follow?: followCreateNestedManyWithoutUserInput
    like?: likeCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSeriesInput = {
    id: string
    name: string
    username: string
    email?: string | null
    avatar?: string | null
    session?: SessionUncheckedCreateNestedManyWithoutUserInput
    Key?: KeyUncheckedCreateNestedManyWithoutUserInput
    Article?: ArticleUncheckedCreateNestedManyWithoutUserInput
    Event?: EventUncheckedCreateNestedManyWithoutPublisherInput
    Organization?: OrganizationUncheckedCreateNestedManyWithoutOwnerInput
    Comp?: CompUncheckedCreateNestedManyWithoutPublisherInput
    Venue?: VenueUncheckedCreateNestedManyWithoutPublisherInput
    UserSettings?: UserSettingsUncheckedCreateNestedOneWithoutUserInput
    Race?: RaceUncheckedCreateNestedManyWithoutPublisherInput
    Result?: ResultUncheckedCreateNestedManyWithoutPublisherInput
    follow?: followUncheckedCreateNestedManyWithoutUserInput
    like?: likeUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSeriesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSeriesInput, UserUncheckedCreateWithoutSeriesInput>
  }

  export type VenueCreateWithoutSeriesInput = {
    id?: string
    name: string
    website?: string | null
    email?: string | null
    burgee?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    Publisher?: UserCreateNestedOneWithoutVenueInput
    Event?: EventCreateNestedManyWithoutVenueInput
  }

  export type VenueUncheckedCreateWithoutSeriesInput = {
    id?: string
    name: string
    website?: string | null
    email?: string | null
    burgee?: string | null
    publisherId?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    Event?: EventUncheckedCreateNestedManyWithoutVenueInput
  }

  export type VenueCreateOrConnectWithoutSeriesInput = {
    where: VenueWhereUniqueInput
    create: XOR<VenueCreateWithoutSeriesInput, VenueUncheckedCreateWithoutSeriesInput>
  }

  export type EventCreateWithoutSeriesInput = {
    id?: string
    eventeid: string
    uniqueIdString: string
    name: string
    eventwebsite?: string | null
    email?: string | null
    venueName?: string | null
    description?: string | null
    titleImage?: string | null
    public?: boolean
    fileInfo?: NullableJsonNullValueInput | InputJsonValue
    resultColumns?: NullableJsonNullValueInput | InputJsonValue
    rest?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    Publisher?: UserCreateNestedOneWithoutEventInput
    Venue?: VenueCreateNestedOneWithoutEventInput
    Organization?: OrganizationCreateNestedOneWithoutEventsInput
    Races?: RaceCreateNestedManyWithoutEventInput
    Results?: ResultCreateNestedManyWithoutEventInput
    Comps?: CompCreateNestedManyWithoutEventInput
    follow?: followCreateNestedManyWithoutEventInput
    like?: likeCreateNestedManyWithoutEventInput
  }

  export type EventUncheckedCreateWithoutSeriesInput = {
    id?: string
    eventeid: string
    uniqueIdString: string
    name: string
    eventwebsite?: string | null
    email?: string | null
    venueName?: string | null
    description?: string | null
    titleImage?: string | null
    public?: boolean
    fileInfo?: NullableJsonNullValueInput | InputJsonValue
    resultColumns?: NullableJsonNullValueInput | InputJsonValue
    rest?: NullableJsonNullValueInput | InputJsonValue
    publisherId?: string | null
    venueId?: string | null
    organizationId?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    Races?: RaceUncheckedCreateNestedManyWithoutEventInput
    Results?: ResultUncheckedCreateNestedManyWithoutEventInput
    Comps?: CompUncheckedCreateNestedManyWithoutEventInput
    follow?: followUncheckedCreateNestedManyWithoutEventInput
    like?: likeUncheckedCreateNestedManyWithoutEventInput
  }

  export type EventCreateOrConnectWithoutSeriesInput = {
    where: EventWhereUniqueInput
    create: XOR<EventCreateWithoutSeriesInput, EventUncheckedCreateWithoutSeriesInput>
  }

  export type EventCreateManySeriesInputEnvelope = {
    data: Enumerable<EventCreateManySeriesInput>
    skipDuplicates?: boolean
  }

  export type followCreateWithoutSeriesInput = {
    id?: string
    type: string
    updatedAt?: Date | string
    createdAt?: Date | string
    User: UserCreateNestedOneWithoutFollowInput
    Event?: EventCreateNestedOneWithoutFollowInput
    Organization?: OrganizationCreateNestedOneWithoutFollowInput
    Race?: RaceCreateNestedOneWithoutFollowInput
    Comp?: CompCreateNestedOneWithoutFollowInput
  }

  export type followUncheckedCreateWithoutSeriesInput = {
    id?: string
    userId: string
    type: string
    eventId?: string | null
    organizationId?: string | null
    raceId?: string | null
    compId?: string | null
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type followCreateOrConnectWithoutSeriesInput = {
    where: followWhereUniqueInput
    create: XOR<followCreateWithoutSeriesInput, followUncheckedCreateWithoutSeriesInput>
  }

  export type followCreateManySeriesInputEnvelope = {
    data: Enumerable<followCreateManySeriesInput>
    skipDuplicates?: boolean
  }

  export type likeCreateWithoutSeriesInput = {
    id?: string
    type: string
    updatedAt?: Date | string
    createdAt?: Date | string
    User: UserCreateNestedOneWithoutLikeInput
    Event?: EventCreateNestedOneWithoutLikeInput
    Organization?: OrganizationCreateNestedOneWithoutLikeInput
    Race?: RaceCreateNestedOneWithoutLikeInput
    Comp?: CompCreateNestedOneWithoutLikeInput
  }

  export type likeUncheckedCreateWithoutSeriesInput = {
    id?: string
    userId: string
    type: string
    eventId?: string | null
    organizationId?: string | null
    raceId?: string | null
    compId?: string | null
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type likeCreateOrConnectWithoutSeriesInput = {
    where: likeWhereUniqueInput
    create: XOR<likeCreateWithoutSeriesInput, likeUncheckedCreateWithoutSeriesInput>
  }

  export type likeCreateManySeriesInputEnvelope = {
    data: Enumerable<likeCreateManySeriesInput>
    skipDuplicates?: boolean
  }

  export type OrganizationUpsertWithoutSeriesInput = {
    update: XOR<OrganizationUpdateWithoutSeriesInput, OrganizationUncheckedUpdateWithoutSeriesInput>
    create: XOR<OrganizationCreateWithoutSeriesInput, OrganizationUncheckedCreateWithoutSeriesInput>
  }

  export type OrganizationUpdateWithoutSeriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    tag?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableJsonNullValueInput | InputJsonValue
    titleImage?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Owner?: UserUpdateOneWithoutOrganizationNestedInput
    Events?: EventUpdateManyWithoutOrganizationNestedInput
    follow?: followUpdateManyWithoutOrganizationNestedInput
    like?: likeUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationUncheckedUpdateWithoutSeriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    tag?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableJsonNullValueInput | InputJsonValue
    titleImage?: NullableStringFieldUpdateOperationsInput | string | null
    ownerId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Events?: EventUncheckedUpdateManyWithoutOrganizationNestedInput
    follow?: followUncheckedUpdateManyWithoutOrganizationNestedInput
    like?: likeUncheckedUpdateManyWithoutOrganizationNestedInput
  }

  export type UserUpsertWithoutSeriesInput = {
    update: XOR<UserUpdateWithoutSeriesInput, UserUncheckedUpdateWithoutSeriesInput>
    create: XOR<UserCreateWithoutSeriesInput, UserUncheckedCreateWithoutSeriesInput>
  }

  export type UserUpdateWithoutSeriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    session?: SessionUpdateManyWithoutUserNestedInput
    Key?: KeyUpdateManyWithoutUserNestedInput
    Article?: ArticleUpdateManyWithoutUserNestedInput
    Event?: EventUpdateManyWithoutPublisherNestedInput
    Organization?: OrganizationUpdateManyWithoutOwnerNestedInput
    Comp?: CompUpdateManyWithoutPublisherNestedInput
    Venue?: VenueUpdateManyWithoutPublisherNestedInput
    UserSettings?: UserSettingsUpdateOneWithoutUserNestedInput
    Race?: RaceUpdateManyWithoutPublisherNestedInput
    Result?: ResultUpdateManyWithoutPublisherNestedInput
    follow?: followUpdateManyWithoutUserNestedInput
    like?: likeUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSeriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    session?: SessionUncheckedUpdateManyWithoutUserNestedInput
    Key?: KeyUncheckedUpdateManyWithoutUserNestedInput
    Article?: ArticleUncheckedUpdateManyWithoutUserNestedInput
    Event?: EventUncheckedUpdateManyWithoutPublisherNestedInput
    Organization?: OrganizationUncheckedUpdateManyWithoutOwnerNestedInput
    Comp?: CompUncheckedUpdateManyWithoutPublisherNestedInput
    Venue?: VenueUncheckedUpdateManyWithoutPublisherNestedInput
    UserSettings?: UserSettingsUncheckedUpdateOneWithoutUserNestedInput
    Race?: RaceUncheckedUpdateManyWithoutPublisherNestedInput
    Result?: ResultUncheckedUpdateManyWithoutPublisherNestedInput
    follow?: followUncheckedUpdateManyWithoutUserNestedInput
    like?: likeUncheckedUpdateManyWithoutUserNestedInput
  }

  export type VenueUpsertWithWhereUniqueWithoutSeriesInput = {
    where: VenueWhereUniqueInput
    update: XOR<VenueUpdateWithoutSeriesInput, VenueUncheckedUpdateWithoutSeriesInput>
    create: XOR<VenueCreateWithoutSeriesInput, VenueUncheckedCreateWithoutSeriesInput>
  }

  export type VenueUpdateWithWhereUniqueWithoutSeriesInput = {
    where: VenueWhereUniqueInput
    data: XOR<VenueUpdateWithoutSeriesInput, VenueUncheckedUpdateWithoutSeriesInput>
  }

  export type VenueUpdateManyWithWhereWithoutSeriesInput = {
    where: VenueScalarWhereInput
    data: XOR<VenueUpdateManyMutationInput, VenueUncheckedUpdateManyWithoutVenuesInput>
  }

  export type VenueScalarWhereInput = {
    AND?: Enumerable<VenueScalarWhereInput>
    OR?: Enumerable<VenueScalarWhereInput>
    NOT?: Enumerable<VenueScalarWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    website?: StringNullableFilter | string | null
    email?: StringNullableFilter | string | null
    burgee?: StringNullableFilter | string | null
    publisherId?: StringNullableFilter | string | null
    createdAt?: DateTimeNullableFilter | Date | string | null
    updatedAt?: DateTimeNullableFilter | Date | string | null
  }

  export type EventUpsertWithWhereUniqueWithoutSeriesInput = {
    where: EventWhereUniqueInput
    update: XOR<EventUpdateWithoutSeriesInput, EventUncheckedUpdateWithoutSeriesInput>
    create: XOR<EventCreateWithoutSeriesInput, EventUncheckedCreateWithoutSeriesInput>
  }

  export type EventUpdateWithWhereUniqueWithoutSeriesInput = {
    where: EventWhereUniqueInput
    data: XOR<EventUpdateWithoutSeriesInput, EventUncheckedUpdateWithoutSeriesInput>
  }

  export type EventUpdateManyWithWhereWithoutSeriesInput = {
    where: EventScalarWhereInput
    data: XOR<EventUpdateManyMutationInput, EventUncheckedUpdateManyWithoutEventsInput>
  }

  export type EventScalarWhereInput = {
    AND?: Enumerable<EventScalarWhereInput>
    OR?: Enumerable<EventScalarWhereInput>
    NOT?: Enumerable<EventScalarWhereInput>
    id?: StringFilter | string
    eventeid?: StringFilter | string
    uniqueIdString?: StringFilter | string
    name?: StringFilter | string
    eventwebsite?: StringNullableFilter | string | null
    email?: StringNullableFilter | string | null
    venueName?: StringNullableFilter | string | null
    description?: StringNullableFilter | string | null
    titleImage?: StringNullableFilter | string | null
    public?: BoolFilter | boolean
    fileInfo?: JsonNullableFilter
    resultColumns?: JsonNullableFilter
    rest?: JsonNullableFilter
    publisherId?: StringNullableFilter | string | null
    venueId?: StringNullableFilter | string | null
    organizationId?: StringNullableFilter | string | null
    createdAt?: DateTimeNullableFilter | Date | string | null
    updatedAt?: DateTimeNullableFilter | Date | string | null
    seriesId?: StringNullableFilter | string | null
  }

  export type followUpsertWithWhereUniqueWithoutSeriesInput = {
    where: followWhereUniqueInput
    update: XOR<followUpdateWithoutSeriesInput, followUncheckedUpdateWithoutSeriesInput>
    create: XOR<followCreateWithoutSeriesInput, followUncheckedCreateWithoutSeriesInput>
  }

  export type followUpdateWithWhereUniqueWithoutSeriesInput = {
    where: followWhereUniqueInput
    data: XOR<followUpdateWithoutSeriesInput, followUncheckedUpdateWithoutSeriesInput>
  }

  export type followUpdateManyWithWhereWithoutSeriesInput = {
    where: followScalarWhereInput
    data: XOR<followUpdateManyMutationInput, followUncheckedUpdateManyWithoutFollowInput>
  }

  export type followScalarWhereInput = {
    AND?: Enumerable<followScalarWhereInput>
    OR?: Enumerable<followScalarWhereInput>
    NOT?: Enumerable<followScalarWhereInput>
    id?: StringFilter | string
    userId?: StringFilter | string
    type?: StringFilter | string
    seriesId?: StringNullableFilter | string | null
    eventId?: StringNullableFilter | string | null
    organizationId?: StringNullableFilter | string | null
    raceId?: StringNullableFilter | string | null
    compId?: StringNullableFilter | string | null
    updatedAt?: DateTimeFilter | Date | string
    createdAt?: DateTimeFilter | Date | string
  }

  export type likeUpsertWithWhereUniqueWithoutSeriesInput = {
    where: likeWhereUniqueInput
    update: XOR<likeUpdateWithoutSeriesInput, likeUncheckedUpdateWithoutSeriesInput>
    create: XOR<likeCreateWithoutSeriesInput, likeUncheckedCreateWithoutSeriesInput>
  }

  export type likeUpdateWithWhereUniqueWithoutSeriesInput = {
    where: likeWhereUniqueInput
    data: XOR<likeUpdateWithoutSeriesInput, likeUncheckedUpdateWithoutSeriesInput>
  }

  export type likeUpdateManyWithWhereWithoutSeriesInput = {
    where: likeScalarWhereInput
    data: XOR<likeUpdateManyMutationInput, likeUncheckedUpdateManyWithoutLikeInput>
  }

  export type likeScalarWhereInput = {
    AND?: Enumerable<likeScalarWhereInput>
    OR?: Enumerable<likeScalarWhereInput>
    NOT?: Enumerable<likeScalarWhereInput>
    id?: StringFilter | string
    userId?: StringFilter | string
    type?: StringFilter | string
    seriesId?: StringNullableFilter | string | null
    eventId?: StringNullableFilter | string | null
    organizationId?: StringNullableFilter | string | null
    raceId?: StringNullableFilter | string | null
    compId?: StringNullableFilter | string | null
    updatedAt?: DateTimeFilter | Date | string
    createdAt?: DateTimeFilter | Date | string
  }

  export type UserCreateWithoutEventInput = {
    id: string
    name: string
    username: string
    email?: string | null
    avatar?: string | null
    session?: SessionCreateNestedManyWithoutUserInput
    Key?: KeyCreateNestedManyWithoutUserInput
    Article?: ArticleCreateNestedManyWithoutUserInput
    Series?: SeriesCreateNestedManyWithoutPublisherInput
    Organization?: OrganizationCreateNestedManyWithoutOwnerInput
    Comp?: CompCreateNestedManyWithoutPublisherInput
    Venue?: VenueCreateNestedManyWithoutPublisherInput
    UserSettings?: UserSettingsCreateNestedOneWithoutUserInput
    Race?: RaceCreateNestedManyWithoutPublisherInput
    Result?: ResultCreateNestedManyWithoutPublisherInput
    follow?: followCreateNestedManyWithoutUserInput
    like?: likeCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutEventInput = {
    id: string
    name: string
    username: string
    email?: string | null
    avatar?: string | null
    session?: SessionUncheckedCreateNestedManyWithoutUserInput
    Key?: KeyUncheckedCreateNestedManyWithoutUserInput
    Article?: ArticleUncheckedCreateNestedManyWithoutUserInput
    Series?: SeriesUncheckedCreateNestedManyWithoutPublisherInput
    Organization?: OrganizationUncheckedCreateNestedManyWithoutOwnerInput
    Comp?: CompUncheckedCreateNestedManyWithoutPublisherInput
    Venue?: VenueUncheckedCreateNestedManyWithoutPublisherInput
    UserSettings?: UserSettingsUncheckedCreateNestedOneWithoutUserInput
    Race?: RaceUncheckedCreateNestedManyWithoutPublisherInput
    Result?: ResultUncheckedCreateNestedManyWithoutPublisherInput
    follow?: followUncheckedCreateNestedManyWithoutUserInput
    like?: likeUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutEventInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutEventInput, UserUncheckedCreateWithoutEventInput>
  }

  export type VenueCreateWithoutEventInput = {
    id?: string
    name: string
    website?: string | null
    email?: string | null
    burgee?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    Publisher?: UserCreateNestedOneWithoutVenueInput
    Series?: SeriesCreateNestedManyWithoutVenuesInput
  }

  export type VenueUncheckedCreateWithoutEventInput = {
    id?: string
    name: string
    website?: string | null
    email?: string | null
    burgee?: string | null
    publisherId?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    Series?: SeriesUncheckedCreateNestedManyWithoutVenuesInput
  }

  export type VenueCreateOrConnectWithoutEventInput = {
    where: VenueWhereUniqueInput
    create: XOR<VenueCreateWithoutEventInput, VenueUncheckedCreateWithoutEventInput>
  }

  export type OrganizationCreateWithoutEventsInput = {
    id?: string
    name: string
    description?: string | null
    tag?: string | null
    website?: string | null
    email?: string | null
    contact?: NullableJsonNullValueInput | InputJsonValue
    titleImage?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    Owner?: UserCreateNestedOneWithoutOrganizationInput
    Series?: SeriesCreateNestedManyWithoutOrgInput
    follow?: followCreateNestedManyWithoutOrganizationInput
    like?: likeCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUncheckedCreateWithoutEventsInput = {
    id?: string
    name: string
    description?: string | null
    tag?: string | null
    website?: string | null
    email?: string | null
    contact?: NullableJsonNullValueInput | InputJsonValue
    titleImage?: string | null
    ownerId?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    Series?: SeriesUncheckedCreateNestedManyWithoutOrgInput
    follow?: followUncheckedCreateNestedManyWithoutOrganizationInput
    like?: likeUncheckedCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationCreateOrConnectWithoutEventsInput = {
    where: OrganizationWhereUniqueInput
    create: XOR<OrganizationCreateWithoutEventsInput, OrganizationUncheckedCreateWithoutEventsInput>
  }

  export type RaceCreateWithoutEventInput = {
    id?: string
    raceId?: string | null
    uniqueRaceString?: string | null
    name?: string | null
    starts?: NullableJsonNullValueInput | InputJsonValue
    rank?: string | null
    date?: string | null
    time?: string | null
    notes?: string | null
    sailed?: string | null
    resultColumns?: NullableJsonNullValueInput | InputJsonValue
    rest?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    Publisher?: UserCreateNestedOneWithoutRaceInput
    Comps?: CompCreateNestedManyWithoutRacesInput
    Results?: ResultCreateNestedManyWithoutRaceInput
    follow?: followCreateNestedManyWithoutRaceInput
    like?: likeCreateNestedManyWithoutRaceInput
  }

  export type RaceUncheckedCreateWithoutEventInput = {
    id?: string
    raceId?: string | null
    uniqueRaceString?: string | null
    name?: string | null
    starts?: NullableJsonNullValueInput | InputJsonValue
    rank?: string | null
    date?: string | null
    time?: string | null
    notes?: string | null
    sailed?: string | null
    resultColumns?: NullableJsonNullValueInput | InputJsonValue
    rest?: NullableJsonNullValueInput | InputJsonValue
    publisherId?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    Comps?: CompUncheckedCreateNestedManyWithoutRacesInput
    Results?: ResultUncheckedCreateNestedManyWithoutRaceInput
    follow?: followUncheckedCreateNestedManyWithoutRaceInput
    like?: likeUncheckedCreateNestedManyWithoutRaceInput
  }

  export type RaceCreateOrConnectWithoutEventInput = {
    where: RaceWhereUniqueInput
    create: XOR<RaceCreateWithoutEventInput, RaceUncheckedCreateWithoutEventInput>
  }

  export type RaceCreateManyEventInputEnvelope = {
    data: Enumerable<RaceCreateManyEventInput>
    skipDuplicates?: boolean
  }

  export type ResultCreateWithoutEventInput = {
    id?: string
    resultId?: string | null
    finish?: string | null
    start?: string | null
    points?: string | null
    position?: string | null
    discard?: string | null
    corrected?: string | null
    resultType?: string | null
    elasped?: string | null
    supposedRating?: string | null
    elapsedWin?: string | null
    ratingWin?: string | null
    rrset?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    Publisher: UserCreateNestedOneWithoutResultInput
    Comp?: CompCreateNestedOneWithoutResultsInput
    Race?: RaceCreateNestedOneWithoutResultsInput
  }

  export type ResultUncheckedCreateWithoutEventInput = {
    id?: string
    resultId?: string | null
    finish?: string | null
    start?: string | null
    points?: string | null
    position?: string | null
    discard?: string | null
    corrected?: string | null
    resultType?: string | null
    elasped?: string | null
    supposedRating?: string | null
    elapsedWin?: string | null
    ratingWin?: string | null
    rrset?: string | null
    publisherId: string
    compId?: string | null
    raceId?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
  }

  export type ResultCreateOrConnectWithoutEventInput = {
    where: ResultWhereUniqueInput
    create: XOR<ResultCreateWithoutEventInput, ResultUncheckedCreateWithoutEventInput>
  }

  export type ResultCreateManyEventInputEnvelope = {
    data: Enumerable<ResultCreateManyEventInput>
    skipDuplicates?: boolean
  }

  export type CompCreateWithoutEventInput = {
    id?: string
    compId: string
    club?: string | null
    boat?: string | null
    skipper?: string | null
    fleet?: string | null
    division?: string | null
    rating?: string | null
    rank?: string | null
    nett?: string | null
    total?: string | null
    rest?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    Publisher?: UserCreateNestedOneWithoutCompInput
    Results?: ResultCreateNestedManyWithoutCompInput
    Races?: RaceCreateNestedManyWithoutCompsInput
    follow?: followCreateNestedManyWithoutCompInput
    like?: likeCreateNestedManyWithoutCompInput
  }

  export type CompUncheckedCreateWithoutEventInput = {
    id?: string
    compId: string
    club?: string | null
    boat?: string | null
    skipper?: string | null
    fleet?: string | null
    division?: string | null
    rating?: string | null
    rank?: string | null
    nett?: string | null
    total?: string | null
    rest?: NullableJsonNullValueInput | InputJsonValue
    publisherId?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    Results?: ResultUncheckedCreateNestedManyWithoutCompInput
    Races?: RaceUncheckedCreateNestedManyWithoutCompsInput
    follow?: followUncheckedCreateNestedManyWithoutCompInput
    like?: likeUncheckedCreateNestedManyWithoutCompInput
  }

  export type CompCreateOrConnectWithoutEventInput = {
    where: CompWhereUniqueInput
    create: XOR<CompCreateWithoutEventInput, CompUncheckedCreateWithoutEventInput>
  }

  export type CompCreateManyEventInputEnvelope = {
    data: Enumerable<CompCreateManyEventInput>
    skipDuplicates?: boolean
  }

  export type SeriesCreateWithoutEventsInput = {
    id?: string
    name: string
    description?: string | null
    rest?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    Org?: OrganizationCreateNestedOneWithoutSeriesInput
    Publisher?: UserCreateNestedOneWithoutSeriesInput
    Venues?: VenueCreateNestedManyWithoutSeriesInput
    follow?: followCreateNestedManyWithoutSeriesInput
    like?: likeCreateNestedManyWithoutSeriesInput
  }

  export type SeriesUncheckedCreateWithoutEventsInput = {
    id?: string
    name: string
    description?: string | null
    rest?: NullableJsonNullValueInput | InputJsonValue
    organizationId?: string | null
    publisherId?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    Venues?: VenueUncheckedCreateNestedManyWithoutSeriesInput
    follow?: followUncheckedCreateNestedManyWithoutSeriesInput
    like?: likeUncheckedCreateNestedManyWithoutSeriesInput
  }

  export type SeriesCreateOrConnectWithoutEventsInput = {
    where: SeriesWhereUniqueInput
    create: XOR<SeriesCreateWithoutEventsInput, SeriesUncheckedCreateWithoutEventsInput>
  }

  export type followCreateWithoutEventInput = {
    id?: string
    type: string
    updatedAt?: Date | string
    createdAt?: Date | string
    User: UserCreateNestedOneWithoutFollowInput
    Series?: SeriesCreateNestedOneWithoutFollowInput
    Organization?: OrganizationCreateNestedOneWithoutFollowInput
    Race?: RaceCreateNestedOneWithoutFollowInput
    Comp?: CompCreateNestedOneWithoutFollowInput
  }

  export type followUncheckedCreateWithoutEventInput = {
    id?: string
    userId: string
    type: string
    seriesId?: string | null
    organizationId?: string | null
    raceId?: string | null
    compId?: string | null
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type followCreateOrConnectWithoutEventInput = {
    where: followWhereUniqueInput
    create: XOR<followCreateWithoutEventInput, followUncheckedCreateWithoutEventInput>
  }

  export type followCreateManyEventInputEnvelope = {
    data: Enumerable<followCreateManyEventInput>
    skipDuplicates?: boolean
  }

  export type likeCreateWithoutEventInput = {
    id?: string
    type: string
    updatedAt?: Date | string
    createdAt?: Date | string
    User: UserCreateNestedOneWithoutLikeInput
    Series?: SeriesCreateNestedOneWithoutLikeInput
    Organization?: OrganizationCreateNestedOneWithoutLikeInput
    Race?: RaceCreateNestedOneWithoutLikeInput
    Comp?: CompCreateNestedOneWithoutLikeInput
  }

  export type likeUncheckedCreateWithoutEventInput = {
    id?: string
    userId: string
    type: string
    seriesId?: string | null
    organizationId?: string | null
    raceId?: string | null
    compId?: string | null
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type likeCreateOrConnectWithoutEventInput = {
    where: likeWhereUniqueInput
    create: XOR<likeCreateWithoutEventInput, likeUncheckedCreateWithoutEventInput>
  }

  export type likeCreateManyEventInputEnvelope = {
    data: Enumerable<likeCreateManyEventInput>
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutEventInput = {
    update: XOR<UserUpdateWithoutEventInput, UserUncheckedUpdateWithoutEventInput>
    create: XOR<UserCreateWithoutEventInput, UserUncheckedCreateWithoutEventInput>
  }

  export type UserUpdateWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    session?: SessionUpdateManyWithoutUserNestedInput
    Key?: KeyUpdateManyWithoutUserNestedInput
    Article?: ArticleUpdateManyWithoutUserNestedInput
    Series?: SeriesUpdateManyWithoutPublisherNestedInput
    Organization?: OrganizationUpdateManyWithoutOwnerNestedInput
    Comp?: CompUpdateManyWithoutPublisherNestedInput
    Venue?: VenueUpdateManyWithoutPublisherNestedInput
    UserSettings?: UserSettingsUpdateOneWithoutUserNestedInput
    Race?: RaceUpdateManyWithoutPublisherNestedInput
    Result?: ResultUpdateManyWithoutPublisherNestedInput
    follow?: followUpdateManyWithoutUserNestedInput
    like?: likeUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    session?: SessionUncheckedUpdateManyWithoutUserNestedInput
    Key?: KeyUncheckedUpdateManyWithoutUserNestedInput
    Article?: ArticleUncheckedUpdateManyWithoutUserNestedInput
    Series?: SeriesUncheckedUpdateManyWithoutPublisherNestedInput
    Organization?: OrganizationUncheckedUpdateManyWithoutOwnerNestedInput
    Comp?: CompUncheckedUpdateManyWithoutPublisherNestedInput
    Venue?: VenueUncheckedUpdateManyWithoutPublisherNestedInput
    UserSettings?: UserSettingsUncheckedUpdateOneWithoutUserNestedInput
    Race?: RaceUncheckedUpdateManyWithoutPublisherNestedInput
    Result?: ResultUncheckedUpdateManyWithoutPublisherNestedInput
    follow?: followUncheckedUpdateManyWithoutUserNestedInput
    like?: likeUncheckedUpdateManyWithoutUserNestedInput
  }

  export type VenueUpsertWithoutEventInput = {
    update: XOR<VenueUpdateWithoutEventInput, VenueUncheckedUpdateWithoutEventInput>
    create: XOR<VenueCreateWithoutEventInput, VenueUncheckedCreateWithoutEventInput>
  }

  export type VenueUpdateWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    burgee?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Publisher?: UserUpdateOneWithoutVenueNestedInput
    Series?: SeriesUpdateManyWithoutVenuesNestedInput
  }

  export type VenueUncheckedUpdateWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    burgee?: NullableStringFieldUpdateOperationsInput | string | null
    publisherId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Series?: SeriesUncheckedUpdateManyWithoutVenuesNestedInput
  }

  export type OrganizationUpsertWithoutEventsInput = {
    update: XOR<OrganizationUpdateWithoutEventsInput, OrganizationUncheckedUpdateWithoutEventsInput>
    create: XOR<OrganizationCreateWithoutEventsInput, OrganizationUncheckedCreateWithoutEventsInput>
  }

  export type OrganizationUpdateWithoutEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    tag?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableJsonNullValueInput | InputJsonValue
    titleImage?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Owner?: UserUpdateOneWithoutOrganizationNestedInput
    Series?: SeriesUpdateManyWithoutOrgNestedInput
    follow?: followUpdateManyWithoutOrganizationNestedInput
    like?: likeUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationUncheckedUpdateWithoutEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    tag?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableJsonNullValueInput | InputJsonValue
    titleImage?: NullableStringFieldUpdateOperationsInput | string | null
    ownerId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Series?: SeriesUncheckedUpdateManyWithoutOrgNestedInput
    follow?: followUncheckedUpdateManyWithoutOrganizationNestedInput
    like?: likeUncheckedUpdateManyWithoutOrganizationNestedInput
  }

  export type RaceUpsertWithWhereUniqueWithoutEventInput = {
    where: RaceWhereUniqueInput
    update: XOR<RaceUpdateWithoutEventInput, RaceUncheckedUpdateWithoutEventInput>
    create: XOR<RaceCreateWithoutEventInput, RaceUncheckedCreateWithoutEventInput>
  }

  export type RaceUpdateWithWhereUniqueWithoutEventInput = {
    where: RaceWhereUniqueInput
    data: XOR<RaceUpdateWithoutEventInput, RaceUncheckedUpdateWithoutEventInput>
  }

  export type RaceUpdateManyWithWhereWithoutEventInput = {
    where: RaceScalarWhereInput
    data: XOR<RaceUpdateManyMutationInput, RaceUncheckedUpdateManyWithoutRacesInput>
  }

  export type RaceScalarWhereInput = {
    AND?: Enumerable<RaceScalarWhereInput>
    OR?: Enumerable<RaceScalarWhereInput>
    NOT?: Enumerable<RaceScalarWhereInput>
    id?: StringFilter | string
    raceId?: StringNullableFilter | string | null
    uniqueRaceString?: StringNullableFilter | string | null
    name?: StringNullableFilter | string | null
    starts?: JsonNullableFilter
    rank?: StringNullableFilter | string | null
    date?: StringNullableFilter | string | null
    time?: StringNullableFilter | string | null
    notes?: StringNullableFilter | string | null
    sailed?: StringNullableFilter | string | null
    resultColumns?: JsonNullableFilter
    rest?: JsonNullableFilter
    eventId?: StringNullableFilter | string | null
    publisherId?: StringNullableFilter | string | null
    createdAt?: DateTimeNullableFilter | Date | string | null
    updatedAt?: DateTimeNullableFilter | Date | string | null
  }

  export type ResultUpsertWithWhereUniqueWithoutEventInput = {
    where: ResultWhereUniqueInput
    update: XOR<ResultUpdateWithoutEventInput, ResultUncheckedUpdateWithoutEventInput>
    create: XOR<ResultCreateWithoutEventInput, ResultUncheckedCreateWithoutEventInput>
  }

  export type ResultUpdateWithWhereUniqueWithoutEventInput = {
    where: ResultWhereUniqueInput
    data: XOR<ResultUpdateWithoutEventInput, ResultUncheckedUpdateWithoutEventInput>
  }

  export type ResultUpdateManyWithWhereWithoutEventInput = {
    where: ResultScalarWhereInput
    data: XOR<ResultUpdateManyMutationInput, ResultUncheckedUpdateManyWithoutResultsInput>
  }

  export type ResultScalarWhereInput = {
    AND?: Enumerable<ResultScalarWhereInput>
    OR?: Enumerable<ResultScalarWhereInput>
    NOT?: Enumerable<ResultScalarWhereInput>
    id?: StringFilter | string
    resultId?: StringNullableFilter | string | null
    finish?: StringNullableFilter | string | null
    start?: StringNullableFilter | string | null
    points?: StringNullableFilter | string | null
    position?: StringNullableFilter | string | null
    discard?: StringNullableFilter | string | null
    corrected?: StringNullableFilter | string | null
    resultType?: StringNullableFilter | string | null
    elasped?: StringNullableFilter | string | null
    supposedRating?: StringNullableFilter | string | null
    elapsedWin?: StringNullableFilter | string | null
    ratingWin?: StringNullableFilter | string | null
    rrset?: StringNullableFilter | string | null
    publisherId?: StringFilter | string
    eventId?: StringNullableFilter | string | null
    compId?: StringNullableFilter | string | null
    raceId?: StringNullableFilter | string | null
    createdAt?: DateTimeNullableFilter | Date | string | null
    updatedAt?: DateTimeNullableFilter | Date | string | null
  }

  export type CompUpsertWithWhereUniqueWithoutEventInput = {
    where: CompWhereUniqueInput
    update: XOR<CompUpdateWithoutEventInput, CompUncheckedUpdateWithoutEventInput>
    create: XOR<CompCreateWithoutEventInput, CompUncheckedCreateWithoutEventInput>
  }

  export type CompUpdateWithWhereUniqueWithoutEventInput = {
    where: CompWhereUniqueInput
    data: XOR<CompUpdateWithoutEventInput, CompUncheckedUpdateWithoutEventInput>
  }

  export type CompUpdateManyWithWhereWithoutEventInput = {
    where: CompScalarWhereInput
    data: XOR<CompUpdateManyMutationInput, CompUncheckedUpdateManyWithoutCompsInput>
  }

  export type CompScalarWhereInput = {
    AND?: Enumerable<CompScalarWhereInput>
    OR?: Enumerable<CompScalarWhereInput>
    NOT?: Enumerable<CompScalarWhereInput>
    id?: StringFilter | string
    compId?: StringFilter | string
    club?: StringNullableFilter | string | null
    boat?: StringNullableFilter | string | null
    skipper?: StringNullableFilter | string | null
    fleet?: StringNullableFilter | string | null
    division?: StringNullableFilter | string | null
    rating?: StringNullableFilter | string | null
    rank?: StringNullableFilter | string | null
    nett?: StringNullableFilter | string | null
    total?: StringNullableFilter | string | null
    rest?: JsonNullableFilter
    publisherId?: StringNullableFilter | string | null
    eventId?: StringNullableFilter | string | null
    createdAt?: DateTimeNullableFilter | Date | string | null
    updatedAt?: DateTimeNullableFilter | Date | string | null
  }

  export type SeriesUpsertWithoutEventsInput = {
    update: XOR<SeriesUpdateWithoutEventsInput, SeriesUncheckedUpdateWithoutEventsInput>
    create: XOR<SeriesCreateWithoutEventsInput, SeriesUncheckedCreateWithoutEventsInput>
  }

  export type SeriesUpdateWithoutEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    rest?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Org?: OrganizationUpdateOneWithoutSeriesNestedInput
    Publisher?: UserUpdateOneWithoutSeriesNestedInput
    Venues?: VenueUpdateManyWithoutSeriesNestedInput
    follow?: followUpdateManyWithoutSeriesNestedInput
    like?: likeUpdateManyWithoutSeriesNestedInput
  }

  export type SeriesUncheckedUpdateWithoutEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    rest?: NullableJsonNullValueInput | InputJsonValue
    organizationId?: NullableStringFieldUpdateOperationsInput | string | null
    publisherId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Venues?: VenueUncheckedUpdateManyWithoutSeriesNestedInput
    follow?: followUncheckedUpdateManyWithoutSeriesNestedInput
    like?: likeUncheckedUpdateManyWithoutSeriesNestedInput
  }

  export type followUpsertWithWhereUniqueWithoutEventInput = {
    where: followWhereUniqueInput
    update: XOR<followUpdateWithoutEventInput, followUncheckedUpdateWithoutEventInput>
    create: XOR<followCreateWithoutEventInput, followUncheckedCreateWithoutEventInput>
  }

  export type followUpdateWithWhereUniqueWithoutEventInput = {
    where: followWhereUniqueInput
    data: XOR<followUpdateWithoutEventInput, followUncheckedUpdateWithoutEventInput>
  }

  export type followUpdateManyWithWhereWithoutEventInput = {
    where: followScalarWhereInput
    data: XOR<followUpdateManyMutationInput, followUncheckedUpdateManyWithoutFollowInput>
  }

  export type likeUpsertWithWhereUniqueWithoutEventInput = {
    where: likeWhereUniqueInput
    update: XOR<likeUpdateWithoutEventInput, likeUncheckedUpdateWithoutEventInput>
    create: XOR<likeCreateWithoutEventInput, likeUncheckedCreateWithoutEventInput>
  }

  export type likeUpdateWithWhereUniqueWithoutEventInput = {
    where: likeWhereUniqueInput
    data: XOR<likeUpdateWithoutEventInput, likeUncheckedUpdateWithoutEventInput>
  }

  export type likeUpdateManyWithWhereWithoutEventInput = {
    where: likeScalarWhereInput
    data: XOR<likeUpdateManyMutationInput, likeUncheckedUpdateManyWithoutLikeInput>
  }

  export type EventCreateWithoutRacesInput = {
    id?: string
    eventeid: string
    uniqueIdString: string
    name: string
    eventwebsite?: string | null
    email?: string | null
    venueName?: string | null
    description?: string | null
    titleImage?: string | null
    public?: boolean
    fileInfo?: NullableJsonNullValueInput | InputJsonValue
    resultColumns?: NullableJsonNullValueInput | InputJsonValue
    rest?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    Publisher?: UserCreateNestedOneWithoutEventInput
    Venue?: VenueCreateNestedOneWithoutEventInput
    Organization?: OrganizationCreateNestedOneWithoutEventsInput
    Results?: ResultCreateNestedManyWithoutEventInput
    Comps?: CompCreateNestedManyWithoutEventInput
    Series?: SeriesCreateNestedOneWithoutEventsInput
    follow?: followCreateNestedManyWithoutEventInput
    like?: likeCreateNestedManyWithoutEventInput
  }

  export type EventUncheckedCreateWithoutRacesInput = {
    id?: string
    eventeid: string
    uniqueIdString: string
    name: string
    eventwebsite?: string | null
    email?: string | null
    venueName?: string | null
    description?: string | null
    titleImage?: string | null
    public?: boolean
    fileInfo?: NullableJsonNullValueInput | InputJsonValue
    resultColumns?: NullableJsonNullValueInput | InputJsonValue
    rest?: NullableJsonNullValueInput | InputJsonValue
    publisherId?: string | null
    venueId?: string | null
    organizationId?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    seriesId?: string | null
    Results?: ResultUncheckedCreateNestedManyWithoutEventInput
    Comps?: CompUncheckedCreateNestedManyWithoutEventInput
    follow?: followUncheckedCreateNestedManyWithoutEventInput
    like?: likeUncheckedCreateNestedManyWithoutEventInput
  }

  export type EventCreateOrConnectWithoutRacesInput = {
    where: EventWhereUniqueInput
    create: XOR<EventCreateWithoutRacesInput, EventUncheckedCreateWithoutRacesInput>
  }

  export type UserCreateWithoutRaceInput = {
    id: string
    name: string
    username: string
    email?: string | null
    avatar?: string | null
    session?: SessionCreateNestedManyWithoutUserInput
    Key?: KeyCreateNestedManyWithoutUserInput
    Article?: ArticleCreateNestedManyWithoutUserInput
    Series?: SeriesCreateNestedManyWithoutPublisherInput
    Event?: EventCreateNestedManyWithoutPublisherInput
    Organization?: OrganizationCreateNestedManyWithoutOwnerInput
    Comp?: CompCreateNestedManyWithoutPublisherInput
    Venue?: VenueCreateNestedManyWithoutPublisherInput
    UserSettings?: UserSettingsCreateNestedOneWithoutUserInput
    Result?: ResultCreateNestedManyWithoutPublisherInput
    follow?: followCreateNestedManyWithoutUserInput
    like?: likeCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutRaceInput = {
    id: string
    name: string
    username: string
    email?: string | null
    avatar?: string | null
    session?: SessionUncheckedCreateNestedManyWithoutUserInput
    Key?: KeyUncheckedCreateNestedManyWithoutUserInput
    Article?: ArticleUncheckedCreateNestedManyWithoutUserInput
    Series?: SeriesUncheckedCreateNestedManyWithoutPublisherInput
    Event?: EventUncheckedCreateNestedManyWithoutPublisherInput
    Organization?: OrganizationUncheckedCreateNestedManyWithoutOwnerInput
    Comp?: CompUncheckedCreateNestedManyWithoutPublisherInput
    Venue?: VenueUncheckedCreateNestedManyWithoutPublisherInput
    UserSettings?: UserSettingsUncheckedCreateNestedOneWithoutUserInput
    Result?: ResultUncheckedCreateNestedManyWithoutPublisherInput
    follow?: followUncheckedCreateNestedManyWithoutUserInput
    like?: likeUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutRaceInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRaceInput, UserUncheckedCreateWithoutRaceInput>
  }

  export type CompCreateWithoutRacesInput = {
    id?: string
    compId: string
    club?: string | null
    boat?: string | null
    skipper?: string | null
    fleet?: string | null
    division?: string | null
    rating?: string | null
    rank?: string | null
    nett?: string | null
    total?: string | null
    rest?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    Publisher?: UserCreateNestedOneWithoutCompInput
    Event?: EventCreateNestedOneWithoutCompsInput
    Results?: ResultCreateNestedManyWithoutCompInput
    follow?: followCreateNestedManyWithoutCompInput
    like?: likeCreateNestedManyWithoutCompInput
  }

  export type CompUncheckedCreateWithoutRacesInput = {
    id?: string
    compId: string
    club?: string | null
    boat?: string | null
    skipper?: string | null
    fleet?: string | null
    division?: string | null
    rating?: string | null
    rank?: string | null
    nett?: string | null
    total?: string | null
    rest?: NullableJsonNullValueInput | InputJsonValue
    publisherId?: string | null
    eventId?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    Results?: ResultUncheckedCreateNestedManyWithoutCompInput
    follow?: followUncheckedCreateNestedManyWithoutCompInput
    like?: likeUncheckedCreateNestedManyWithoutCompInput
  }

  export type CompCreateOrConnectWithoutRacesInput = {
    where: CompWhereUniqueInput
    create: XOR<CompCreateWithoutRacesInput, CompUncheckedCreateWithoutRacesInput>
  }

  export type ResultCreateWithoutRaceInput = {
    id?: string
    resultId?: string | null
    finish?: string | null
    start?: string | null
    points?: string | null
    position?: string | null
    discard?: string | null
    corrected?: string | null
    resultType?: string | null
    elasped?: string | null
    supposedRating?: string | null
    elapsedWin?: string | null
    ratingWin?: string | null
    rrset?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    Publisher: UserCreateNestedOneWithoutResultInput
    Event?: EventCreateNestedOneWithoutResultsInput
    Comp?: CompCreateNestedOneWithoutResultsInput
  }

  export type ResultUncheckedCreateWithoutRaceInput = {
    id?: string
    resultId?: string | null
    finish?: string | null
    start?: string | null
    points?: string | null
    position?: string | null
    discard?: string | null
    corrected?: string | null
    resultType?: string | null
    elasped?: string | null
    supposedRating?: string | null
    elapsedWin?: string | null
    ratingWin?: string | null
    rrset?: string | null
    publisherId: string
    eventId?: string | null
    compId?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
  }

  export type ResultCreateOrConnectWithoutRaceInput = {
    where: ResultWhereUniqueInput
    create: XOR<ResultCreateWithoutRaceInput, ResultUncheckedCreateWithoutRaceInput>
  }

  export type ResultCreateManyRaceInputEnvelope = {
    data: Enumerable<ResultCreateManyRaceInput>
    skipDuplicates?: boolean
  }

  export type followCreateWithoutRaceInput = {
    id?: string
    type: string
    updatedAt?: Date | string
    createdAt?: Date | string
    User: UserCreateNestedOneWithoutFollowInput
    Series?: SeriesCreateNestedOneWithoutFollowInput
    Event?: EventCreateNestedOneWithoutFollowInput
    Organization?: OrganizationCreateNestedOneWithoutFollowInput
    Comp?: CompCreateNestedOneWithoutFollowInput
  }

  export type followUncheckedCreateWithoutRaceInput = {
    id?: string
    userId: string
    type: string
    seriesId?: string | null
    eventId?: string | null
    organizationId?: string | null
    compId?: string | null
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type followCreateOrConnectWithoutRaceInput = {
    where: followWhereUniqueInput
    create: XOR<followCreateWithoutRaceInput, followUncheckedCreateWithoutRaceInput>
  }

  export type followCreateManyRaceInputEnvelope = {
    data: Enumerable<followCreateManyRaceInput>
    skipDuplicates?: boolean
  }

  export type likeCreateWithoutRaceInput = {
    id?: string
    type: string
    updatedAt?: Date | string
    createdAt?: Date | string
    User: UserCreateNestedOneWithoutLikeInput
    Series?: SeriesCreateNestedOneWithoutLikeInput
    Event?: EventCreateNestedOneWithoutLikeInput
    Organization?: OrganizationCreateNestedOneWithoutLikeInput
    Comp?: CompCreateNestedOneWithoutLikeInput
  }

  export type likeUncheckedCreateWithoutRaceInput = {
    id?: string
    userId: string
    type: string
    seriesId?: string | null
    eventId?: string | null
    organizationId?: string | null
    compId?: string | null
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type likeCreateOrConnectWithoutRaceInput = {
    where: likeWhereUniqueInput
    create: XOR<likeCreateWithoutRaceInput, likeUncheckedCreateWithoutRaceInput>
  }

  export type likeCreateManyRaceInputEnvelope = {
    data: Enumerable<likeCreateManyRaceInput>
    skipDuplicates?: boolean
  }

  export type EventUpsertWithoutRacesInput = {
    update: XOR<EventUpdateWithoutRacesInput, EventUncheckedUpdateWithoutRacesInput>
    create: XOR<EventCreateWithoutRacesInput, EventUncheckedCreateWithoutRacesInput>
  }

  export type EventUpdateWithoutRacesInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventeid?: StringFieldUpdateOperationsInput | string
    uniqueIdString?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    eventwebsite?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    venueName?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    titleImage?: NullableStringFieldUpdateOperationsInput | string | null
    public?: BoolFieldUpdateOperationsInput | boolean
    fileInfo?: NullableJsonNullValueInput | InputJsonValue
    resultColumns?: NullableJsonNullValueInput | InputJsonValue
    rest?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Publisher?: UserUpdateOneWithoutEventNestedInput
    Venue?: VenueUpdateOneWithoutEventNestedInput
    Organization?: OrganizationUpdateOneWithoutEventsNestedInput
    Results?: ResultUpdateManyWithoutEventNestedInput
    Comps?: CompUpdateManyWithoutEventNestedInput
    Series?: SeriesUpdateOneWithoutEventsNestedInput
    follow?: followUpdateManyWithoutEventNestedInput
    like?: likeUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateWithoutRacesInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventeid?: StringFieldUpdateOperationsInput | string
    uniqueIdString?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    eventwebsite?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    venueName?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    titleImage?: NullableStringFieldUpdateOperationsInput | string | null
    public?: BoolFieldUpdateOperationsInput | boolean
    fileInfo?: NullableJsonNullValueInput | InputJsonValue
    resultColumns?: NullableJsonNullValueInput | InputJsonValue
    rest?: NullableJsonNullValueInput | InputJsonValue
    publisherId?: NullableStringFieldUpdateOperationsInput | string | null
    venueId?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    seriesId?: NullableStringFieldUpdateOperationsInput | string | null
    Results?: ResultUncheckedUpdateManyWithoutEventNestedInput
    Comps?: CompUncheckedUpdateManyWithoutEventNestedInput
    follow?: followUncheckedUpdateManyWithoutEventNestedInput
    like?: likeUncheckedUpdateManyWithoutEventNestedInput
  }

  export type UserUpsertWithoutRaceInput = {
    update: XOR<UserUpdateWithoutRaceInput, UserUncheckedUpdateWithoutRaceInput>
    create: XOR<UserCreateWithoutRaceInput, UserUncheckedCreateWithoutRaceInput>
  }

  export type UserUpdateWithoutRaceInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    session?: SessionUpdateManyWithoutUserNestedInput
    Key?: KeyUpdateManyWithoutUserNestedInput
    Article?: ArticleUpdateManyWithoutUserNestedInput
    Series?: SeriesUpdateManyWithoutPublisherNestedInput
    Event?: EventUpdateManyWithoutPublisherNestedInput
    Organization?: OrganizationUpdateManyWithoutOwnerNestedInput
    Comp?: CompUpdateManyWithoutPublisherNestedInput
    Venue?: VenueUpdateManyWithoutPublisherNestedInput
    UserSettings?: UserSettingsUpdateOneWithoutUserNestedInput
    Result?: ResultUpdateManyWithoutPublisherNestedInput
    follow?: followUpdateManyWithoutUserNestedInput
    like?: likeUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutRaceInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    session?: SessionUncheckedUpdateManyWithoutUserNestedInput
    Key?: KeyUncheckedUpdateManyWithoutUserNestedInput
    Article?: ArticleUncheckedUpdateManyWithoutUserNestedInput
    Series?: SeriesUncheckedUpdateManyWithoutPublisherNestedInput
    Event?: EventUncheckedUpdateManyWithoutPublisherNestedInput
    Organization?: OrganizationUncheckedUpdateManyWithoutOwnerNestedInput
    Comp?: CompUncheckedUpdateManyWithoutPublisherNestedInput
    Venue?: VenueUncheckedUpdateManyWithoutPublisherNestedInput
    UserSettings?: UserSettingsUncheckedUpdateOneWithoutUserNestedInput
    Result?: ResultUncheckedUpdateManyWithoutPublisherNestedInput
    follow?: followUncheckedUpdateManyWithoutUserNestedInput
    like?: likeUncheckedUpdateManyWithoutUserNestedInput
  }

  export type CompUpsertWithWhereUniqueWithoutRacesInput = {
    where: CompWhereUniqueInput
    update: XOR<CompUpdateWithoutRacesInput, CompUncheckedUpdateWithoutRacesInput>
    create: XOR<CompCreateWithoutRacesInput, CompUncheckedCreateWithoutRacesInput>
  }

  export type CompUpdateWithWhereUniqueWithoutRacesInput = {
    where: CompWhereUniqueInput
    data: XOR<CompUpdateWithoutRacesInput, CompUncheckedUpdateWithoutRacesInput>
  }

  export type CompUpdateManyWithWhereWithoutRacesInput = {
    where: CompScalarWhereInput
    data: XOR<CompUpdateManyMutationInput, CompUncheckedUpdateManyWithoutCompsInput>
  }

  export type ResultUpsertWithWhereUniqueWithoutRaceInput = {
    where: ResultWhereUniqueInput
    update: XOR<ResultUpdateWithoutRaceInput, ResultUncheckedUpdateWithoutRaceInput>
    create: XOR<ResultCreateWithoutRaceInput, ResultUncheckedCreateWithoutRaceInput>
  }

  export type ResultUpdateWithWhereUniqueWithoutRaceInput = {
    where: ResultWhereUniqueInput
    data: XOR<ResultUpdateWithoutRaceInput, ResultUncheckedUpdateWithoutRaceInput>
  }

  export type ResultUpdateManyWithWhereWithoutRaceInput = {
    where: ResultScalarWhereInput
    data: XOR<ResultUpdateManyMutationInput, ResultUncheckedUpdateManyWithoutResultsInput>
  }

  export type followUpsertWithWhereUniqueWithoutRaceInput = {
    where: followWhereUniqueInput
    update: XOR<followUpdateWithoutRaceInput, followUncheckedUpdateWithoutRaceInput>
    create: XOR<followCreateWithoutRaceInput, followUncheckedCreateWithoutRaceInput>
  }

  export type followUpdateWithWhereUniqueWithoutRaceInput = {
    where: followWhereUniqueInput
    data: XOR<followUpdateWithoutRaceInput, followUncheckedUpdateWithoutRaceInput>
  }

  export type followUpdateManyWithWhereWithoutRaceInput = {
    where: followScalarWhereInput
    data: XOR<followUpdateManyMutationInput, followUncheckedUpdateManyWithoutFollowInput>
  }

  export type likeUpsertWithWhereUniqueWithoutRaceInput = {
    where: likeWhereUniqueInput
    update: XOR<likeUpdateWithoutRaceInput, likeUncheckedUpdateWithoutRaceInput>
    create: XOR<likeCreateWithoutRaceInput, likeUncheckedCreateWithoutRaceInput>
  }

  export type likeUpdateWithWhereUniqueWithoutRaceInput = {
    where: likeWhereUniqueInput
    data: XOR<likeUpdateWithoutRaceInput, likeUncheckedUpdateWithoutRaceInput>
  }

  export type likeUpdateManyWithWhereWithoutRaceInput = {
    where: likeScalarWhereInput
    data: XOR<likeUpdateManyMutationInput, likeUncheckedUpdateManyWithoutLikeInput>
  }

  export type UserCreateWithoutCompInput = {
    id: string
    name: string
    username: string
    email?: string | null
    avatar?: string | null
    session?: SessionCreateNestedManyWithoutUserInput
    Key?: KeyCreateNestedManyWithoutUserInput
    Article?: ArticleCreateNestedManyWithoutUserInput
    Series?: SeriesCreateNestedManyWithoutPublisherInput
    Event?: EventCreateNestedManyWithoutPublisherInput
    Organization?: OrganizationCreateNestedManyWithoutOwnerInput
    Venue?: VenueCreateNestedManyWithoutPublisherInput
    UserSettings?: UserSettingsCreateNestedOneWithoutUserInput
    Race?: RaceCreateNestedManyWithoutPublisherInput
    Result?: ResultCreateNestedManyWithoutPublisherInput
    follow?: followCreateNestedManyWithoutUserInput
    like?: likeCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCompInput = {
    id: string
    name: string
    username: string
    email?: string | null
    avatar?: string | null
    session?: SessionUncheckedCreateNestedManyWithoutUserInput
    Key?: KeyUncheckedCreateNestedManyWithoutUserInput
    Article?: ArticleUncheckedCreateNestedManyWithoutUserInput
    Series?: SeriesUncheckedCreateNestedManyWithoutPublisherInput
    Event?: EventUncheckedCreateNestedManyWithoutPublisherInput
    Organization?: OrganizationUncheckedCreateNestedManyWithoutOwnerInput
    Venue?: VenueUncheckedCreateNestedManyWithoutPublisherInput
    UserSettings?: UserSettingsUncheckedCreateNestedOneWithoutUserInput
    Race?: RaceUncheckedCreateNestedManyWithoutPublisherInput
    Result?: ResultUncheckedCreateNestedManyWithoutPublisherInput
    follow?: followUncheckedCreateNestedManyWithoutUserInput
    like?: likeUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCompInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCompInput, UserUncheckedCreateWithoutCompInput>
  }

  export type EventCreateWithoutCompsInput = {
    id?: string
    eventeid: string
    uniqueIdString: string
    name: string
    eventwebsite?: string | null
    email?: string | null
    venueName?: string | null
    description?: string | null
    titleImage?: string | null
    public?: boolean
    fileInfo?: NullableJsonNullValueInput | InputJsonValue
    resultColumns?: NullableJsonNullValueInput | InputJsonValue
    rest?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    Publisher?: UserCreateNestedOneWithoutEventInput
    Venue?: VenueCreateNestedOneWithoutEventInput
    Organization?: OrganizationCreateNestedOneWithoutEventsInput
    Races?: RaceCreateNestedManyWithoutEventInput
    Results?: ResultCreateNestedManyWithoutEventInput
    Series?: SeriesCreateNestedOneWithoutEventsInput
    follow?: followCreateNestedManyWithoutEventInput
    like?: likeCreateNestedManyWithoutEventInput
  }

  export type EventUncheckedCreateWithoutCompsInput = {
    id?: string
    eventeid: string
    uniqueIdString: string
    name: string
    eventwebsite?: string | null
    email?: string | null
    venueName?: string | null
    description?: string | null
    titleImage?: string | null
    public?: boolean
    fileInfo?: NullableJsonNullValueInput | InputJsonValue
    resultColumns?: NullableJsonNullValueInput | InputJsonValue
    rest?: NullableJsonNullValueInput | InputJsonValue
    publisherId?: string | null
    venueId?: string | null
    organizationId?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    seriesId?: string | null
    Races?: RaceUncheckedCreateNestedManyWithoutEventInput
    Results?: ResultUncheckedCreateNestedManyWithoutEventInput
    follow?: followUncheckedCreateNestedManyWithoutEventInput
    like?: likeUncheckedCreateNestedManyWithoutEventInput
  }

  export type EventCreateOrConnectWithoutCompsInput = {
    where: EventWhereUniqueInput
    create: XOR<EventCreateWithoutCompsInput, EventUncheckedCreateWithoutCompsInput>
  }

  export type ResultCreateWithoutCompInput = {
    id?: string
    resultId?: string | null
    finish?: string | null
    start?: string | null
    points?: string | null
    position?: string | null
    discard?: string | null
    corrected?: string | null
    resultType?: string | null
    elasped?: string | null
    supposedRating?: string | null
    elapsedWin?: string | null
    ratingWin?: string | null
    rrset?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    Publisher: UserCreateNestedOneWithoutResultInput
    Event?: EventCreateNestedOneWithoutResultsInput
    Race?: RaceCreateNestedOneWithoutResultsInput
  }

  export type ResultUncheckedCreateWithoutCompInput = {
    id?: string
    resultId?: string | null
    finish?: string | null
    start?: string | null
    points?: string | null
    position?: string | null
    discard?: string | null
    corrected?: string | null
    resultType?: string | null
    elasped?: string | null
    supposedRating?: string | null
    elapsedWin?: string | null
    ratingWin?: string | null
    rrset?: string | null
    publisherId: string
    eventId?: string | null
    raceId?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
  }

  export type ResultCreateOrConnectWithoutCompInput = {
    where: ResultWhereUniqueInput
    create: XOR<ResultCreateWithoutCompInput, ResultUncheckedCreateWithoutCompInput>
  }

  export type ResultCreateManyCompInputEnvelope = {
    data: Enumerable<ResultCreateManyCompInput>
    skipDuplicates?: boolean
  }

  export type RaceCreateWithoutCompsInput = {
    id?: string
    raceId?: string | null
    uniqueRaceString?: string | null
    name?: string | null
    starts?: NullableJsonNullValueInput | InputJsonValue
    rank?: string | null
    date?: string | null
    time?: string | null
    notes?: string | null
    sailed?: string | null
    resultColumns?: NullableJsonNullValueInput | InputJsonValue
    rest?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    Event?: EventCreateNestedOneWithoutRacesInput
    Publisher?: UserCreateNestedOneWithoutRaceInput
    Results?: ResultCreateNestedManyWithoutRaceInput
    follow?: followCreateNestedManyWithoutRaceInput
    like?: likeCreateNestedManyWithoutRaceInput
  }

  export type RaceUncheckedCreateWithoutCompsInput = {
    id?: string
    raceId?: string | null
    uniqueRaceString?: string | null
    name?: string | null
    starts?: NullableJsonNullValueInput | InputJsonValue
    rank?: string | null
    date?: string | null
    time?: string | null
    notes?: string | null
    sailed?: string | null
    resultColumns?: NullableJsonNullValueInput | InputJsonValue
    rest?: NullableJsonNullValueInput | InputJsonValue
    eventId?: string | null
    publisherId?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    Results?: ResultUncheckedCreateNestedManyWithoutRaceInput
    follow?: followUncheckedCreateNestedManyWithoutRaceInput
    like?: likeUncheckedCreateNestedManyWithoutRaceInput
  }

  export type RaceCreateOrConnectWithoutCompsInput = {
    where: RaceWhereUniqueInput
    create: XOR<RaceCreateWithoutCompsInput, RaceUncheckedCreateWithoutCompsInput>
  }

  export type followCreateWithoutCompInput = {
    id?: string
    type: string
    updatedAt?: Date | string
    createdAt?: Date | string
    User: UserCreateNestedOneWithoutFollowInput
    Series?: SeriesCreateNestedOneWithoutFollowInput
    Event?: EventCreateNestedOneWithoutFollowInput
    Organization?: OrganizationCreateNestedOneWithoutFollowInput
    Race?: RaceCreateNestedOneWithoutFollowInput
  }

  export type followUncheckedCreateWithoutCompInput = {
    id?: string
    userId: string
    type: string
    seriesId?: string | null
    eventId?: string | null
    organizationId?: string | null
    raceId?: string | null
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type followCreateOrConnectWithoutCompInput = {
    where: followWhereUniqueInput
    create: XOR<followCreateWithoutCompInput, followUncheckedCreateWithoutCompInput>
  }

  export type followCreateManyCompInputEnvelope = {
    data: Enumerable<followCreateManyCompInput>
    skipDuplicates?: boolean
  }

  export type likeCreateWithoutCompInput = {
    id?: string
    type: string
    updatedAt?: Date | string
    createdAt?: Date | string
    User: UserCreateNestedOneWithoutLikeInput
    Series?: SeriesCreateNestedOneWithoutLikeInput
    Event?: EventCreateNestedOneWithoutLikeInput
    Organization?: OrganizationCreateNestedOneWithoutLikeInput
    Race?: RaceCreateNestedOneWithoutLikeInput
  }

  export type likeUncheckedCreateWithoutCompInput = {
    id?: string
    userId: string
    type: string
    seriesId?: string | null
    eventId?: string | null
    organizationId?: string | null
    raceId?: string | null
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type likeCreateOrConnectWithoutCompInput = {
    where: likeWhereUniqueInput
    create: XOR<likeCreateWithoutCompInput, likeUncheckedCreateWithoutCompInput>
  }

  export type likeCreateManyCompInputEnvelope = {
    data: Enumerable<likeCreateManyCompInput>
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutCompInput = {
    update: XOR<UserUpdateWithoutCompInput, UserUncheckedUpdateWithoutCompInput>
    create: XOR<UserCreateWithoutCompInput, UserUncheckedCreateWithoutCompInput>
  }

  export type UserUpdateWithoutCompInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    session?: SessionUpdateManyWithoutUserNestedInput
    Key?: KeyUpdateManyWithoutUserNestedInput
    Article?: ArticleUpdateManyWithoutUserNestedInput
    Series?: SeriesUpdateManyWithoutPublisherNestedInput
    Event?: EventUpdateManyWithoutPublisherNestedInput
    Organization?: OrganizationUpdateManyWithoutOwnerNestedInput
    Venue?: VenueUpdateManyWithoutPublisherNestedInput
    UserSettings?: UserSettingsUpdateOneWithoutUserNestedInput
    Race?: RaceUpdateManyWithoutPublisherNestedInput
    Result?: ResultUpdateManyWithoutPublisherNestedInput
    follow?: followUpdateManyWithoutUserNestedInput
    like?: likeUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCompInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    session?: SessionUncheckedUpdateManyWithoutUserNestedInput
    Key?: KeyUncheckedUpdateManyWithoutUserNestedInput
    Article?: ArticleUncheckedUpdateManyWithoutUserNestedInput
    Series?: SeriesUncheckedUpdateManyWithoutPublisherNestedInput
    Event?: EventUncheckedUpdateManyWithoutPublisherNestedInput
    Organization?: OrganizationUncheckedUpdateManyWithoutOwnerNestedInput
    Venue?: VenueUncheckedUpdateManyWithoutPublisherNestedInput
    UserSettings?: UserSettingsUncheckedUpdateOneWithoutUserNestedInput
    Race?: RaceUncheckedUpdateManyWithoutPublisherNestedInput
    Result?: ResultUncheckedUpdateManyWithoutPublisherNestedInput
    follow?: followUncheckedUpdateManyWithoutUserNestedInput
    like?: likeUncheckedUpdateManyWithoutUserNestedInput
  }

  export type EventUpsertWithoutCompsInput = {
    update: XOR<EventUpdateWithoutCompsInput, EventUncheckedUpdateWithoutCompsInput>
    create: XOR<EventCreateWithoutCompsInput, EventUncheckedCreateWithoutCompsInput>
  }

  export type EventUpdateWithoutCompsInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventeid?: StringFieldUpdateOperationsInput | string
    uniqueIdString?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    eventwebsite?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    venueName?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    titleImage?: NullableStringFieldUpdateOperationsInput | string | null
    public?: BoolFieldUpdateOperationsInput | boolean
    fileInfo?: NullableJsonNullValueInput | InputJsonValue
    resultColumns?: NullableJsonNullValueInput | InputJsonValue
    rest?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Publisher?: UserUpdateOneWithoutEventNestedInput
    Venue?: VenueUpdateOneWithoutEventNestedInput
    Organization?: OrganizationUpdateOneWithoutEventsNestedInput
    Races?: RaceUpdateManyWithoutEventNestedInput
    Results?: ResultUpdateManyWithoutEventNestedInput
    Series?: SeriesUpdateOneWithoutEventsNestedInput
    follow?: followUpdateManyWithoutEventNestedInput
    like?: likeUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateWithoutCompsInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventeid?: StringFieldUpdateOperationsInput | string
    uniqueIdString?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    eventwebsite?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    venueName?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    titleImage?: NullableStringFieldUpdateOperationsInput | string | null
    public?: BoolFieldUpdateOperationsInput | boolean
    fileInfo?: NullableJsonNullValueInput | InputJsonValue
    resultColumns?: NullableJsonNullValueInput | InputJsonValue
    rest?: NullableJsonNullValueInput | InputJsonValue
    publisherId?: NullableStringFieldUpdateOperationsInput | string | null
    venueId?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    seriesId?: NullableStringFieldUpdateOperationsInput | string | null
    Races?: RaceUncheckedUpdateManyWithoutEventNestedInput
    Results?: ResultUncheckedUpdateManyWithoutEventNestedInput
    follow?: followUncheckedUpdateManyWithoutEventNestedInput
    like?: likeUncheckedUpdateManyWithoutEventNestedInput
  }

  export type ResultUpsertWithWhereUniqueWithoutCompInput = {
    where: ResultWhereUniqueInput
    update: XOR<ResultUpdateWithoutCompInput, ResultUncheckedUpdateWithoutCompInput>
    create: XOR<ResultCreateWithoutCompInput, ResultUncheckedCreateWithoutCompInput>
  }

  export type ResultUpdateWithWhereUniqueWithoutCompInput = {
    where: ResultWhereUniqueInput
    data: XOR<ResultUpdateWithoutCompInput, ResultUncheckedUpdateWithoutCompInput>
  }

  export type ResultUpdateManyWithWhereWithoutCompInput = {
    where: ResultScalarWhereInput
    data: XOR<ResultUpdateManyMutationInput, ResultUncheckedUpdateManyWithoutResultsInput>
  }

  export type RaceUpsertWithWhereUniqueWithoutCompsInput = {
    where: RaceWhereUniqueInput
    update: XOR<RaceUpdateWithoutCompsInput, RaceUncheckedUpdateWithoutCompsInput>
    create: XOR<RaceCreateWithoutCompsInput, RaceUncheckedCreateWithoutCompsInput>
  }

  export type RaceUpdateWithWhereUniqueWithoutCompsInput = {
    where: RaceWhereUniqueInput
    data: XOR<RaceUpdateWithoutCompsInput, RaceUncheckedUpdateWithoutCompsInput>
  }

  export type RaceUpdateManyWithWhereWithoutCompsInput = {
    where: RaceScalarWhereInput
    data: XOR<RaceUpdateManyMutationInput, RaceUncheckedUpdateManyWithoutRacesInput>
  }

  export type followUpsertWithWhereUniqueWithoutCompInput = {
    where: followWhereUniqueInput
    update: XOR<followUpdateWithoutCompInput, followUncheckedUpdateWithoutCompInput>
    create: XOR<followCreateWithoutCompInput, followUncheckedCreateWithoutCompInput>
  }

  export type followUpdateWithWhereUniqueWithoutCompInput = {
    where: followWhereUniqueInput
    data: XOR<followUpdateWithoutCompInput, followUncheckedUpdateWithoutCompInput>
  }

  export type followUpdateManyWithWhereWithoutCompInput = {
    where: followScalarWhereInput
    data: XOR<followUpdateManyMutationInput, followUncheckedUpdateManyWithoutFollowInput>
  }

  export type likeUpsertWithWhereUniqueWithoutCompInput = {
    where: likeWhereUniqueInput
    update: XOR<likeUpdateWithoutCompInput, likeUncheckedUpdateWithoutCompInput>
    create: XOR<likeCreateWithoutCompInput, likeUncheckedCreateWithoutCompInput>
  }

  export type likeUpdateWithWhereUniqueWithoutCompInput = {
    where: likeWhereUniqueInput
    data: XOR<likeUpdateWithoutCompInput, likeUncheckedUpdateWithoutCompInput>
  }

  export type likeUpdateManyWithWhereWithoutCompInput = {
    where: likeScalarWhereInput
    data: XOR<likeUpdateManyMutationInput, likeUncheckedUpdateManyWithoutLikeInput>
  }

  export type UserCreateWithoutResultInput = {
    id: string
    name: string
    username: string
    email?: string | null
    avatar?: string | null
    session?: SessionCreateNestedManyWithoutUserInput
    Key?: KeyCreateNestedManyWithoutUserInput
    Article?: ArticleCreateNestedManyWithoutUserInput
    Series?: SeriesCreateNestedManyWithoutPublisherInput
    Event?: EventCreateNestedManyWithoutPublisherInput
    Organization?: OrganizationCreateNestedManyWithoutOwnerInput
    Comp?: CompCreateNestedManyWithoutPublisherInput
    Venue?: VenueCreateNestedManyWithoutPublisherInput
    UserSettings?: UserSettingsCreateNestedOneWithoutUserInput
    Race?: RaceCreateNestedManyWithoutPublisherInput
    follow?: followCreateNestedManyWithoutUserInput
    like?: likeCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutResultInput = {
    id: string
    name: string
    username: string
    email?: string | null
    avatar?: string | null
    session?: SessionUncheckedCreateNestedManyWithoutUserInput
    Key?: KeyUncheckedCreateNestedManyWithoutUserInput
    Article?: ArticleUncheckedCreateNestedManyWithoutUserInput
    Series?: SeriesUncheckedCreateNestedManyWithoutPublisherInput
    Event?: EventUncheckedCreateNestedManyWithoutPublisherInput
    Organization?: OrganizationUncheckedCreateNestedManyWithoutOwnerInput
    Comp?: CompUncheckedCreateNestedManyWithoutPublisherInput
    Venue?: VenueUncheckedCreateNestedManyWithoutPublisherInput
    UserSettings?: UserSettingsUncheckedCreateNestedOneWithoutUserInput
    Race?: RaceUncheckedCreateNestedManyWithoutPublisherInput
    follow?: followUncheckedCreateNestedManyWithoutUserInput
    like?: likeUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutResultInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutResultInput, UserUncheckedCreateWithoutResultInput>
  }

  export type EventCreateWithoutResultsInput = {
    id?: string
    eventeid: string
    uniqueIdString: string
    name: string
    eventwebsite?: string | null
    email?: string | null
    venueName?: string | null
    description?: string | null
    titleImage?: string | null
    public?: boolean
    fileInfo?: NullableJsonNullValueInput | InputJsonValue
    resultColumns?: NullableJsonNullValueInput | InputJsonValue
    rest?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    Publisher?: UserCreateNestedOneWithoutEventInput
    Venue?: VenueCreateNestedOneWithoutEventInput
    Organization?: OrganizationCreateNestedOneWithoutEventsInput
    Races?: RaceCreateNestedManyWithoutEventInput
    Comps?: CompCreateNestedManyWithoutEventInput
    Series?: SeriesCreateNestedOneWithoutEventsInput
    follow?: followCreateNestedManyWithoutEventInput
    like?: likeCreateNestedManyWithoutEventInput
  }

  export type EventUncheckedCreateWithoutResultsInput = {
    id?: string
    eventeid: string
    uniqueIdString: string
    name: string
    eventwebsite?: string | null
    email?: string | null
    venueName?: string | null
    description?: string | null
    titleImage?: string | null
    public?: boolean
    fileInfo?: NullableJsonNullValueInput | InputJsonValue
    resultColumns?: NullableJsonNullValueInput | InputJsonValue
    rest?: NullableJsonNullValueInput | InputJsonValue
    publisherId?: string | null
    venueId?: string | null
    organizationId?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    seriesId?: string | null
    Races?: RaceUncheckedCreateNestedManyWithoutEventInput
    Comps?: CompUncheckedCreateNestedManyWithoutEventInput
    follow?: followUncheckedCreateNestedManyWithoutEventInput
    like?: likeUncheckedCreateNestedManyWithoutEventInput
  }

  export type EventCreateOrConnectWithoutResultsInput = {
    where: EventWhereUniqueInput
    create: XOR<EventCreateWithoutResultsInput, EventUncheckedCreateWithoutResultsInput>
  }

  export type CompCreateWithoutResultsInput = {
    id?: string
    compId: string
    club?: string | null
    boat?: string | null
    skipper?: string | null
    fleet?: string | null
    division?: string | null
    rating?: string | null
    rank?: string | null
    nett?: string | null
    total?: string | null
    rest?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    Publisher?: UserCreateNestedOneWithoutCompInput
    Event?: EventCreateNestedOneWithoutCompsInput
    Races?: RaceCreateNestedManyWithoutCompsInput
    follow?: followCreateNestedManyWithoutCompInput
    like?: likeCreateNestedManyWithoutCompInput
  }

  export type CompUncheckedCreateWithoutResultsInput = {
    id?: string
    compId: string
    club?: string | null
    boat?: string | null
    skipper?: string | null
    fleet?: string | null
    division?: string | null
    rating?: string | null
    rank?: string | null
    nett?: string | null
    total?: string | null
    rest?: NullableJsonNullValueInput | InputJsonValue
    publisherId?: string | null
    eventId?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    Races?: RaceUncheckedCreateNestedManyWithoutCompsInput
    follow?: followUncheckedCreateNestedManyWithoutCompInput
    like?: likeUncheckedCreateNestedManyWithoutCompInput
  }

  export type CompCreateOrConnectWithoutResultsInput = {
    where: CompWhereUniqueInput
    create: XOR<CompCreateWithoutResultsInput, CompUncheckedCreateWithoutResultsInput>
  }

  export type RaceCreateWithoutResultsInput = {
    id?: string
    raceId?: string | null
    uniqueRaceString?: string | null
    name?: string | null
    starts?: NullableJsonNullValueInput | InputJsonValue
    rank?: string | null
    date?: string | null
    time?: string | null
    notes?: string | null
    sailed?: string | null
    resultColumns?: NullableJsonNullValueInput | InputJsonValue
    rest?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    Event?: EventCreateNestedOneWithoutRacesInput
    Publisher?: UserCreateNestedOneWithoutRaceInput
    Comps?: CompCreateNestedManyWithoutRacesInput
    follow?: followCreateNestedManyWithoutRaceInput
    like?: likeCreateNestedManyWithoutRaceInput
  }

  export type RaceUncheckedCreateWithoutResultsInput = {
    id?: string
    raceId?: string | null
    uniqueRaceString?: string | null
    name?: string | null
    starts?: NullableJsonNullValueInput | InputJsonValue
    rank?: string | null
    date?: string | null
    time?: string | null
    notes?: string | null
    sailed?: string | null
    resultColumns?: NullableJsonNullValueInput | InputJsonValue
    rest?: NullableJsonNullValueInput | InputJsonValue
    eventId?: string | null
    publisherId?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    Comps?: CompUncheckedCreateNestedManyWithoutRacesInput
    follow?: followUncheckedCreateNestedManyWithoutRaceInput
    like?: likeUncheckedCreateNestedManyWithoutRaceInput
  }

  export type RaceCreateOrConnectWithoutResultsInput = {
    where: RaceWhereUniqueInput
    create: XOR<RaceCreateWithoutResultsInput, RaceUncheckedCreateWithoutResultsInput>
  }

  export type UserUpsertWithoutResultInput = {
    update: XOR<UserUpdateWithoutResultInput, UserUncheckedUpdateWithoutResultInput>
    create: XOR<UserCreateWithoutResultInput, UserUncheckedCreateWithoutResultInput>
  }

  export type UserUpdateWithoutResultInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    session?: SessionUpdateManyWithoutUserNestedInput
    Key?: KeyUpdateManyWithoutUserNestedInput
    Article?: ArticleUpdateManyWithoutUserNestedInput
    Series?: SeriesUpdateManyWithoutPublisherNestedInput
    Event?: EventUpdateManyWithoutPublisherNestedInput
    Organization?: OrganizationUpdateManyWithoutOwnerNestedInput
    Comp?: CompUpdateManyWithoutPublisherNestedInput
    Venue?: VenueUpdateManyWithoutPublisherNestedInput
    UserSettings?: UserSettingsUpdateOneWithoutUserNestedInput
    Race?: RaceUpdateManyWithoutPublisherNestedInput
    follow?: followUpdateManyWithoutUserNestedInput
    like?: likeUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutResultInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    session?: SessionUncheckedUpdateManyWithoutUserNestedInput
    Key?: KeyUncheckedUpdateManyWithoutUserNestedInput
    Article?: ArticleUncheckedUpdateManyWithoutUserNestedInput
    Series?: SeriesUncheckedUpdateManyWithoutPublisherNestedInput
    Event?: EventUncheckedUpdateManyWithoutPublisherNestedInput
    Organization?: OrganizationUncheckedUpdateManyWithoutOwnerNestedInput
    Comp?: CompUncheckedUpdateManyWithoutPublisherNestedInput
    Venue?: VenueUncheckedUpdateManyWithoutPublisherNestedInput
    UserSettings?: UserSettingsUncheckedUpdateOneWithoutUserNestedInput
    Race?: RaceUncheckedUpdateManyWithoutPublisherNestedInput
    follow?: followUncheckedUpdateManyWithoutUserNestedInput
    like?: likeUncheckedUpdateManyWithoutUserNestedInput
  }

  export type EventUpsertWithoutResultsInput = {
    update: XOR<EventUpdateWithoutResultsInput, EventUncheckedUpdateWithoutResultsInput>
    create: XOR<EventCreateWithoutResultsInput, EventUncheckedCreateWithoutResultsInput>
  }

  export type EventUpdateWithoutResultsInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventeid?: StringFieldUpdateOperationsInput | string
    uniqueIdString?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    eventwebsite?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    venueName?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    titleImage?: NullableStringFieldUpdateOperationsInput | string | null
    public?: BoolFieldUpdateOperationsInput | boolean
    fileInfo?: NullableJsonNullValueInput | InputJsonValue
    resultColumns?: NullableJsonNullValueInput | InputJsonValue
    rest?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Publisher?: UserUpdateOneWithoutEventNestedInput
    Venue?: VenueUpdateOneWithoutEventNestedInput
    Organization?: OrganizationUpdateOneWithoutEventsNestedInput
    Races?: RaceUpdateManyWithoutEventNestedInput
    Comps?: CompUpdateManyWithoutEventNestedInput
    Series?: SeriesUpdateOneWithoutEventsNestedInput
    follow?: followUpdateManyWithoutEventNestedInput
    like?: likeUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateWithoutResultsInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventeid?: StringFieldUpdateOperationsInput | string
    uniqueIdString?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    eventwebsite?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    venueName?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    titleImage?: NullableStringFieldUpdateOperationsInput | string | null
    public?: BoolFieldUpdateOperationsInput | boolean
    fileInfo?: NullableJsonNullValueInput | InputJsonValue
    resultColumns?: NullableJsonNullValueInput | InputJsonValue
    rest?: NullableJsonNullValueInput | InputJsonValue
    publisherId?: NullableStringFieldUpdateOperationsInput | string | null
    venueId?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    seriesId?: NullableStringFieldUpdateOperationsInput | string | null
    Races?: RaceUncheckedUpdateManyWithoutEventNestedInput
    Comps?: CompUncheckedUpdateManyWithoutEventNestedInput
    follow?: followUncheckedUpdateManyWithoutEventNestedInput
    like?: likeUncheckedUpdateManyWithoutEventNestedInput
  }

  export type CompUpsertWithoutResultsInput = {
    update: XOR<CompUpdateWithoutResultsInput, CompUncheckedUpdateWithoutResultsInput>
    create: XOR<CompCreateWithoutResultsInput, CompUncheckedCreateWithoutResultsInput>
  }

  export type CompUpdateWithoutResultsInput = {
    id?: StringFieldUpdateOperationsInput | string
    compId?: StringFieldUpdateOperationsInput | string
    club?: NullableStringFieldUpdateOperationsInput | string | null
    boat?: NullableStringFieldUpdateOperationsInput | string | null
    skipper?: NullableStringFieldUpdateOperationsInput | string | null
    fleet?: NullableStringFieldUpdateOperationsInput | string | null
    division?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableStringFieldUpdateOperationsInput | string | null
    rank?: NullableStringFieldUpdateOperationsInput | string | null
    nett?: NullableStringFieldUpdateOperationsInput | string | null
    total?: NullableStringFieldUpdateOperationsInput | string | null
    rest?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Publisher?: UserUpdateOneWithoutCompNestedInput
    Event?: EventUpdateOneWithoutCompsNestedInput
    Races?: RaceUpdateManyWithoutCompsNestedInput
    follow?: followUpdateManyWithoutCompNestedInput
    like?: likeUpdateManyWithoutCompNestedInput
  }

  export type CompUncheckedUpdateWithoutResultsInput = {
    id?: StringFieldUpdateOperationsInput | string
    compId?: StringFieldUpdateOperationsInput | string
    club?: NullableStringFieldUpdateOperationsInput | string | null
    boat?: NullableStringFieldUpdateOperationsInput | string | null
    skipper?: NullableStringFieldUpdateOperationsInput | string | null
    fleet?: NullableStringFieldUpdateOperationsInput | string | null
    division?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableStringFieldUpdateOperationsInput | string | null
    rank?: NullableStringFieldUpdateOperationsInput | string | null
    nett?: NullableStringFieldUpdateOperationsInput | string | null
    total?: NullableStringFieldUpdateOperationsInput | string | null
    rest?: NullableJsonNullValueInput | InputJsonValue
    publisherId?: NullableStringFieldUpdateOperationsInput | string | null
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Races?: RaceUncheckedUpdateManyWithoutCompsNestedInput
    follow?: followUncheckedUpdateManyWithoutCompNestedInput
    like?: likeUncheckedUpdateManyWithoutCompNestedInput
  }

  export type RaceUpsertWithoutResultsInput = {
    update: XOR<RaceUpdateWithoutResultsInput, RaceUncheckedUpdateWithoutResultsInput>
    create: XOR<RaceCreateWithoutResultsInput, RaceUncheckedCreateWithoutResultsInput>
  }

  export type RaceUpdateWithoutResultsInput = {
    id?: StringFieldUpdateOperationsInput | string
    raceId?: NullableStringFieldUpdateOperationsInput | string | null
    uniqueRaceString?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    starts?: NullableJsonNullValueInput | InputJsonValue
    rank?: NullableStringFieldUpdateOperationsInput | string | null
    date?: NullableStringFieldUpdateOperationsInput | string | null
    time?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    sailed?: NullableStringFieldUpdateOperationsInput | string | null
    resultColumns?: NullableJsonNullValueInput | InputJsonValue
    rest?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Event?: EventUpdateOneWithoutRacesNestedInput
    Publisher?: UserUpdateOneWithoutRaceNestedInput
    Comps?: CompUpdateManyWithoutRacesNestedInput
    follow?: followUpdateManyWithoutRaceNestedInput
    like?: likeUpdateManyWithoutRaceNestedInput
  }

  export type RaceUncheckedUpdateWithoutResultsInput = {
    id?: StringFieldUpdateOperationsInput | string
    raceId?: NullableStringFieldUpdateOperationsInput | string | null
    uniqueRaceString?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    starts?: NullableJsonNullValueInput | InputJsonValue
    rank?: NullableStringFieldUpdateOperationsInput | string | null
    date?: NullableStringFieldUpdateOperationsInput | string | null
    time?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    sailed?: NullableStringFieldUpdateOperationsInput | string | null
    resultColumns?: NullableJsonNullValueInput | InputJsonValue
    rest?: NullableJsonNullValueInput | InputJsonValue
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
    publisherId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Comps?: CompUncheckedUpdateManyWithoutRacesNestedInput
    follow?: followUncheckedUpdateManyWithoutRaceNestedInput
    like?: likeUncheckedUpdateManyWithoutRaceNestedInput
  }

  export type UserCreateWithoutOrganizationInput = {
    id: string
    name: string
    username: string
    email?: string | null
    avatar?: string | null
    session?: SessionCreateNestedManyWithoutUserInput
    Key?: KeyCreateNestedManyWithoutUserInput
    Article?: ArticleCreateNestedManyWithoutUserInput
    Series?: SeriesCreateNestedManyWithoutPublisherInput
    Event?: EventCreateNestedManyWithoutPublisherInput
    Comp?: CompCreateNestedManyWithoutPublisherInput
    Venue?: VenueCreateNestedManyWithoutPublisherInput
    UserSettings?: UserSettingsCreateNestedOneWithoutUserInput
    Race?: RaceCreateNestedManyWithoutPublisherInput
    Result?: ResultCreateNestedManyWithoutPublisherInput
    follow?: followCreateNestedManyWithoutUserInput
    like?: likeCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutOrganizationInput = {
    id: string
    name: string
    username: string
    email?: string | null
    avatar?: string | null
    session?: SessionUncheckedCreateNestedManyWithoutUserInput
    Key?: KeyUncheckedCreateNestedManyWithoutUserInput
    Article?: ArticleUncheckedCreateNestedManyWithoutUserInput
    Series?: SeriesUncheckedCreateNestedManyWithoutPublisherInput
    Event?: EventUncheckedCreateNestedManyWithoutPublisherInput
    Comp?: CompUncheckedCreateNestedManyWithoutPublisherInput
    Venue?: VenueUncheckedCreateNestedManyWithoutPublisherInput
    UserSettings?: UserSettingsUncheckedCreateNestedOneWithoutUserInput
    Race?: RaceUncheckedCreateNestedManyWithoutPublisherInput
    Result?: ResultUncheckedCreateNestedManyWithoutPublisherInput
    follow?: followUncheckedCreateNestedManyWithoutUserInput
    like?: likeUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutOrganizationInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutOrganizationInput, UserUncheckedCreateWithoutOrganizationInput>
  }

  export type SeriesCreateWithoutOrgInput = {
    id?: string
    name: string
    description?: string | null
    rest?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    Publisher?: UserCreateNestedOneWithoutSeriesInput
    Venues?: VenueCreateNestedManyWithoutSeriesInput
    Events?: EventCreateNestedManyWithoutSeriesInput
    follow?: followCreateNestedManyWithoutSeriesInput
    like?: likeCreateNestedManyWithoutSeriesInput
  }

  export type SeriesUncheckedCreateWithoutOrgInput = {
    id?: string
    name: string
    description?: string | null
    rest?: NullableJsonNullValueInput | InputJsonValue
    publisherId?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    Venues?: VenueUncheckedCreateNestedManyWithoutSeriesInput
    Events?: EventUncheckedCreateNestedManyWithoutSeriesInput
    follow?: followUncheckedCreateNestedManyWithoutSeriesInput
    like?: likeUncheckedCreateNestedManyWithoutSeriesInput
  }

  export type SeriesCreateOrConnectWithoutOrgInput = {
    where: SeriesWhereUniqueInput
    create: XOR<SeriesCreateWithoutOrgInput, SeriesUncheckedCreateWithoutOrgInput>
  }

  export type SeriesCreateManyOrgInputEnvelope = {
    data: Enumerable<SeriesCreateManyOrgInput>
    skipDuplicates?: boolean
  }

  export type EventCreateWithoutOrganizationInput = {
    id?: string
    eventeid: string
    uniqueIdString: string
    name: string
    eventwebsite?: string | null
    email?: string | null
    venueName?: string | null
    description?: string | null
    titleImage?: string | null
    public?: boolean
    fileInfo?: NullableJsonNullValueInput | InputJsonValue
    resultColumns?: NullableJsonNullValueInput | InputJsonValue
    rest?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    Publisher?: UserCreateNestedOneWithoutEventInput
    Venue?: VenueCreateNestedOneWithoutEventInput
    Races?: RaceCreateNestedManyWithoutEventInput
    Results?: ResultCreateNestedManyWithoutEventInput
    Comps?: CompCreateNestedManyWithoutEventInput
    Series?: SeriesCreateNestedOneWithoutEventsInput
    follow?: followCreateNestedManyWithoutEventInput
    like?: likeCreateNestedManyWithoutEventInput
  }

  export type EventUncheckedCreateWithoutOrganizationInput = {
    id?: string
    eventeid: string
    uniqueIdString: string
    name: string
    eventwebsite?: string | null
    email?: string | null
    venueName?: string | null
    description?: string | null
    titleImage?: string | null
    public?: boolean
    fileInfo?: NullableJsonNullValueInput | InputJsonValue
    resultColumns?: NullableJsonNullValueInput | InputJsonValue
    rest?: NullableJsonNullValueInput | InputJsonValue
    publisherId?: string | null
    venueId?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    seriesId?: string | null
    Races?: RaceUncheckedCreateNestedManyWithoutEventInput
    Results?: ResultUncheckedCreateNestedManyWithoutEventInput
    Comps?: CompUncheckedCreateNestedManyWithoutEventInput
    follow?: followUncheckedCreateNestedManyWithoutEventInput
    like?: likeUncheckedCreateNestedManyWithoutEventInput
  }

  export type EventCreateOrConnectWithoutOrganizationInput = {
    where: EventWhereUniqueInput
    create: XOR<EventCreateWithoutOrganizationInput, EventUncheckedCreateWithoutOrganizationInput>
  }

  export type EventCreateManyOrganizationInputEnvelope = {
    data: Enumerable<EventCreateManyOrganizationInput>
    skipDuplicates?: boolean
  }

  export type followCreateWithoutOrganizationInput = {
    id?: string
    type: string
    updatedAt?: Date | string
    createdAt?: Date | string
    User: UserCreateNestedOneWithoutFollowInput
    Series?: SeriesCreateNestedOneWithoutFollowInput
    Event?: EventCreateNestedOneWithoutFollowInput
    Race?: RaceCreateNestedOneWithoutFollowInput
    Comp?: CompCreateNestedOneWithoutFollowInput
  }

  export type followUncheckedCreateWithoutOrganizationInput = {
    id?: string
    userId: string
    type: string
    seriesId?: string | null
    eventId?: string | null
    raceId?: string | null
    compId?: string | null
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type followCreateOrConnectWithoutOrganizationInput = {
    where: followWhereUniqueInput
    create: XOR<followCreateWithoutOrganizationInput, followUncheckedCreateWithoutOrganizationInput>
  }

  export type followCreateManyOrganizationInputEnvelope = {
    data: Enumerable<followCreateManyOrganizationInput>
    skipDuplicates?: boolean
  }

  export type likeCreateWithoutOrganizationInput = {
    id?: string
    type: string
    updatedAt?: Date | string
    createdAt?: Date | string
    User: UserCreateNestedOneWithoutLikeInput
    Series?: SeriesCreateNestedOneWithoutLikeInput
    Event?: EventCreateNestedOneWithoutLikeInput
    Race?: RaceCreateNestedOneWithoutLikeInput
    Comp?: CompCreateNestedOneWithoutLikeInput
  }

  export type likeUncheckedCreateWithoutOrganizationInput = {
    id?: string
    userId: string
    type: string
    seriesId?: string | null
    eventId?: string | null
    raceId?: string | null
    compId?: string | null
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type likeCreateOrConnectWithoutOrganizationInput = {
    where: likeWhereUniqueInput
    create: XOR<likeCreateWithoutOrganizationInput, likeUncheckedCreateWithoutOrganizationInput>
  }

  export type likeCreateManyOrganizationInputEnvelope = {
    data: Enumerable<likeCreateManyOrganizationInput>
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutOrganizationInput = {
    update: XOR<UserUpdateWithoutOrganizationInput, UserUncheckedUpdateWithoutOrganizationInput>
    create: XOR<UserCreateWithoutOrganizationInput, UserUncheckedCreateWithoutOrganizationInput>
  }

  export type UserUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    session?: SessionUpdateManyWithoutUserNestedInput
    Key?: KeyUpdateManyWithoutUserNestedInput
    Article?: ArticleUpdateManyWithoutUserNestedInput
    Series?: SeriesUpdateManyWithoutPublisherNestedInput
    Event?: EventUpdateManyWithoutPublisherNestedInput
    Comp?: CompUpdateManyWithoutPublisherNestedInput
    Venue?: VenueUpdateManyWithoutPublisherNestedInput
    UserSettings?: UserSettingsUpdateOneWithoutUserNestedInput
    Race?: RaceUpdateManyWithoutPublisherNestedInput
    Result?: ResultUpdateManyWithoutPublisherNestedInput
    follow?: followUpdateManyWithoutUserNestedInput
    like?: likeUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    session?: SessionUncheckedUpdateManyWithoutUserNestedInput
    Key?: KeyUncheckedUpdateManyWithoutUserNestedInput
    Article?: ArticleUncheckedUpdateManyWithoutUserNestedInput
    Series?: SeriesUncheckedUpdateManyWithoutPublisherNestedInput
    Event?: EventUncheckedUpdateManyWithoutPublisherNestedInput
    Comp?: CompUncheckedUpdateManyWithoutPublisherNestedInput
    Venue?: VenueUncheckedUpdateManyWithoutPublisherNestedInput
    UserSettings?: UserSettingsUncheckedUpdateOneWithoutUserNestedInput
    Race?: RaceUncheckedUpdateManyWithoutPublisherNestedInput
    Result?: ResultUncheckedUpdateManyWithoutPublisherNestedInput
    follow?: followUncheckedUpdateManyWithoutUserNestedInput
    like?: likeUncheckedUpdateManyWithoutUserNestedInput
  }

  export type SeriesUpsertWithWhereUniqueWithoutOrgInput = {
    where: SeriesWhereUniqueInput
    update: XOR<SeriesUpdateWithoutOrgInput, SeriesUncheckedUpdateWithoutOrgInput>
    create: XOR<SeriesCreateWithoutOrgInput, SeriesUncheckedCreateWithoutOrgInput>
  }

  export type SeriesUpdateWithWhereUniqueWithoutOrgInput = {
    where: SeriesWhereUniqueInput
    data: XOR<SeriesUpdateWithoutOrgInput, SeriesUncheckedUpdateWithoutOrgInput>
  }

  export type SeriesUpdateManyWithWhereWithoutOrgInput = {
    where: SeriesScalarWhereInput
    data: XOR<SeriesUpdateManyMutationInput, SeriesUncheckedUpdateManyWithoutSeriesInput>
  }

  export type SeriesScalarWhereInput = {
    AND?: Enumerable<SeriesScalarWhereInput>
    OR?: Enumerable<SeriesScalarWhereInput>
    NOT?: Enumerable<SeriesScalarWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    description?: StringNullableFilter | string | null
    rest?: JsonNullableFilter
    organizationId?: StringNullableFilter | string | null
    publisherId?: StringNullableFilter | string | null
    createdAt?: DateTimeNullableFilter | Date | string | null
    updatedAt?: DateTimeNullableFilter | Date | string | null
  }

  export type EventUpsertWithWhereUniqueWithoutOrganizationInput = {
    where: EventWhereUniqueInput
    update: XOR<EventUpdateWithoutOrganizationInput, EventUncheckedUpdateWithoutOrganizationInput>
    create: XOR<EventCreateWithoutOrganizationInput, EventUncheckedCreateWithoutOrganizationInput>
  }

  export type EventUpdateWithWhereUniqueWithoutOrganizationInput = {
    where: EventWhereUniqueInput
    data: XOR<EventUpdateWithoutOrganizationInput, EventUncheckedUpdateWithoutOrganizationInput>
  }

  export type EventUpdateManyWithWhereWithoutOrganizationInput = {
    where: EventScalarWhereInput
    data: XOR<EventUpdateManyMutationInput, EventUncheckedUpdateManyWithoutEventsInput>
  }

  export type followUpsertWithWhereUniqueWithoutOrganizationInput = {
    where: followWhereUniqueInput
    update: XOR<followUpdateWithoutOrganizationInput, followUncheckedUpdateWithoutOrganizationInput>
    create: XOR<followCreateWithoutOrganizationInput, followUncheckedCreateWithoutOrganizationInput>
  }

  export type followUpdateWithWhereUniqueWithoutOrganizationInput = {
    where: followWhereUniqueInput
    data: XOR<followUpdateWithoutOrganizationInput, followUncheckedUpdateWithoutOrganizationInput>
  }

  export type followUpdateManyWithWhereWithoutOrganizationInput = {
    where: followScalarWhereInput
    data: XOR<followUpdateManyMutationInput, followUncheckedUpdateManyWithoutFollowInput>
  }

  export type likeUpsertWithWhereUniqueWithoutOrganizationInput = {
    where: likeWhereUniqueInput
    update: XOR<likeUpdateWithoutOrganizationInput, likeUncheckedUpdateWithoutOrganizationInput>
    create: XOR<likeCreateWithoutOrganizationInput, likeUncheckedCreateWithoutOrganizationInput>
  }

  export type likeUpdateWithWhereUniqueWithoutOrganizationInput = {
    where: likeWhereUniqueInput
    data: XOR<likeUpdateWithoutOrganizationInput, likeUncheckedUpdateWithoutOrganizationInput>
  }

  export type likeUpdateManyWithWhereWithoutOrganizationInput = {
    where: likeScalarWhereInput
    data: XOR<likeUpdateManyMutationInput, likeUncheckedUpdateManyWithoutLikeInput>
  }

  export type UserCreateWithoutFollowInput = {
    id: string
    name: string
    username: string
    email?: string | null
    avatar?: string | null
    session?: SessionCreateNestedManyWithoutUserInput
    Key?: KeyCreateNestedManyWithoutUserInput
    Article?: ArticleCreateNestedManyWithoutUserInput
    Series?: SeriesCreateNestedManyWithoutPublisherInput
    Event?: EventCreateNestedManyWithoutPublisherInput
    Organization?: OrganizationCreateNestedManyWithoutOwnerInput
    Comp?: CompCreateNestedManyWithoutPublisherInput
    Venue?: VenueCreateNestedManyWithoutPublisherInput
    UserSettings?: UserSettingsCreateNestedOneWithoutUserInput
    Race?: RaceCreateNestedManyWithoutPublisherInput
    Result?: ResultCreateNestedManyWithoutPublisherInput
    like?: likeCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutFollowInput = {
    id: string
    name: string
    username: string
    email?: string | null
    avatar?: string | null
    session?: SessionUncheckedCreateNestedManyWithoutUserInput
    Key?: KeyUncheckedCreateNestedManyWithoutUserInput
    Article?: ArticleUncheckedCreateNestedManyWithoutUserInput
    Series?: SeriesUncheckedCreateNestedManyWithoutPublisherInput
    Event?: EventUncheckedCreateNestedManyWithoutPublisherInput
    Organization?: OrganizationUncheckedCreateNestedManyWithoutOwnerInput
    Comp?: CompUncheckedCreateNestedManyWithoutPublisherInput
    Venue?: VenueUncheckedCreateNestedManyWithoutPublisherInput
    UserSettings?: UserSettingsUncheckedCreateNestedOneWithoutUserInput
    Race?: RaceUncheckedCreateNestedManyWithoutPublisherInput
    Result?: ResultUncheckedCreateNestedManyWithoutPublisherInput
    like?: likeUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutFollowInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFollowInput, UserUncheckedCreateWithoutFollowInput>
  }

  export type SeriesCreateWithoutFollowInput = {
    id?: string
    name: string
    description?: string | null
    rest?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    Org?: OrganizationCreateNestedOneWithoutSeriesInput
    Publisher?: UserCreateNestedOneWithoutSeriesInput
    Venues?: VenueCreateNestedManyWithoutSeriesInput
    Events?: EventCreateNestedManyWithoutSeriesInput
    like?: likeCreateNestedManyWithoutSeriesInput
  }

  export type SeriesUncheckedCreateWithoutFollowInput = {
    id?: string
    name: string
    description?: string | null
    rest?: NullableJsonNullValueInput | InputJsonValue
    organizationId?: string | null
    publisherId?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    Venues?: VenueUncheckedCreateNestedManyWithoutSeriesInput
    Events?: EventUncheckedCreateNestedManyWithoutSeriesInput
    like?: likeUncheckedCreateNestedManyWithoutSeriesInput
  }

  export type SeriesCreateOrConnectWithoutFollowInput = {
    where: SeriesWhereUniqueInput
    create: XOR<SeriesCreateWithoutFollowInput, SeriesUncheckedCreateWithoutFollowInput>
  }

  export type EventCreateWithoutFollowInput = {
    id?: string
    eventeid: string
    uniqueIdString: string
    name: string
    eventwebsite?: string | null
    email?: string | null
    venueName?: string | null
    description?: string | null
    titleImage?: string | null
    public?: boolean
    fileInfo?: NullableJsonNullValueInput | InputJsonValue
    resultColumns?: NullableJsonNullValueInput | InputJsonValue
    rest?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    Publisher?: UserCreateNestedOneWithoutEventInput
    Venue?: VenueCreateNestedOneWithoutEventInput
    Organization?: OrganizationCreateNestedOneWithoutEventsInput
    Races?: RaceCreateNestedManyWithoutEventInput
    Results?: ResultCreateNestedManyWithoutEventInput
    Comps?: CompCreateNestedManyWithoutEventInput
    Series?: SeriesCreateNestedOneWithoutEventsInput
    like?: likeCreateNestedManyWithoutEventInput
  }

  export type EventUncheckedCreateWithoutFollowInput = {
    id?: string
    eventeid: string
    uniqueIdString: string
    name: string
    eventwebsite?: string | null
    email?: string | null
    venueName?: string | null
    description?: string | null
    titleImage?: string | null
    public?: boolean
    fileInfo?: NullableJsonNullValueInput | InputJsonValue
    resultColumns?: NullableJsonNullValueInput | InputJsonValue
    rest?: NullableJsonNullValueInput | InputJsonValue
    publisherId?: string | null
    venueId?: string | null
    organizationId?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    seriesId?: string | null
    Races?: RaceUncheckedCreateNestedManyWithoutEventInput
    Results?: ResultUncheckedCreateNestedManyWithoutEventInput
    Comps?: CompUncheckedCreateNestedManyWithoutEventInput
    like?: likeUncheckedCreateNestedManyWithoutEventInput
  }

  export type EventCreateOrConnectWithoutFollowInput = {
    where: EventWhereUniqueInput
    create: XOR<EventCreateWithoutFollowInput, EventUncheckedCreateWithoutFollowInput>
  }

  export type OrganizationCreateWithoutFollowInput = {
    id?: string
    name: string
    description?: string | null
    tag?: string | null
    website?: string | null
    email?: string | null
    contact?: NullableJsonNullValueInput | InputJsonValue
    titleImage?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    Owner?: UserCreateNestedOneWithoutOrganizationInput
    Series?: SeriesCreateNestedManyWithoutOrgInput
    Events?: EventCreateNestedManyWithoutOrganizationInput
    like?: likeCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUncheckedCreateWithoutFollowInput = {
    id?: string
    name: string
    description?: string | null
    tag?: string | null
    website?: string | null
    email?: string | null
    contact?: NullableJsonNullValueInput | InputJsonValue
    titleImage?: string | null
    ownerId?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    Series?: SeriesUncheckedCreateNestedManyWithoutOrgInput
    Events?: EventUncheckedCreateNestedManyWithoutOrganizationInput
    like?: likeUncheckedCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationCreateOrConnectWithoutFollowInput = {
    where: OrganizationWhereUniqueInput
    create: XOR<OrganizationCreateWithoutFollowInput, OrganizationUncheckedCreateWithoutFollowInput>
  }

  export type RaceCreateWithoutFollowInput = {
    id?: string
    raceId?: string | null
    uniqueRaceString?: string | null
    name?: string | null
    starts?: NullableJsonNullValueInput | InputJsonValue
    rank?: string | null
    date?: string | null
    time?: string | null
    notes?: string | null
    sailed?: string | null
    resultColumns?: NullableJsonNullValueInput | InputJsonValue
    rest?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    Event?: EventCreateNestedOneWithoutRacesInput
    Publisher?: UserCreateNestedOneWithoutRaceInput
    Comps?: CompCreateNestedManyWithoutRacesInput
    Results?: ResultCreateNestedManyWithoutRaceInput
    like?: likeCreateNestedManyWithoutRaceInput
  }

  export type RaceUncheckedCreateWithoutFollowInput = {
    id?: string
    raceId?: string | null
    uniqueRaceString?: string | null
    name?: string | null
    starts?: NullableJsonNullValueInput | InputJsonValue
    rank?: string | null
    date?: string | null
    time?: string | null
    notes?: string | null
    sailed?: string | null
    resultColumns?: NullableJsonNullValueInput | InputJsonValue
    rest?: NullableJsonNullValueInput | InputJsonValue
    eventId?: string | null
    publisherId?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    Comps?: CompUncheckedCreateNestedManyWithoutRacesInput
    Results?: ResultUncheckedCreateNestedManyWithoutRaceInput
    like?: likeUncheckedCreateNestedManyWithoutRaceInput
  }

  export type RaceCreateOrConnectWithoutFollowInput = {
    where: RaceWhereUniqueInput
    create: XOR<RaceCreateWithoutFollowInput, RaceUncheckedCreateWithoutFollowInput>
  }

  export type CompCreateWithoutFollowInput = {
    id?: string
    compId: string
    club?: string | null
    boat?: string | null
    skipper?: string | null
    fleet?: string | null
    division?: string | null
    rating?: string | null
    rank?: string | null
    nett?: string | null
    total?: string | null
    rest?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    Publisher?: UserCreateNestedOneWithoutCompInput
    Event?: EventCreateNestedOneWithoutCompsInput
    Results?: ResultCreateNestedManyWithoutCompInput
    Races?: RaceCreateNestedManyWithoutCompsInput
    like?: likeCreateNestedManyWithoutCompInput
  }

  export type CompUncheckedCreateWithoutFollowInput = {
    id?: string
    compId: string
    club?: string | null
    boat?: string | null
    skipper?: string | null
    fleet?: string | null
    division?: string | null
    rating?: string | null
    rank?: string | null
    nett?: string | null
    total?: string | null
    rest?: NullableJsonNullValueInput | InputJsonValue
    publisherId?: string | null
    eventId?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    Results?: ResultUncheckedCreateNestedManyWithoutCompInput
    Races?: RaceUncheckedCreateNestedManyWithoutCompsInput
    like?: likeUncheckedCreateNestedManyWithoutCompInput
  }

  export type CompCreateOrConnectWithoutFollowInput = {
    where: CompWhereUniqueInput
    create: XOR<CompCreateWithoutFollowInput, CompUncheckedCreateWithoutFollowInput>
  }

  export type UserUpsertWithoutFollowInput = {
    update: XOR<UserUpdateWithoutFollowInput, UserUncheckedUpdateWithoutFollowInput>
    create: XOR<UserCreateWithoutFollowInput, UserUncheckedCreateWithoutFollowInput>
  }

  export type UserUpdateWithoutFollowInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    session?: SessionUpdateManyWithoutUserNestedInput
    Key?: KeyUpdateManyWithoutUserNestedInput
    Article?: ArticleUpdateManyWithoutUserNestedInput
    Series?: SeriesUpdateManyWithoutPublisherNestedInput
    Event?: EventUpdateManyWithoutPublisherNestedInput
    Organization?: OrganizationUpdateManyWithoutOwnerNestedInput
    Comp?: CompUpdateManyWithoutPublisherNestedInput
    Venue?: VenueUpdateManyWithoutPublisherNestedInput
    UserSettings?: UserSettingsUpdateOneWithoutUserNestedInput
    Race?: RaceUpdateManyWithoutPublisherNestedInput
    Result?: ResultUpdateManyWithoutPublisherNestedInput
    like?: likeUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutFollowInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    session?: SessionUncheckedUpdateManyWithoutUserNestedInput
    Key?: KeyUncheckedUpdateManyWithoutUserNestedInput
    Article?: ArticleUncheckedUpdateManyWithoutUserNestedInput
    Series?: SeriesUncheckedUpdateManyWithoutPublisherNestedInput
    Event?: EventUncheckedUpdateManyWithoutPublisherNestedInput
    Organization?: OrganizationUncheckedUpdateManyWithoutOwnerNestedInput
    Comp?: CompUncheckedUpdateManyWithoutPublisherNestedInput
    Venue?: VenueUncheckedUpdateManyWithoutPublisherNestedInput
    UserSettings?: UserSettingsUncheckedUpdateOneWithoutUserNestedInput
    Race?: RaceUncheckedUpdateManyWithoutPublisherNestedInput
    Result?: ResultUncheckedUpdateManyWithoutPublisherNestedInput
    like?: likeUncheckedUpdateManyWithoutUserNestedInput
  }

  export type SeriesUpsertWithoutFollowInput = {
    update: XOR<SeriesUpdateWithoutFollowInput, SeriesUncheckedUpdateWithoutFollowInput>
    create: XOR<SeriesCreateWithoutFollowInput, SeriesUncheckedCreateWithoutFollowInput>
  }

  export type SeriesUpdateWithoutFollowInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    rest?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Org?: OrganizationUpdateOneWithoutSeriesNestedInput
    Publisher?: UserUpdateOneWithoutSeriesNestedInput
    Venues?: VenueUpdateManyWithoutSeriesNestedInput
    Events?: EventUpdateManyWithoutSeriesNestedInput
    like?: likeUpdateManyWithoutSeriesNestedInput
  }

  export type SeriesUncheckedUpdateWithoutFollowInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    rest?: NullableJsonNullValueInput | InputJsonValue
    organizationId?: NullableStringFieldUpdateOperationsInput | string | null
    publisherId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Venues?: VenueUncheckedUpdateManyWithoutSeriesNestedInput
    Events?: EventUncheckedUpdateManyWithoutSeriesNestedInput
    like?: likeUncheckedUpdateManyWithoutSeriesNestedInput
  }

  export type EventUpsertWithoutFollowInput = {
    update: XOR<EventUpdateWithoutFollowInput, EventUncheckedUpdateWithoutFollowInput>
    create: XOR<EventCreateWithoutFollowInput, EventUncheckedCreateWithoutFollowInput>
  }

  export type EventUpdateWithoutFollowInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventeid?: StringFieldUpdateOperationsInput | string
    uniqueIdString?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    eventwebsite?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    venueName?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    titleImage?: NullableStringFieldUpdateOperationsInput | string | null
    public?: BoolFieldUpdateOperationsInput | boolean
    fileInfo?: NullableJsonNullValueInput | InputJsonValue
    resultColumns?: NullableJsonNullValueInput | InputJsonValue
    rest?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Publisher?: UserUpdateOneWithoutEventNestedInput
    Venue?: VenueUpdateOneWithoutEventNestedInput
    Organization?: OrganizationUpdateOneWithoutEventsNestedInput
    Races?: RaceUpdateManyWithoutEventNestedInput
    Results?: ResultUpdateManyWithoutEventNestedInput
    Comps?: CompUpdateManyWithoutEventNestedInput
    Series?: SeriesUpdateOneWithoutEventsNestedInput
    like?: likeUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateWithoutFollowInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventeid?: StringFieldUpdateOperationsInput | string
    uniqueIdString?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    eventwebsite?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    venueName?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    titleImage?: NullableStringFieldUpdateOperationsInput | string | null
    public?: BoolFieldUpdateOperationsInput | boolean
    fileInfo?: NullableJsonNullValueInput | InputJsonValue
    resultColumns?: NullableJsonNullValueInput | InputJsonValue
    rest?: NullableJsonNullValueInput | InputJsonValue
    publisherId?: NullableStringFieldUpdateOperationsInput | string | null
    venueId?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    seriesId?: NullableStringFieldUpdateOperationsInput | string | null
    Races?: RaceUncheckedUpdateManyWithoutEventNestedInput
    Results?: ResultUncheckedUpdateManyWithoutEventNestedInput
    Comps?: CompUncheckedUpdateManyWithoutEventNestedInput
    like?: likeUncheckedUpdateManyWithoutEventNestedInput
  }

  export type OrganizationUpsertWithoutFollowInput = {
    update: XOR<OrganizationUpdateWithoutFollowInput, OrganizationUncheckedUpdateWithoutFollowInput>
    create: XOR<OrganizationCreateWithoutFollowInput, OrganizationUncheckedCreateWithoutFollowInput>
  }

  export type OrganizationUpdateWithoutFollowInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    tag?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableJsonNullValueInput | InputJsonValue
    titleImage?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Owner?: UserUpdateOneWithoutOrganizationNestedInput
    Series?: SeriesUpdateManyWithoutOrgNestedInput
    Events?: EventUpdateManyWithoutOrganizationNestedInput
    like?: likeUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationUncheckedUpdateWithoutFollowInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    tag?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableJsonNullValueInput | InputJsonValue
    titleImage?: NullableStringFieldUpdateOperationsInput | string | null
    ownerId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Series?: SeriesUncheckedUpdateManyWithoutOrgNestedInput
    Events?: EventUncheckedUpdateManyWithoutOrganizationNestedInput
    like?: likeUncheckedUpdateManyWithoutOrganizationNestedInput
  }

  export type RaceUpsertWithoutFollowInput = {
    update: XOR<RaceUpdateWithoutFollowInput, RaceUncheckedUpdateWithoutFollowInput>
    create: XOR<RaceCreateWithoutFollowInput, RaceUncheckedCreateWithoutFollowInput>
  }

  export type RaceUpdateWithoutFollowInput = {
    id?: StringFieldUpdateOperationsInput | string
    raceId?: NullableStringFieldUpdateOperationsInput | string | null
    uniqueRaceString?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    starts?: NullableJsonNullValueInput | InputJsonValue
    rank?: NullableStringFieldUpdateOperationsInput | string | null
    date?: NullableStringFieldUpdateOperationsInput | string | null
    time?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    sailed?: NullableStringFieldUpdateOperationsInput | string | null
    resultColumns?: NullableJsonNullValueInput | InputJsonValue
    rest?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Event?: EventUpdateOneWithoutRacesNestedInput
    Publisher?: UserUpdateOneWithoutRaceNestedInput
    Comps?: CompUpdateManyWithoutRacesNestedInput
    Results?: ResultUpdateManyWithoutRaceNestedInput
    like?: likeUpdateManyWithoutRaceNestedInput
  }

  export type RaceUncheckedUpdateWithoutFollowInput = {
    id?: StringFieldUpdateOperationsInput | string
    raceId?: NullableStringFieldUpdateOperationsInput | string | null
    uniqueRaceString?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    starts?: NullableJsonNullValueInput | InputJsonValue
    rank?: NullableStringFieldUpdateOperationsInput | string | null
    date?: NullableStringFieldUpdateOperationsInput | string | null
    time?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    sailed?: NullableStringFieldUpdateOperationsInput | string | null
    resultColumns?: NullableJsonNullValueInput | InputJsonValue
    rest?: NullableJsonNullValueInput | InputJsonValue
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
    publisherId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Comps?: CompUncheckedUpdateManyWithoutRacesNestedInput
    Results?: ResultUncheckedUpdateManyWithoutRaceNestedInput
    like?: likeUncheckedUpdateManyWithoutRaceNestedInput
  }

  export type CompUpsertWithoutFollowInput = {
    update: XOR<CompUpdateWithoutFollowInput, CompUncheckedUpdateWithoutFollowInput>
    create: XOR<CompCreateWithoutFollowInput, CompUncheckedCreateWithoutFollowInput>
  }

  export type CompUpdateWithoutFollowInput = {
    id?: StringFieldUpdateOperationsInput | string
    compId?: StringFieldUpdateOperationsInput | string
    club?: NullableStringFieldUpdateOperationsInput | string | null
    boat?: NullableStringFieldUpdateOperationsInput | string | null
    skipper?: NullableStringFieldUpdateOperationsInput | string | null
    fleet?: NullableStringFieldUpdateOperationsInput | string | null
    division?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableStringFieldUpdateOperationsInput | string | null
    rank?: NullableStringFieldUpdateOperationsInput | string | null
    nett?: NullableStringFieldUpdateOperationsInput | string | null
    total?: NullableStringFieldUpdateOperationsInput | string | null
    rest?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Publisher?: UserUpdateOneWithoutCompNestedInput
    Event?: EventUpdateOneWithoutCompsNestedInput
    Results?: ResultUpdateManyWithoutCompNestedInput
    Races?: RaceUpdateManyWithoutCompsNestedInput
    like?: likeUpdateManyWithoutCompNestedInput
  }

  export type CompUncheckedUpdateWithoutFollowInput = {
    id?: StringFieldUpdateOperationsInput | string
    compId?: StringFieldUpdateOperationsInput | string
    club?: NullableStringFieldUpdateOperationsInput | string | null
    boat?: NullableStringFieldUpdateOperationsInput | string | null
    skipper?: NullableStringFieldUpdateOperationsInput | string | null
    fleet?: NullableStringFieldUpdateOperationsInput | string | null
    division?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableStringFieldUpdateOperationsInput | string | null
    rank?: NullableStringFieldUpdateOperationsInput | string | null
    nett?: NullableStringFieldUpdateOperationsInput | string | null
    total?: NullableStringFieldUpdateOperationsInput | string | null
    rest?: NullableJsonNullValueInput | InputJsonValue
    publisherId?: NullableStringFieldUpdateOperationsInput | string | null
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Results?: ResultUncheckedUpdateManyWithoutCompNestedInput
    Races?: RaceUncheckedUpdateManyWithoutCompsNestedInput
    like?: likeUncheckedUpdateManyWithoutCompNestedInput
  }

  export type UserCreateWithoutLikeInput = {
    id: string
    name: string
    username: string
    email?: string | null
    avatar?: string | null
    session?: SessionCreateNestedManyWithoutUserInput
    Key?: KeyCreateNestedManyWithoutUserInput
    Article?: ArticleCreateNestedManyWithoutUserInput
    Series?: SeriesCreateNestedManyWithoutPublisherInput
    Event?: EventCreateNestedManyWithoutPublisherInput
    Organization?: OrganizationCreateNestedManyWithoutOwnerInput
    Comp?: CompCreateNestedManyWithoutPublisherInput
    Venue?: VenueCreateNestedManyWithoutPublisherInput
    UserSettings?: UserSettingsCreateNestedOneWithoutUserInput
    Race?: RaceCreateNestedManyWithoutPublisherInput
    Result?: ResultCreateNestedManyWithoutPublisherInput
    follow?: followCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutLikeInput = {
    id: string
    name: string
    username: string
    email?: string | null
    avatar?: string | null
    session?: SessionUncheckedCreateNestedManyWithoutUserInput
    Key?: KeyUncheckedCreateNestedManyWithoutUserInput
    Article?: ArticleUncheckedCreateNestedManyWithoutUserInput
    Series?: SeriesUncheckedCreateNestedManyWithoutPublisherInput
    Event?: EventUncheckedCreateNestedManyWithoutPublisherInput
    Organization?: OrganizationUncheckedCreateNestedManyWithoutOwnerInput
    Comp?: CompUncheckedCreateNestedManyWithoutPublisherInput
    Venue?: VenueUncheckedCreateNestedManyWithoutPublisherInput
    UserSettings?: UserSettingsUncheckedCreateNestedOneWithoutUserInput
    Race?: RaceUncheckedCreateNestedManyWithoutPublisherInput
    Result?: ResultUncheckedCreateNestedManyWithoutPublisherInput
    follow?: followUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutLikeInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutLikeInput, UserUncheckedCreateWithoutLikeInput>
  }

  export type SeriesCreateWithoutLikeInput = {
    id?: string
    name: string
    description?: string | null
    rest?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    Org?: OrganizationCreateNestedOneWithoutSeriesInput
    Publisher?: UserCreateNestedOneWithoutSeriesInput
    Venues?: VenueCreateNestedManyWithoutSeriesInput
    Events?: EventCreateNestedManyWithoutSeriesInput
    follow?: followCreateNestedManyWithoutSeriesInput
  }

  export type SeriesUncheckedCreateWithoutLikeInput = {
    id?: string
    name: string
    description?: string | null
    rest?: NullableJsonNullValueInput | InputJsonValue
    organizationId?: string | null
    publisherId?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    Venues?: VenueUncheckedCreateNestedManyWithoutSeriesInput
    Events?: EventUncheckedCreateNestedManyWithoutSeriesInput
    follow?: followUncheckedCreateNestedManyWithoutSeriesInput
  }

  export type SeriesCreateOrConnectWithoutLikeInput = {
    where: SeriesWhereUniqueInput
    create: XOR<SeriesCreateWithoutLikeInput, SeriesUncheckedCreateWithoutLikeInput>
  }

  export type EventCreateWithoutLikeInput = {
    id?: string
    eventeid: string
    uniqueIdString: string
    name: string
    eventwebsite?: string | null
    email?: string | null
    venueName?: string | null
    description?: string | null
    titleImage?: string | null
    public?: boolean
    fileInfo?: NullableJsonNullValueInput | InputJsonValue
    resultColumns?: NullableJsonNullValueInput | InputJsonValue
    rest?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    Publisher?: UserCreateNestedOneWithoutEventInput
    Venue?: VenueCreateNestedOneWithoutEventInput
    Organization?: OrganizationCreateNestedOneWithoutEventsInput
    Races?: RaceCreateNestedManyWithoutEventInput
    Results?: ResultCreateNestedManyWithoutEventInput
    Comps?: CompCreateNestedManyWithoutEventInput
    Series?: SeriesCreateNestedOneWithoutEventsInput
    follow?: followCreateNestedManyWithoutEventInput
  }

  export type EventUncheckedCreateWithoutLikeInput = {
    id?: string
    eventeid: string
    uniqueIdString: string
    name: string
    eventwebsite?: string | null
    email?: string | null
    venueName?: string | null
    description?: string | null
    titleImage?: string | null
    public?: boolean
    fileInfo?: NullableJsonNullValueInput | InputJsonValue
    resultColumns?: NullableJsonNullValueInput | InputJsonValue
    rest?: NullableJsonNullValueInput | InputJsonValue
    publisherId?: string | null
    venueId?: string | null
    organizationId?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    seriesId?: string | null
    Races?: RaceUncheckedCreateNestedManyWithoutEventInput
    Results?: ResultUncheckedCreateNestedManyWithoutEventInput
    Comps?: CompUncheckedCreateNestedManyWithoutEventInput
    follow?: followUncheckedCreateNestedManyWithoutEventInput
  }

  export type EventCreateOrConnectWithoutLikeInput = {
    where: EventWhereUniqueInput
    create: XOR<EventCreateWithoutLikeInput, EventUncheckedCreateWithoutLikeInput>
  }

  export type OrganizationCreateWithoutLikeInput = {
    id?: string
    name: string
    description?: string | null
    tag?: string | null
    website?: string | null
    email?: string | null
    contact?: NullableJsonNullValueInput | InputJsonValue
    titleImage?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    Owner?: UserCreateNestedOneWithoutOrganizationInput
    Series?: SeriesCreateNestedManyWithoutOrgInput
    Events?: EventCreateNestedManyWithoutOrganizationInput
    follow?: followCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUncheckedCreateWithoutLikeInput = {
    id?: string
    name: string
    description?: string | null
    tag?: string | null
    website?: string | null
    email?: string | null
    contact?: NullableJsonNullValueInput | InputJsonValue
    titleImage?: string | null
    ownerId?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    Series?: SeriesUncheckedCreateNestedManyWithoutOrgInput
    Events?: EventUncheckedCreateNestedManyWithoutOrganizationInput
    follow?: followUncheckedCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationCreateOrConnectWithoutLikeInput = {
    where: OrganizationWhereUniqueInput
    create: XOR<OrganizationCreateWithoutLikeInput, OrganizationUncheckedCreateWithoutLikeInput>
  }

  export type RaceCreateWithoutLikeInput = {
    id?: string
    raceId?: string | null
    uniqueRaceString?: string | null
    name?: string | null
    starts?: NullableJsonNullValueInput | InputJsonValue
    rank?: string | null
    date?: string | null
    time?: string | null
    notes?: string | null
    sailed?: string | null
    resultColumns?: NullableJsonNullValueInput | InputJsonValue
    rest?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    Event?: EventCreateNestedOneWithoutRacesInput
    Publisher?: UserCreateNestedOneWithoutRaceInput
    Comps?: CompCreateNestedManyWithoutRacesInput
    Results?: ResultCreateNestedManyWithoutRaceInput
    follow?: followCreateNestedManyWithoutRaceInput
  }

  export type RaceUncheckedCreateWithoutLikeInput = {
    id?: string
    raceId?: string | null
    uniqueRaceString?: string | null
    name?: string | null
    starts?: NullableJsonNullValueInput | InputJsonValue
    rank?: string | null
    date?: string | null
    time?: string | null
    notes?: string | null
    sailed?: string | null
    resultColumns?: NullableJsonNullValueInput | InputJsonValue
    rest?: NullableJsonNullValueInput | InputJsonValue
    eventId?: string | null
    publisherId?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    Comps?: CompUncheckedCreateNestedManyWithoutRacesInput
    Results?: ResultUncheckedCreateNestedManyWithoutRaceInput
    follow?: followUncheckedCreateNestedManyWithoutRaceInput
  }

  export type RaceCreateOrConnectWithoutLikeInput = {
    where: RaceWhereUniqueInput
    create: XOR<RaceCreateWithoutLikeInput, RaceUncheckedCreateWithoutLikeInput>
  }

  export type CompCreateWithoutLikeInput = {
    id?: string
    compId: string
    club?: string | null
    boat?: string | null
    skipper?: string | null
    fleet?: string | null
    division?: string | null
    rating?: string | null
    rank?: string | null
    nett?: string | null
    total?: string | null
    rest?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    Publisher?: UserCreateNestedOneWithoutCompInput
    Event?: EventCreateNestedOneWithoutCompsInput
    Results?: ResultCreateNestedManyWithoutCompInput
    Races?: RaceCreateNestedManyWithoutCompsInput
    follow?: followCreateNestedManyWithoutCompInput
  }

  export type CompUncheckedCreateWithoutLikeInput = {
    id?: string
    compId: string
    club?: string | null
    boat?: string | null
    skipper?: string | null
    fleet?: string | null
    division?: string | null
    rating?: string | null
    rank?: string | null
    nett?: string | null
    total?: string | null
    rest?: NullableJsonNullValueInput | InputJsonValue
    publisherId?: string | null
    eventId?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    Results?: ResultUncheckedCreateNestedManyWithoutCompInput
    Races?: RaceUncheckedCreateNestedManyWithoutCompsInput
    follow?: followUncheckedCreateNestedManyWithoutCompInput
  }

  export type CompCreateOrConnectWithoutLikeInput = {
    where: CompWhereUniqueInput
    create: XOR<CompCreateWithoutLikeInput, CompUncheckedCreateWithoutLikeInput>
  }

  export type UserUpsertWithoutLikeInput = {
    update: XOR<UserUpdateWithoutLikeInput, UserUncheckedUpdateWithoutLikeInput>
    create: XOR<UserCreateWithoutLikeInput, UserUncheckedCreateWithoutLikeInput>
  }

  export type UserUpdateWithoutLikeInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    session?: SessionUpdateManyWithoutUserNestedInput
    Key?: KeyUpdateManyWithoutUserNestedInput
    Article?: ArticleUpdateManyWithoutUserNestedInput
    Series?: SeriesUpdateManyWithoutPublisherNestedInput
    Event?: EventUpdateManyWithoutPublisherNestedInput
    Organization?: OrganizationUpdateManyWithoutOwnerNestedInput
    Comp?: CompUpdateManyWithoutPublisherNestedInput
    Venue?: VenueUpdateManyWithoutPublisherNestedInput
    UserSettings?: UserSettingsUpdateOneWithoutUserNestedInput
    Race?: RaceUpdateManyWithoutPublisherNestedInput
    Result?: ResultUpdateManyWithoutPublisherNestedInput
    follow?: followUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutLikeInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    session?: SessionUncheckedUpdateManyWithoutUserNestedInput
    Key?: KeyUncheckedUpdateManyWithoutUserNestedInput
    Article?: ArticleUncheckedUpdateManyWithoutUserNestedInput
    Series?: SeriesUncheckedUpdateManyWithoutPublisherNestedInput
    Event?: EventUncheckedUpdateManyWithoutPublisherNestedInput
    Organization?: OrganizationUncheckedUpdateManyWithoutOwnerNestedInput
    Comp?: CompUncheckedUpdateManyWithoutPublisherNestedInput
    Venue?: VenueUncheckedUpdateManyWithoutPublisherNestedInput
    UserSettings?: UserSettingsUncheckedUpdateOneWithoutUserNestedInput
    Race?: RaceUncheckedUpdateManyWithoutPublisherNestedInput
    Result?: ResultUncheckedUpdateManyWithoutPublisherNestedInput
    follow?: followUncheckedUpdateManyWithoutUserNestedInput
  }

  export type SeriesUpsertWithoutLikeInput = {
    update: XOR<SeriesUpdateWithoutLikeInput, SeriesUncheckedUpdateWithoutLikeInput>
    create: XOR<SeriesCreateWithoutLikeInput, SeriesUncheckedCreateWithoutLikeInput>
  }

  export type SeriesUpdateWithoutLikeInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    rest?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Org?: OrganizationUpdateOneWithoutSeriesNestedInput
    Publisher?: UserUpdateOneWithoutSeriesNestedInput
    Venues?: VenueUpdateManyWithoutSeriesNestedInput
    Events?: EventUpdateManyWithoutSeriesNestedInput
    follow?: followUpdateManyWithoutSeriesNestedInput
  }

  export type SeriesUncheckedUpdateWithoutLikeInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    rest?: NullableJsonNullValueInput | InputJsonValue
    organizationId?: NullableStringFieldUpdateOperationsInput | string | null
    publisherId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Venues?: VenueUncheckedUpdateManyWithoutSeriesNestedInput
    Events?: EventUncheckedUpdateManyWithoutSeriesNestedInput
    follow?: followUncheckedUpdateManyWithoutSeriesNestedInput
  }

  export type EventUpsertWithoutLikeInput = {
    update: XOR<EventUpdateWithoutLikeInput, EventUncheckedUpdateWithoutLikeInput>
    create: XOR<EventCreateWithoutLikeInput, EventUncheckedCreateWithoutLikeInput>
  }

  export type EventUpdateWithoutLikeInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventeid?: StringFieldUpdateOperationsInput | string
    uniqueIdString?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    eventwebsite?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    venueName?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    titleImage?: NullableStringFieldUpdateOperationsInput | string | null
    public?: BoolFieldUpdateOperationsInput | boolean
    fileInfo?: NullableJsonNullValueInput | InputJsonValue
    resultColumns?: NullableJsonNullValueInput | InputJsonValue
    rest?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Publisher?: UserUpdateOneWithoutEventNestedInput
    Venue?: VenueUpdateOneWithoutEventNestedInput
    Organization?: OrganizationUpdateOneWithoutEventsNestedInput
    Races?: RaceUpdateManyWithoutEventNestedInput
    Results?: ResultUpdateManyWithoutEventNestedInput
    Comps?: CompUpdateManyWithoutEventNestedInput
    Series?: SeriesUpdateOneWithoutEventsNestedInput
    follow?: followUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateWithoutLikeInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventeid?: StringFieldUpdateOperationsInput | string
    uniqueIdString?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    eventwebsite?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    venueName?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    titleImage?: NullableStringFieldUpdateOperationsInput | string | null
    public?: BoolFieldUpdateOperationsInput | boolean
    fileInfo?: NullableJsonNullValueInput | InputJsonValue
    resultColumns?: NullableJsonNullValueInput | InputJsonValue
    rest?: NullableJsonNullValueInput | InputJsonValue
    publisherId?: NullableStringFieldUpdateOperationsInput | string | null
    venueId?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    seriesId?: NullableStringFieldUpdateOperationsInput | string | null
    Races?: RaceUncheckedUpdateManyWithoutEventNestedInput
    Results?: ResultUncheckedUpdateManyWithoutEventNestedInput
    Comps?: CompUncheckedUpdateManyWithoutEventNestedInput
    follow?: followUncheckedUpdateManyWithoutEventNestedInput
  }

  export type OrganizationUpsertWithoutLikeInput = {
    update: XOR<OrganizationUpdateWithoutLikeInput, OrganizationUncheckedUpdateWithoutLikeInput>
    create: XOR<OrganizationCreateWithoutLikeInput, OrganizationUncheckedCreateWithoutLikeInput>
  }

  export type OrganizationUpdateWithoutLikeInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    tag?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableJsonNullValueInput | InputJsonValue
    titleImage?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Owner?: UserUpdateOneWithoutOrganizationNestedInput
    Series?: SeriesUpdateManyWithoutOrgNestedInput
    Events?: EventUpdateManyWithoutOrganizationNestedInput
    follow?: followUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationUncheckedUpdateWithoutLikeInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    tag?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableJsonNullValueInput | InputJsonValue
    titleImage?: NullableStringFieldUpdateOperationsInput | string | null
    ownerId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Series?: SeriesUncheckedUpdateManyWithoutOrgNestedInput
    Events?: EventUncheckedUpdateManyWithoutOrganizationNestedInput
    follow?: followUncheckedUpdateManyWithoutOrganizationNestedInput
  }

  export type RaceUpsertWithoutLikeInput = {
    update: XOR<RaceUpdateWithoutLikeInput, RaceUncheckedUpdateWithoutLikeInput>
    create: XOR<RaceCreateWithoutLikeInput, RaceUncheckedCreateWithoutLikeInput>
  }

  export type RaceUpdateWithoutLikeInput = {
    id?: StringFieldUpdateOperationsInput | string
    raceId?: NullableStringFieldUpdateOperationsInput | string | null
    uniqueRaceString?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    starts?: NullableJsonNullValueInput | InputJsonValue
    rank?: NullableStringFieldUpdateOperationsInput | string | null
    date?: NullableStringFieldUpdateOperationsInput | string | null
    time?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    sailed?: NullableStringFieldUpdateOperationsInput | string | null
    resultColumns?: NullableJsonNullValueInput | InputJsonValue
    rest?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Event?: EventUpdateOneWithoutRacesNestedInput
    Publisher?: UserUpdateOneWithoutRaceNestedInput
    Comps?: CompUpdateManyWithoutRacesNestedInput
    Results?: ResultUpdateManyWithoutRaceNestedInput
    follow?: followUpdateManyWithoutRaceNestedInput
  }

  export type RaceUncheckedUpdateWithoutLikeInput = {
    id?: StringFieldUpdateOperationsInput | string
    raceId?: NullableStringFieldUpdateOperationsInput | string | null
    uniqueRaceString?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    starts?: NullableJsonNullValueInput | InputJsonValue
    rank?: NullableStringFieldUpdateOperationsInput | string | null
    date?: NullableStringFieldUpdateOperationsInput | string | null
    time?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    sailed?: NullableStringFieldUpdateOperationsInput | string | null
    resultColumns?: NullableJsonNullValueInput | InputJsonValue
    rest?: NullableJsonNullValueInput | InputJsonValue
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
    publisherId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Comps?: CompUncheckedUpdateManyWithoutRacesNestedInput
    Results?: ResultUncheckedUpdateManyWithoutRaceNestedInput
    follow?: followUncheckedUpdateManyWithoutRaceNestedInput
  }

  export type CompUpsertWithoutLikeInput = {
    update: XOR<CompUpdateWithoutLikeInput, CompUncheckedUpdateWithoutLikeInput>
    create: XOR<CompCreateWithoutLikeInput, CompUncheckedCreateWithoutLikeInput>
  }

  export type CompUpdateWithoutLikeInput = {
    id?: StringFieldUpdateOperationsInput | string
    compId?: StringFieldUpdateOperationsInput | string
    club?: NullableStringFieldUpdateOperationsInput | string | null
    boat?: NullableStringFieldUpdateOperationsInput | string | null
    skipper?: NullableStringFieldUpdateOperationsInput | string | null
    fleet?: NullableStringFieldUpdateOperationsInput | string | null
    division?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableStringFieldUpdateOperationsInput | string | null
    rank?: NullableStringFieldUpdateOperationsInput | string | null
    nett?: NullableStringFieldUpdateOperationsInput | string | null
    total?: NullableStringFieldUpdateOperationsInput | string | null
    rest?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Publisher?: UserUpdateOneWithoutCompNestedInput
    Event?: EventUpdateOneWithoutCompsNestedInput
    Results?: ResultUpdateManyWithoutCompNestedInput
    Races?: RaceUpdateManyWithoutCompsNestedInput
    follow?: followUpdateManyWithoutCompNestedInput
  }

  export type CompUncheckedUpdateWithoutLikeInput = {
    id?: StringFieldUpdateOperationsInput | string
    compId?: StringFieldUpdateOperationsInput | string
    club?: NullableStringFieldUpdateOperationsInput | string | null
    boat?: NullableStringFieldUpdateOperationsInput | string | null
    skipper?: NullableStringFieldUpdateOperationsInput | string | null
    fleet?: NullableStringFieldUpdateOperationsInput | string | null
    division?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableStringFieldUpdateOperationsInput | string | null
    rank?: NullableStringFieldUpdateOperationsInput | string | null
    nett?: NullableStringFieldUpdateOperationsInput | string | null
    total?: NullableStringFieldUpdateOperationsInput | string | null
    rest?: NullableJsonNullValueInput | InputJsonValue
    publisherId?: NullableStringFieldUpdateOperationsInput | string | null
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Results?: ResultUncheckedUpdateManyWithoutCompNestedInput
    Races?: RaceUncheckedUpdateManyWithoutCompsNestedInput
    follow?: followUncheckedUpdateManyWithoutCompNestedInput
  }

  export type UserCreateWithoutVenueInput = {
    id: string
    name: string
    username: string
    email?: string | null
    avatar?: string | null
    session?: SessionCreateNestedManyWithoutUserInput
    Key?: KeyCreateNestedManyWithoutUserInput
    Article?: ArticleCreateNestedManyWithoutUserInput
    Series?: SeriesCreateNestedManyWithoutPublisherInput
    Event?: EventCreateNestedManyWithoutPublisherInput
    Organization?: OrganizationCreateNestedManyWithoutOwnerInput
    Comp?: CompCreateNestedManyWithoutPublisherInput
    UserSettings?: UserSettingsCreateNestedOneWithoutUserInput
    Race?: RaceCreateNestedManyWithoutPublisherInput
    Result?: ResultCreateNestedManyWithoutPublisherInput
    follow?: followCreateNestedManyWithoutUserInput
    like?: likeCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutVenueInput = {
    id: string
    name: string
    username: string
    email?: string | null
    avatar?: string | null
    session?: SessionUncheckedCreateNestedManyWithoutUserInput
    Key?: KeyUncheckedCreateNestedManyWithoutUserInput
    Article?: ArticleUncheckedCreateNestedManyWithoutUserInput
    Series?: SeriesUncheckedCreateNestedManyWithoutPublisherInput
    Event?: EventUncheckedCreateNestedManyWithoutPublisherInput
    Organization?: OrganizationUncheckedCreateNestedManyWithoutOwnerInput
    Comp?: CompUncheckedCreateNestedManyWithoutPublisherInput
    UserSettings?: UserSettingsUncheckedCreateNestedOneWithoutUserInput
    Race?: RaceUncheckedCreateNestedManyWithoutPublisherInput
    Result?: ResultUncheckedCreateNestedManyWithoutPublisherInput
    follow?: followUncheckedCreateNestedManyWithoutUserInput
    like?: likeUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutVenueInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutVenueInput, UserUncheckedCreateWithoutVenueInput>
  }

  export type SeriesCreateWithoutVenuesInput = {
    id?: string
    name: string
    description?: string | null
    rest?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    Org?: OrganizationCreateNestedOneWithoutSeriesInput
    Publisher?: UserCreateNestedOneWithoutSeriesInput
    Events?: EventCreateNestedManyWithoutSeriesInput
    follow?: followCreateNestedManyWithoutSeriesInput
    like?: likeCreateNestedManyWithoutSeriesInput
  }

  export type SeriesUncheckedCreateWithoutVenuesInput = {
    id?: string
    name: string
    description?: string | null
    rest?: NullableJsonNullValueInput | InputJsonValue
    organizationId?: string | null
    publisherId?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    Events?: EventUncheckedCreateNestedManyWithoutSeriesInput
    follow?: followUncheckedCreateNestedManyWithoutSeriesInput
    like?: likeUncheckedCreateNestedManyWithoutSeriesInput
  }

  export type SeriesCreateOrConnectWithoutVenuesInput = {
    where: SeriesWhereUniqueInput
    create: XOR<SeriesCreateWithoutVenuesInput, SeriesUncheckedCreateWithoutVenuesInput>
  }

  export type EventCreateWithoutVenueInput = {
    id?: string
    eventeid: string
    uniqueIdString: string
    name: string
    eventwebsite?: string | null
    email?: string | null
    venueName?: string | null
    description?: string | null
    titleImage?: string | null
    public?: boolean
    fileInfo?: NullableJsonNullValueInput | InputJsonValue
    resultColumns?: NullableJsonNullValueInput | InputJsonValue
    rest?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    Publisher?: UserCreateNestedOneWithoutEventInput
    Organization?: OrganizationCreateNestedOneWithoutEventsInput
    Races?: RaceCreateNestedManyWithoutEventInput
    Results?: ResultCreateNestedManyWithoutEventInput
    Comps?: CompCreateNestedManyWithoutEventInput
    Series?: SeriesCreateNestedOneWithoutEventsInput
    follow?: followCreateNestedManyWithoutEventInput
    like?: likeCreateNestedManyWithoutEventInput
  }

  export type EventUncheckedCreateWithoutVenueInput = {
    id?: string
    eventeid: string
    uniqueIdString: string
    name: string
    eventwebsite?: string | null
    email?: string | null
    venueName?: string | null
    description?: string | null
    titleImage?: string | null
    public?: boolean
    fileInfo?: NullableJsonNullValueInput | InputJsonValue
    resultColumns?: NullableJsonNullValueInput | InputJsonValue
    rest?: NullableJsonNullValueInput | InputJsonValue
    publisherId?: string | null
    organizationId?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    seriesId?: string | null
    Races?: RaceUncheckedCreateNestedManyWithoutEventInput
    Results?: ResultUncheckedCreateNestedManyWithoutEventInput
    Comps?: CompUncheckedCreateNestedManyWithoutEventInput
    follow?: followUncheckedCreateNestedManyWithoutEventInput
    like?: likeUncheckedCreateNestedManyWithoutEventInput
  }

  export type EventCreateOrConnectWithoutVenueInput = {
    where: EventWhereUniqueInput
    create: XOR<EventCreateWithoutVenueInput, EventUncheckedCreateWithoutVenueInput>
  }

  export type EventCreateManyVenueInputEnvelope = {
    data: Enumerable<EventCreateManyVenueInput>
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutVenueInput = {
    update: XOR<UserUpdateWithoutVenueInput, UserUncheckedUpdateWithoutVenueInput>
    create: XOR<UserCreateWithoutVenueInput, UserUncheckedCreateWithoutVenueInput>
  }

  export type UserUpdateWithoutVenueInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    session?: SessionUpdateManyWithoutUserNestedInput
    Key?: KeyUpdateManyWithoutUserNestedInput
    Article?: ArticleUpdateManyWithoutUserNestedInput
    Series?: SeriesUpdateManyWithoutPublisherNestedInput
    Event?: EventUpdateManyWithoutPublisherNestedInput
    Organization?: OrganizationUpdateManyWithoutOwnerNestedInput
    Comp?: CompUpdateManyWithoutPublisherNestedInput
    UserSettings?: UserSettingsUpdateOneWithoutUserNestedInput
    Race?: RaceUpdateManyWithoutPublisherNestedInput
    Result?: ResultUpdateManyWithoutPublisherNestedInput
    follow?: followUpdateManyWithoutUserNestedInput
    like?: likeUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutVenueInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    session?: SessionUncheckedUpdateManyWithoutUserNestedInput
    Key?: KeyUncheckedUpdateManyWithoutUserNestedInput
    Article?: ArticleUncheckedUpdateManyWithoutUserNestedInput
    Series?: SeriesUncheckedUpdateManyWithoutPublisherNestedInput
    Event?: EventUncheckedUpdateManyWithoutPublisherNestedInput
    Organization?: OrganizationUncheckedUpdateManyWithoutOwnerNestedInput
    Comp?: CompUncheckedUpdateManyWithoutPublisherNestedInput
    UserSettings?: UserSettingsUncheckedUpdateOneWithoutUserNestedInput
    Race?: RaceUncheckedUpdateManyWithoutPublisherNestedInput
    Result?: ResultUncheckedUpdateManyWithoutPublisherNestedInput
    follow?: followUncheckedUpdateManyWithoutUserNestedInput
    like?: likeUncheckedUpdateManyWithoutUserNestedInput
  }

  export type SeriesUpsertWithWhereUniqueWithoutVenuesInput = {
    where: SeriesWhereUniqueInput
    update: XOR<SeriesUpdateWithoutVenuesInput, SeriesUncheckedUpdateWithoutVenuesInput>
    create: XOR<SeriesCreateWithoutVenuesInput, SeriesUncheckedCreateWithoutVenuesInput>
  }

  export type SeriesUpdateWithWhereUniqueWithoutVenuesInput = {
    where: SeriesWhereUniqueInput
    data: XOR<SeriesUpdateWithoutVenuesInput, SeriesUncheckedUpdateWithoutVenuesInput>
  }

  export type SeriesUpdateManyWithWhereWithoutVenuesInput = {
    where: SeriesScalarWhereInput
    data: XOR<SeriesUpdateManyMutationInput, SeriesUncheckedUpdateManyWithoutSeriesInput>
  }

  export type EventUpsertWithWhereUniqueWithoutVenueInput = {
    where: EventWhereUniqueInput
    update: XOR<EventUpdateWithoutVenueInput, EventUncheckedUpdateWithoutVenueInput>
    create: XOR<EventCreateWithoutVenueInput, EventUncheckedCreateWithoutVenueInput>
  }

  export type EventUpdateWithWhereUniqueWithoutVenueInput = {
    where: EventWhereUniqueInput
    data: XOR<EventUpdateWithoutVenueInput, EventUncheckedUpdateWithoutVenueInput>
  }

  export type EventUpdateManyWithWhereWithoutVenueInput = {
    where: EventScalarWhereInput
    data: XOR<EventUpdateManyMutationInput, EventUncheckedUpdateManyWithoutEventInput>
  }

  export type SessionCreateWithoutUserInput = {
    id: string
    active_expires: bigint | number
    idle_expires: bigint | number
  }

  export type SessionUncheckedCreateWithoutUserInput = {
    id: string
    active_expires: bigint | number
    idle_expires: bigint | number
  }

  export type SessionCreateOrConnectWithoutUserInput = {
    where: SessionWhereUniqueInput
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionCreateManyUserInputEnvelope = {
    data: Enumerable<SessionCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type KeyCreateWithoutUserInput = {
    id: string
    hashed_password?: string | null
    primary: boolean
  }

  export type KeyUncheckedCreateWithoutUserInput = {
    id: string
    hashed_password?: string | null
    primary: boolean
  }

  export type KeyCreateOrConnectWithoutUserInput = {
    where: KeyWhereUniqueInput
    create: XOR<KeyCreateWithoutUserInput, KeyUncheckedCreateWithoutUserInput>
  }

  export type KeyCreateManyUserInputEnvelope = {
    data: Enumerable<KeyCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type ArticleCreateWithoutUserInput = {
    id?: string
    title: string
    content?: string | null
    bogus?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
  }

  export type ArticleUncheckedCreateWithoutUserInput = {
    id?: string
    title: string
    content?: string | null
    bogus?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
  }

  export type ArticleCreateOrConnectWithoutUserInput = {
    where: ArticleWhereUniqueInput
    create: XOR<ArticleCreateWithoutUserInput, ArticleUncheckedCreateWithoutUserInput>
  }

  export type ArticleCreateManyUserInputEnvelope = {
    data: Enumerable<ArticleCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type SeriesCreateWithoutPublisherInput = {
    id?: string
    name: string
    description?: string | null
    rest?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    Org?: OrganizationCreateNestedOneWithoutSeriesInput
    Venues?: VenueCreateNestedManyWithoutSeriesInput
    Events?: EventCreateNestedManyWithoutSeriesInput
    follow?: followCreateNestedManyWithoutSeriesInput
    like?: likeCreateNestedManyWithoutSeriesInput
  }

  export type SeriesUncheckedCreateWithoutPublisherInput = {
    id?: string
    name: string
    description?: string | null
    rest?: NullableJsonNullValueInput | InputJsonValue
    organizationId?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    Venues?: VenueUncheckedCreateNestedManyWithoutSeriesInput
    Events?: EventUncheckedCreateNestedManyWithoutSeriesInput
    follow?: followUncheckedCreateNestedManyWithoutSeriesInput
    like?: likeUncheckedCreateNestedManyWithoutSeriesInput
  }

  export type SeriesCreateOrConnectWithoutPublisherInput = {
    where: SeriesWhereUniqueInput
    create: XOR<SeriesCreateWithoutPublisherInput, SeriesUncheckedCreateWithoutPublisherInput>
  }

  export type SeriesCreateManyPublisherInputEnvelope = {
    data: Enumerable<SeriesCreateManyPublisherInput>
    skipDuplicates?: boolean
  }

  export type EventCreateWithoutPublisherInput = {
    id?: string
    eventeid: string
    uniqueIdString: string
    name: string
    eventwebsite?: string | null
    email?: string | null
    venueName?: string | null
    description?: string | null
    titleImage?: string | null
    public?: boolean
    fileInfo?: NullableJsonNullValueInput | InputJsonValue
    resultColumns?: NullableJsonNullValueInput | InputJsonValue
    rest?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    Venue?: VenueCreateNestedOneWithoutEventInput
    Organization?: OrganizationCreateNestedOneWithoutEventsInput
    Races?: RaceCreateNestedManyWithoutEventInput
    Results?: ResultCreateNestedManyWithoutEventInput
    Comps?: CompCreateNestedManyWithoutEventInput
    Series?: SeriesCreateNestedOneWithoutEventsInput
    follow?: followCreateNestedManyWithoutEventInput
    like?: likeCreateNestedManyWithoutEventInput
  }

  export type EventUncheckedCreateWithoutPublisherInput = {
    id?: string
    eventeid: string
    uniqueIdString: string
    name: string
    eventwebsite?: string | null
    email?: string | null
    venueName?: string | null
    description?: string | null
    titleImage?: string | null
    public?: boolean
    fileInfo?: NullableJsonNullValueInput | InputJsonValue
    resultColumns?: NullableJsonNullValueInput | InputJsonValue
    rest?: NullableJsonNullValueInput | InputJsonValue
    venueId?: string | null
    organizationId?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    seriesId?: string | null
    Races?: RaceUncheckedCreateNestedManyWithoutEventInput
    Results?: ResultUncheckedCreateNestedManyWithoutEventInput
    Comps?: CompUncheckedCreateNestedManyWithoutEventInput
    follow?: followUncheckedCreateNestedManyWithoutEventInput
    like?: likeUncheckedCreateNestedManyWithoutEventInput
  }

  export type EventCreateOrConnectWithoutPublisherInput = {
    where: EventWhereUniqueInput
    create: XOR<EventCreateWithoutPublisherInput, EventUncheckedCreateWithoutPublisherInput>
  }

  export type EventCreateManyPublisherInputEnvelope = {
    data: Enumerable<EventCreateManyPublisherInput>
    skipDuplicates?: boolean
  }

  export type OrganizationCreateWithoutOwnerInput = {
    id?: string
    name: string
    description?: string | null
    tag?: string | null
    website?: string | null
    email?: string | null
    contact?: NullableJsonNullValueInput | InputJsonValue
    titleImage?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    Series?: SeriesCreateNestedManyWithoutOrgInput
    Events?: EventCreateNestedManyWithoutOrganizationInput
    follow?: followCreateNestedManyWithoutOrganizationInput
    like?: likeCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUncheckedCreateWithoutOwnerInput = {
    id?: string
    name: string
    description?: string | null
    tag?: string | null
    website?: string | null
    email?: string | null
    contact?: NullableJsonNullValueInput | InputJsonValue
    titleImage?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    Series?: SeriesUncheckedCreateNestedManyWithoutOrgInput
    Events?: EventUncheckedCreateNestedManyWithoutOrganizationInput
    follow?: followUncheckedCreateNestedManyWithoutOrganizationInput
    like?: likeUncheckedCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationCreateOrConnectWithoutOwnerInput = {
    where: OrganizationWhereUniqueInput
    create: XOR<OrganizationCreateWithoutOwnerInput, OrganizationUncheckedCreateWithoutOwnerInput>
  }

  export type OrganizationCreateManyOwnerInputEnvelope = {
    data: Enumerable<OrganizationCreateManyOwnerInput>
    skipDuplicates?: boolean
  }

  export type CompCreateWithoutPublisherInput = {
    id?: string
    compId: string
    club?: string | null
    boat?: string | null
    skipper?: string | null
    fleet?: string | null
    division?: string | null
    rating?: string | null
    rank?: string | null
    nett?: string | null
    total?: string | null
    rest?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    Event?: EventCreateNestedOneWithoutCompsInput
    Results?: ResultCreateNestedManyWithoutCompInput
    Races?: RaceCreateNestedManyWithoutCompsInput
    follow?: followCreateNestedManyWithoutCompInput
    like?: likeCreateNestedManyWithoutCompInput
  }

  export type CompUncheckedCreateWithoutPublisherInput = {
    id?: string
    compId: string
    club?: string | null
    boat?: string | null
    skipper?: string | null
    fleet?: string | null
    division?: string | null
    rating?: string | null
    rank?: string | null
    nett?: string | null
    total?: string | null
    rest?: NullableJsonNullValueInput | InputJsonValue
    eventId?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    Results?: ResultUncheckedCreateNestedManyWithoutCompInput
    Races?: RaceUncheckedCreateNestedManyWithoutCompsInput
    follow?: followUncheckedCreateNestedManyWithoutCompInput
    like?: likeUncheckedCreateNestedManyWithoutCompInput
  }

  export type CompCreateOrConnectWithoutPublisherInput = {
    where: CompWhereUniqueInput
    create: XOR<CompCreateWithoutPublisherInput, CompUncheckedCreateWithoutPublisherInput>
  }

  export type CompCreateManyPublisherInputEnvelope = {
    data: Enumerable<CompCreateManyPublisherInput>
    skipDuplicates?: boolean
  }

  export type VenueCreateWithoutPublisherInput = {
    id?: string
    name: string
    website?: string | null
    email?: string | null
    burgee?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    Series?: SeriesCreateNestedManyWithoutVenuesInput
    Event?: EventCreateNestedManyWithoutVenueInput
  }

  export type VenueUncheckedCreateWithoutPublisherInput = {
    id?: string
    name: string
    website?: string | null
    email?: string | null
    burgee?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    Series?: SeriesUncheckedCreateNestedManyWithoutVenuesInput
    Event?: EventUncheckedCreateNestedManyWithoutVenueInput
  }

  export type VenueCreateOrConnectWithoutPublisherInput = {
    where: VenueWhereUniqueInput
    create: XOR<VenueCreateWithoutPublisherInput, VenueUncheckedCreateWithoutPublisherInput>
  }

  export type VenueCreateManyPublisherInputEnvelope = {
    data: Enumerable<VenueCreateManyPublisherInput>
    skipDuplicates?: boolean
  }

  export type UserSettingsCreateWithoutUserInput = {
    id?: string
    theme?: string | null
    language?: Lang | null
  }

  export type UserSettingsUncheckedCreateWithoutUserInput = {
    id?: string
    theme?: string | null
    language?: Lang | null
  }

  export type UserSettingsCreateOrConnectWithoutUserInput = {
    where: UserSettingsWhereUniqueInput
    create: XOR<UserSettingsCreateWithoutUserInput, UserSettingsUncheckedCreateWithoutUserInput>
  }

  export type RaceCreateWithoutPublisherInput = {
    id?: string
    raceId?: string | null
    uniqueRaceString?: string | null
    name?: string | null
    starts?: NullableJsonNullValueInput | InputJsonValue
    rank?: string | null
    date?: string | null
    time?: string | null
    notes?: string | null
    sailed?: string | null
    resultColumns?: NullableJsonNullValueInput | InputJsonValue
    rest?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    Event?: EventCreateNestedOneWithoutRacesInput
    Comps?: CompCreateNestedManyWithoutRacesInput
    Results?: ResultCreateNestedManyWithoutRaceInput
    follow?: followCreateNestedManyWithoutRaceInput
    like?: likeCreateNestedManyWithoutRaceInput
  }

  export type RaceUncheckedCreateWithoutPublisherInput = {
    id?: string
    raceId?: string | null
    uniqueRaceString?: string | null
    name?: string | null
    starts?: NullableJsonNullValueInput | InputJsonValue
    rank?: string | null
    date?: string | null
    time?: string | null
    notes?: string | null
    sailed?: string | null
    resultColumns?: NullableJsonNullValueInput | InputJsonValue
    rest?: NullableJsonNullValueInput | InputJsonValue
    eventId?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    Comps?: CompUncheckedCreateNestedManyWithoutRacesInput
    Results?: ResultUncheckedCreateNestedManyWithoutRaceInput
    follow?: followUncheckedCreateNestedManyWithoutRaceInput
    like?: likeUncheckedCreateNestedManyWithoutRaceInput
  }

  export type RaceCreateOrConnectWithoutPublisherInput = {
    where: RaceWhereUniqueInput
    create: XOR<RaceCreateWithoutPublisherInput, RaceUncheckedCreateWithoutPublisherInput>
  }

  export type RaceCreateManyPublisherInputEnvelope = {
    data: Enumerable<RaceCreateManyPublisherInput>
    skipDuplicates?: boolean
  }

  export type ResultCreateWithoutPublisherInput = {
    id?: string
    resultId?: string | null
    finish?: string | null
    start?: string | null
    points?: string | null
    position?: string | null
    discard?: string | null
    corrected?: string | null
    resultType?: string | null
    elasped?: string | null
    supposedRating?: string | null
    elapsedWin?: string | null
    ratingWin?: string | null
    rrset?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    Event?: EventCreateNestedOneWithoutResultsInput
    Comp?: CompCreateNestedOneWithoutResultsInput
    Race?: RaceCreateNestedOneWithoutResultsInput
  }

  export type ResultUncheckedCreateWithoutPublisherInput = {
    id?: string
    resultId?: string | null
    finish?: string | null
    start?: string | null
    points?: string | null
    position?: string | null
    discard?: string | null
    corrected?: string | null
    resultType?: string | null
    elasped?: string | null
    supposedRating?: string | null
    elapsedWin?: string | null
    ratingWin?: string | null
    rrset?: string | null
    eventId?: string | null
    compId?: string | null
    raceId?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
  }

  export type ResultCreateOrConnectWithoutPublisherInput = {
    where: ResultWhereUniqueInput
    create: XOR<ResultCreateWithoutPublisherInput, ResultUncheckedCreateWithoutPublisherInput>
  }

  export type ResultCreateManyPublisherInputEnvelope = {
    data: Enumerable<ResultCreateManyPublisherInput>
    skipDuplicates?: boolean
  }

  export type followCreateWithoutUserInput = {
    id?: string
    type: string
    updatedAt?: Date | string
    createdAt?: Date | string
    Series?: SeriesCreateNestedOneWithoutFollowInput
    Event?: EventCreateNestedOneWithoutFollowInput
    Organization?: OrganizationCreateNestedOneWithoutFollowInput
    Race?: RaceCreateNestedOneWithoutFollowInput
    Comp?: CompCreateNestedOneWithoutFollowInput
  }

  export type followUncheckedCreateWithoutUserInput = {
    id?: string
    type: string
    seriesId?: string | null
    eventId?: string | null
    organizationId?: string | null
    raceId?: string | null
    compId?: string | null
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type followCreateOrConnectWithoutUserInput = {
    where: followWhereUniqueInput
    create: XOR<followCreateWithoutUserInput, followUncheckedCreateWithoutUserInput>
  }

  export type followCreateManyUserInputEnvelope = {
    data: Enumerable<followCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type likeCreateWithoutUserInput = {
    id?: string
    type: string
    updatedAt?: Date | string
    createdAt?: Date | string
    Series?: SeriesCreateNestedOneWithoutLikeInput
    Event?: EventCreateNestedOneWithoutLikeInput
    Organization?: OrganizationCreateNestedOneWithoutLikeInput
    Race?: RaceCreateNestedOneWithoutLikeInput
    Comp?: CompCreateNestedOneWithoutLikeInput
  }

  export type likeUncheckedCreateWithoutUserInput = {
    id?: string
    type: string
    seriesId?: string | null
    eventId?: string | null
    organizationId?: string | null
    raceId?: string | null
    compId?: string | null
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type likeCreateOrConnectWithoutUserInput = {
    where: likeWhereUniqueInput
    create: XOR<likeCreateWithoutUserInput, likeUncheckedCreateWithoutUserInput>
  }

  export type likeCreateManyUserInputEnvelope = {
    data: Enumerable<likeCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type SessionUpsertWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    update: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionUpdateWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    data: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
  }

  export type SessionUpdateManyWithWhereWithoutUserInput = {
    where: SessionScalarWhereInput
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyWithoutSessionInput>
  }

  export type SessionScalarWhereInput = {
    AND?: Enumerable<SessionScalarWhereInput>
    OR?: Enumerable<SessionScalarWhereInput>
    NOT?: Enumerable<SessionScalarWhereInput>
    id?: StringFilter | string
    user_id?: StringFilter | string
    active_expires?: BigIntFilter | bigint | number
    idle_expires?: BigIntFilter | bigint | number
  }

  export type KeyUpsertWithWhereUniqueWithoutUserInput = {
    where: KeyWhereUniqueInput
    update: XOR<KeyUpdateWithoutUserInput, KeyUncheckedUpdateWithoutUserInput>
    create: XOR<KeyCreateWithoutUserInput, KeyUncheckedCreateWithoutUserInput>
  }

  export type KeyUpdateWithWhereUniqueWithoutUserInput = {
    where: KeyWhereUniqueInput
    data: XOR<KeyUpdateWithoutUserInput, KeyUncheckedUpdateWithoutUserInput>
  }

  export type KeyUpdateManyWithWhereWithoutUserInput = {
    where: KeyScalarWhereInput
    data: XOR<KeyUpdateManyMutationInput, KeyUncheckedUpdateManyWithoutKeyInput>
  }

  export type KeyScalarWhereInput = {
    AND?: Enumerable<KeyScalarWhereInput>
    OR?: Enumerable<KeyScalarWhereInput>
    NOT?: Enumerable<KeyScalarWhereInput>
    id?: StringFilter | string
    hashed_password?: StringNullableFilter | string | null
    user_id?: StringFilter | string
    primary?: BoolFilter | boolean
  }

  export type ArticleUpsertWithWhereUniqueWithoutUserInput = {
    where: ArticleWhereUniqueInput
    update: XOR<ArticleUpdateWithoutUserInput, ArticleUncheckedUpdateWithoutUserInput>
    create: XOR<ArticleCreateWithoutUserInput, ArticleUncheckedCreateWithoutUserInput>
  }

  export type ArticleUpdateWithWhereUniqueWithoutUserInput = {
    where: ArticleWhereUniqueInput
    data: XOR<ArticleUpdateWithoutUserInput, ArticleUncheckedUpdateWithoutUserInput>
  }

  export type ArticleUpdateManyWithWhereWithoutUserInput = {
    where: ArticleScalarWhereInput
    data: XOR<ArticleUpdateManyMutationInput, ArticleUncheckedUpdateManyWithoutArticleInput>
  }

  export type ArticleScalarWhereInput = {
    AND?: Enumerable<ArticleScalarWhereInput>
    OR?: Enumerable<ArticleScalarWhereInput>
    NOT?: Enumerable<ArticleScalarWhereInput>
    id?: StringFilter | string
    title?: StringFilter | string
    content?: StringNullableFilter | string | null
    userId?: StringNullableFilter | string | null
    bogus?: StringNullableFilter | string | null
    createdAt?: DateTimeNullableFilter | Date | string | null
    updatedAt?: DateTimeNullableFilter | Date | string | null
  }

  export type SeriesUpsertWithWhereUniqueWithoutPublisherInput = {
    where: SeriesWhereUniqueInput
    update: XOR<SeriesUpdateWithoutPublisherInput, SeriesUncheckedUpdateWithoutPublisherInput>
    create: XOR<SeriesCreateWithoutPublisherInput, SeriesUncheckedCreateWithoutPublisherInput>
  }

  export type SeriesUpdateWithWhereUniqueWithoutPublisherInput = {
    where: SeriesWhereUniqueInput
    data: XOR<SeriesUpdateWithoutPublisherInput, SeriesUncheckedUpdateWithoutPublisherInput>
  }

  export type SeriesUpdateManyWithWhereWithoutPublisherInput = {
    where: SeriesScalarWhereInput
    data: XOR<SeriesUpdateManyMutationInput, SeriesUncheckedUpdateManyWithoutSeriesInput>
  }

  export type EventUpsertWithWhereUniqueWithoutPublisherInput = {
    where: EventWhereUniqueInput
    update: XOR<EventUpdateWithoutPublisherInput, EventUncheckedUpdateWithoutPublisherInput>
    create: XOR<EventCreateWithoutPublisherInput, EventUncheckedCreateWithoutPublisherInput>
  }

  export type EventUpdateWithWhereUniqueWithoutPublisherInput = {
    where: EventWhereUniqueInput
    data: XOR<EventUpdateWithoutPublisherInput, EventUncheckedUpdateWithoutPublisherInput>
  }

  export type EventUpdateManyWithWhereWithoutPublisherInput = {
    where: EventScalarWhereInput
    data: XOR<EventUpdateManyMutationInput, EventUncheckedUpdateManyWithoutEventInput>
  }

  export type OrganizationUpsertWithWhereUniqueWithoutOwnerInput = {
    where: OrganizationWhereUniqueInput
    update: XOR<OrganizationUpdateWithoutOwnerInput, OrganizationUncheckedUpdateWithoutOwnerInput>
    create: XOR<OrganizationCreateWithoutOwnerInput, OrganizationUncheckedCreateWithoutOwnerInput>
  }

  export type OrganizationUpdateWithWhereUniqueWithoutOwnerInput = {
    where: OrganizationWhereUniqueInput
    data: XOR<OrganizationUpdateWithoutOwnerInput, OrganizationUncheckedUpdateWithoutOwnerInput>
  }

  export type OrganizationUpdateManyWithWhereWithoutOwnerInput = {
    where: OrganizationScalarWhereInput
    data: XOR<OrganizationUpdateManyMutationInput, OrganizationUncheckedUpdateManyWithoutOrganizationInput>
  }

  export type OrganizationScalarWhereInput = {
    AND?: Enumerable<OrganizationScalarWhereInput>
    OR?: Enumerable<OrganizationScalarWhereInput>
    NOT?: Enumerable<OrganizationScalarWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    description?: StringNullableFilter | string | null
    tag?: StringNullableFilter | string | null
    website?: StringNullableFilter | string | null
    email?: StringNullableFilter | string | null
    contact?: JsonNullableFilter
    titleImage?: StringNullableFilter | string | null
    ownerId?: StringNullableFilter | string | null
    createdAt?: DateTimeNullableFilter | Date | string | null
    updatedAt?: DateTimeNullableFilter | Date | string | null
  }

  export type CompUpsertWithWhereUniqueWithoutPublisherInput = {
    where: CompWhereUniqueInput
    update: XOR<CompUpdateWithoutPublisherInput, CompUncheckedUpdateWithoutPublisherInput>
    create: XOR<CompCreateWithoutPublisherInput, CompUncheckedCreateWithoutPublisherInput>
  }

  export type CompUpdateWithWhereUniqueWithoutPublisherInput = {
    where: CompWhereUniqueInput
    data: XOR<CompUpdateWithoutPublisherInput, CompUncheckedUpdateWithoutPublisherInput>
  }

  export type CompUpdateManyWithWhereWithoutPublisherInput = {
    where: CompScalarWhereInput
    data: XOR<CompUpdateManyMutationInput, CompUncheckedUpdateManyWithoutCompInput>
  }

  export type VenueUpsertWithWhereUniqueWithoutPublisherInput = {
    where: VenueWhereUniqueInput
    update: XOR<VenueUpdateWithoutPublisherInput, VenueUncheckedUpdateWithoutPublisherInput>
    create: XOR<VenueCreateWithoutPublisherInput, VenueUncheckedCreateWithoutPublisherInput>
  }

  export type VenueUpdateWithWhereUniqueWithoutPublisherInput = {
    where: VenueWhereUniqueInput
    data: XOR<VenueUpdateWithoutPublisherInput, VenueUncheckedUpdateWithoutPublisherInput>
  }

  export type VenueUpdateManyWithWhereWithoutPublisherInput = {
    where: VenueScalarWhereInput
    data: XOR<VenueUpdateManyMutationInput, VenueUncheckedUpdateManyWithoutVenueInput>
  }

  export type UserSettingsUpsertWithoutUserInput = {
    update: XOR<UserSettingsUpdateWithoutUserInput, UserSettingsUncheckedUpdateWithoutUserInput>
    create: XOR<UserSettingsCreateWithoutUserInput, UserSettingsUncheckedCreateWithoutUserInput>
  }

  export type UserSettingsUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    theme?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableEnumLangFieldUpdateOperationsInput | Lang | null
  }

  export type UserSettingsUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    theme?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableEnumLangFieldUpdateOperationsInput | Lang | null
  }

  export type RaceUpsertWithWhereUniqueWithoutPublisherInput = {
    where: RaceWhereUniqueInput
    update: XOR<RaceUpdateWithoutPublisherInput, RaceUncheckedUpdateWithoutPublisherInput>
    create: XOR<RaceCreateWithoutPublisherInput, RaceUncheckedCreateWithoutPublisherInput>
  }

  export type RaceUpdateWithWhereUniqueWithoutPublisherInput = {
    where: RaceWhereUniqueInput
    data: XOR<RaceUpdateWithoutPublisherInput, RaceUncheckedUpdateWithoutPublisherInput>
  }

  export type RaceUpdateManyWithWhereWithoutPublisherInput = {
    where: RaceScalarWhereInput
    data: XOR<RaceUpdateManyMutationInput, RaceUncheckedUpdateManyWithoutRaceInput>
  }

  export type ResultUpsertWithWhereUniqueWithoutPublisherInput = {
    where: ResultWhereUniqueInput
    update: XOR<ResultUpdateWithoutPublisherInput, ResultUncheckedUpdateWithoutPublisherInput>
    create: XOR<ResultCreateWithoutPublisherInput, ResultUncheckedCreateWithoutPublisherInput>
  }

  export type ResultUpdateWithWhereUniqueWithoutPublisherInput = {
    where: ResultWhereUniqueInput
    data: XOR<ResultUpdateWithoutPublisherInput, ResultUncheckedUpdateWithoutPublisherInput>
  }

  export type ResultUpdateManyWithWhereWithoutPublisherInput = {
    where: ResultScalarWhereInput
    data: XOR<ResultUpdateManyMutationInput, ResultUncheckedUpdateManyWithoutResultInput>
  }

  export type followUpsertWithWhereUniqueWithoutUserInput = {
    where: followWhereUniqueInput
    update: XOR<followUpdateWithoutUserInput, followUncheckedUpdateWithoutUserInput>
    create: XOR<followCreateWithoutUserInput, followUncheckedCreateWithoutUserInput>
  }

  export type followUpdateWithWhereUniqueWithoutUserInput = {
    where: followWhereUniqueInput
    data: XOR<followUpdateWithoutUserInput, followUncheckedUpdateWithoutUserInput>
  }

  export type followUpdateManyWithWhereWithoutUserInput = {
    where: followScalarWhereInput
    data: XOR<followUpdateManyMutationInput, followUncheckedUpdateManyWithoutFollowInput>
  }

  export type likeUpsertWithWhereUniqueWithoutUserInput = {
    where: likeWhereUniqueInput
    update: XOR<likeUpdateWithoutUserInput, likeUncheckedUpdateWithoutUserInput>
    create: XOR<likeCreateWithoutUserInput, likeUncheckedCreateWithoutUserInput>
  }

  export type likeUpdateWithWhereUniqueWithoutUserInput = {
    where: likeWhereUniqueInput
    data: XOR<likeUpdateWithoutUserInput, likeUncheckedUpdateWithoutUserInput>
  }

  export type likeUpdateManyWithWhereWithoutUserInput = {
    where: likeScalarWhereInput
    data: XOR<likeUpdateManyMutationInput, likeUncheckedUpdateManyWithoutLikeInput>
  }

  export type UserCreateWithoutUserSettingsInput = {
    id: string
    name: string
    username: string
    email?: string | null
    avatar?: string | null
    session?: SessionCreateNestedManyWithoutUserInput
    Key?: KeyCreateNestedManyWithoutUserInput
    Article?: ArticleCreateNestedManyWithoutUserInput
    Series?: SeriesCreateNestedManyWithoutPublisherInput
    Event?: EventCreateNestedManyWithoutPublisherInput
    Organization?: OrganizationCreateNestedManyWithoutOwnerInput
    Comp?: CompCreateNestedManyWithoutPublisherInput
    Venue?: VenueCreateNestedManyWithoutPublisherInput
    Race?: RaceCreateNestedManyWithoutPublisherInput
    Result?: ResultCreateNestedManyWithoutPublisherInput
    follow?: followCreateNestedManyWithoutUserInput
    like?: likeCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutUserSettingsInput = {
    id: string
    name: string
    username: string
    email?: string | null
    avatar?: string | null
    session?: SessionUncheckedCreateNestedManyWithoutUserInput
    Key?: KeyUncheckedCreateNestedManyWithoutUserInput
    Article?: ArticleUncheckedCreateNestedManyWithoutUserInput
    Series?: SeriesUncheckedCreateNestedManyWithoutPublisherInput
    Event?: EventUncheckedCreateNestedManyWithoutPublisherInput
    Organization?: OrganizationUncheckedCreateNestedManyWithoutOwnerInput
    Comp?: CompUncheckedCreateNestedManyWithoutPublisherInput
    Venue?: VenueUncheckedCreateNestedManyWithoutPublisherInput
    Race?: RaceUncheckedCreateNestedManyWithoutPublisherInput
    Result?: ResultUncheckedCreateNestedManyWithoutPublisherInput
    follow?: followUncheckedCreateNestedManyWithoutUserInput
    like?: likeUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutUserSettingsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUserSettingsInput, UserUncheckedCreateWithoutUserSettingsInput>
  }

  export type UserUpsertWithoutUserSettingsInput = {
    update: XOR<UserUpdateWithoutUserSettingsInput, UserUncheckedUpdateWithoutUserSettingsInput>
    create: XOR<UserCreateWithoutUserSettingsInput, UserUncheckedCreateWithoutUserSettingsInput>
  }

  export type UserUpdateWithoutUserSettingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    session?: SessionUpdateManyWithoutUserNestedInput
    Key?: KeyUpdateManyWithoutUserNestedInput
    Article?: ArticleUpdateManyWithoutUserNestedInput
    Series?: SeriesUpdateManyWithoutPublisherNestedInput
    Event?: EventUpdateManyWithoutPublisherNestedInput
    Organization?: OrganizationUpdateManyWithoutOwnerNestedInput
    Comp?: CompUpdateManyWithoutPublisherNestedInput
    Venue?: VenueUpdateManyWithoutPublisherNestedInput
    Race?: RaceUpdateManyWithoutPublisherNestedInput
    Result?: ResultUpdateManyWithoutPublisherNestedInput
    follow?: followUpdateManyWithoutUserNestedInput
    like?: likeUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutUserSettingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    session?: SessionUncheckedUpdateManyWithoutUserNestedInput
    Key?: KeyUncheckedUpdateManyWithoutUserNestedInput
    Article?: ArticleUncheckedUpdateManyWithoutUserNestedInput
    Series?: SeriesUncheckedUpdateManyWithoutPublisherNestedInput
    Event?: EventUncheckedUpdateManyWithoutPublisherNestedInput
    Organization?: OrganizationUncheckedUpdateManyWithoutOwnerNestedInput
    Comp?: CompUncheckedUpdateManyWithoutPublisherNestedInput
    Venue?: VenueUncheckedUpdateManyWithoutPublisherNestedInput
    Race?: RaceUncheckedUpdateManyWithoutPublisherNestedInput
    Result?: ResultUncheckedUpdateManyWithoutPublisherNestedInput
    follow?: followUncheckedUpdateManyWithoutUserNestedInput
    like?: likeUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutSessionInput = {
    id: string
    name: string
    username: string
    email?: string | null
    avatar?: string | null
    Key?: KeyCreateNestedManyWithoutUserInput
    Article?: ArticleCreateNestedManyWithoutUserInput
    Series?: SeriesCreateNestedManyWithoutPublisherInput
    Event?: EventCreateNestedManyWithoutPublisherInput
    Organization?: OrganizationCreateNestedManyWithoutOwnerInput
    Comp?: CompCreateNestedManyWithoutPublisherInput
    Venue?: VenueCreateNestedManyWithoutPublisherInput
    UserSettings?: UserSettingsCreateNestedOneWithoutUserInput
    Race?: RaceCreateNestedManyWithoutPublisherInput
    Result?: ResultCreateNestedManyWithoutPublisherInput
    follow?: followCreateNestedManyWithoutUserInput
    like?: likeCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSessionInput = {
    id: string
    name: string
    username: string
    email?: string | null
    avatar?: string | null
    Key?: KeyUncheckedCreateNestedManyWithoutUserInput
    Article?: ArticleUncheckedCreateNestedManyWithoutUserInput
    Series?: SeriesUncheckedCreateNestedManyWithoutPublisherInput
    Event?: EventUncheckedCreateNestedManyWithoutPublisherInput
    Organization?: OrganizationUncheckedCreateNestedManyWithoutOwnerInput
    Comp?: CompUncheckedCreateNestedManyWithoutPublisherInput
    Venue?: VenueUncheckedCreateNestedManyWithoutPublisherInput
    UserSettings?: UserSettingsUncheckedCreateNestedOneWithoutUserInput
    Race?: RaceUncheckedCreateNestedManyWithoutPublisherInput
    Result?: ResultUncheckedCreateNestedManyWithoutPublisherInput
    follow?: followUncheckedCreateNestedManyWithoutUserInput
    like?: likeUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSessionInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSessionInput, UserUncheckedCreateWithoutSessionInput>
  }

  export type UserUpsertWithoutSessionInput = {
    update: XOR<UserUpdateWithoutSessionInput, UserUncheckedUpdateWithoutSessionInput>
    create: XOR<UserCreateWithoutSessionInput, UserUncheckedCreateWithoutSessionInput>
  }

  export type UserUpdateWithoutSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    Key?: KeyUpdateManyWithoutUserNestedInput
    Article?: ArticleUpdateManyWithoutUserNestedInput
    Series?: SeriesUpdateManyWithoutPublisherNestedInput
    Event?: EventUpdateManyWithoutPublisherNestedInput
    Organization?: OrganizationUpdateManyWithoutOwnerNestedInput
    Comp?: CompUpdateManyWithoutPublisherNestedInput
    Venue?: VenueUpdateManyWithoutPublisherNestedInput
    UserSettings?: UserSettingsUpdateOneWithoutUserNestedInput
    Race?: RaceUpdateManyWithoutPublisherNestedInput
    Result?: ResultUpdateManyWithoutPublisherNestedInput
    follow?: followUpdateManyWithoutUserNestedInput
    like?: likeUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    Key?: KeyUncheckedUpdateManyWithoutUserNestedInput
    Article?: ArticleUncheckedUpdateManyWithoutUserNestedInput
    Series?: SeriesUncheckedUpdateManyWithoutPublisherNestedInput
    Event?: EventUncheckedUpdateManyWithoutPublisherNestedInput
    Organization?: OrganizationUncheckedUpdateManyWithoutOwnerNestedInput
    Comp?: CompUncheckedUpdateManyWithoutPublisherNestedInput
    Venue?: VenueUncheckedUpdateManyWithoutPublisherNestedInput
    UserSettings?: UserSettingsUncheckedUpdateOneWithoutUserNestedInput
    Race?: RaceUncheckedUpdateManyWithoutPublisherNestedInput
    Result?: ResultUncheckedUpdateManyWithoutPublisherNestedInput
    follow?: followUncheckedUpdateManyWithoutUserNestedInput
    like?: likeUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutKeyInput = {
    id: string
    name: string
    username: string
    email?: string | null
    avatar?: string | null
    session?: SessionCreateNestedManyWithoutUserInput
    Article?: ArticleCreateNestedManyWithoutUserInput
    Series?: SeriesCreateNestedManyWithoutPublisherInput
    Event?: EventCreateNestedManyWithoutPublisherInput
    Organization?: OrganizationCreateNestedManyWithoutOwnerInput
    Comp?: CompCreateNestedManyWithoutPublisherInput
    Venue?: VenueCreateNestedManyWithoutPublisherInput
    UserSettings?: UserSettingsCreateNestedOneWithoutUserInput
    Race?: RaceCreateNestedManyWithoutPublisherInput
    Result?: ResultCreateNestedManyWithoutPublisherInput
    follow?: followCreateNestedManyWithoutUserInput
    like?: likeCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutKeyInput = {
    id: string
    name: string
    username: string
    email?: string | null
    avatar?: string | null
    session?: SessionUncheckedCreateNestedManyWithoutUserInput
    Article?: ArticleUncheckedCreateNestedManyWithoutUserInput
    Series?: SeriesUncheckedCreateNestedManyWithoutPublisherInput
    Event?: EventUncheckedCreateNestedManyWithoutPublisherInput
    Organization?: OrganizationUncheckedCreateNestedManyWithoutOwnerInput
    Comp?: CompUncheckedCreateNestedManyWithoutPublisherInput
    Venue?: VenueUncheckedCreateNestedManyWithoutPublisherInput
    UserSettings?: UserSettingsUncheckedCreateNestedOneWithoutUserInput
    Race?: RaceUncheckedCreateNestedManyWithoutPublisherInput
    Result?: ResultUncheckedCreateNestedManyWithoutPublisherInput
    follow?: followUncheckedCreateNestedManyWithoutUserInput
    like?: likeUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutKeyInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutKeyInput, UserUncheckedCreateWithoutKeyInput>
  }

  export type UserUpsertWithoutKeyInput = {
    update: XOR<UserUpdateWithoutKeyInput, UserUncheckedUpdateWithoutKeyInput>
    create: XOR<UserCreateWithoutKeyInput, UserUncheckedCreateWithoutKeyInput>
  }

  export type UserUpdateWithoutKeyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    session?: SessionUpdateManyWithoutUserNestedInput
    Article?: ArticleUpdateManyWithoutUserNestedInput
    Series?: SeriesUpdateManyWithoutPublisherNestedInput
    Event?: EventUpdateManyWithoutPublisherNestedInput
    Organization?: OrganizationUpdateManyWithoutOwnerNestedInput
    Comp?: CompUpdateManyWithoutPublisherNestedInput
    Venue?: VenueUpdateManyWithoutPublisherNestedInput
    UserSettings?: UserSettingsUpdateOneWithoutUserNestedInput
    Race?: RaceUpdateManyWithoutPublisherNestedInput
    Result?: ResultUpdateManyWithoutPublisherNestedInput
    follow?: followUpdateManyWithoutUserNestedInput
    like?: likeUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutKeyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    session?: SessionUncheckedUpdateManyWithoutUserNestedInput
    Article?: ArticleUncheckedUpdateManyWithoutUserNestedInput
    Series?: SeriesUncheckedUpdateManyWithoutPublisherNestedInput
    Event?: EventUncheckedUpdateManyWithoutPublisherNestedInput
    Organization?: OrganizationUncheckedUpdateManyWithoutOwnerNestedInput
    Comp?: CompUncheckedUpdateManyWithoutPublisherNestedInput
    Venue?: VenueUncheckedUpdateManyWithoutPublisherNestedInput
    UserSettings?: UserSettingsUncheckedUpdateOneWithoutUserNestedInput
    Race?: RaceUncheckedUpdateManyWithoutPublisherNestedInput
    Result?: ResultUncheckedUpdateManyWithoutPublisherNestedInput
    follow?: followUncheckedUpdateManyWithoutUserNestedInput
    like?: likeUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutArticleInput = {
    id: string
    name: string
    username: string
    email?: string | null
    avatar?: string | null
    session?: SessionCreateNestedManyWithoutUserInput
    Key?: KeyCreateNestedManyWithoutUserInput
    Series?: SeriesCreateNestedManyWithoutPublisherInput
    Event?: EventCreateNestedManyWithoutPublisherInput
    Organization?: OrganizationCreateNestedManyWithoutOwnerInput
    Comp?: CompCreateNestedManyWithoutPublisherInput
    Venue?: VenueCreateNestedManyWithoutPublisherInput
    UserSettings?: UserSettingsCreateNestedOneWithoutUserInput
    Race?: RaceCreateNestedManyWithoutPublisherInput
    Result?: ResultCreateNestedManyWithoutPublisherInput
    follow?: followCreateNestedManyWithoutUserInput
    like?: likeCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutArticleInput = {
    id: string
    name: string
    username: string
    email?: string | null
    avatar?: string | null
    session?: SessionUncheckedCreateNestedManyWithoutUserInput
    Key?: KeyUncheckedCreateNestedManyWithoutUserInput
    Series?: SeriesUncheckedCreateNestedManyWithoutPublisherInput
    Event?: EventUncheckedCreateNestedManyWithoutPublisherInput
    Organization?: OrganizationUncheckedCreateNestedManyWithoutOwnerInput
    Comp?: CompUncheckedCreateNestedManyWithoutPublisherInput
    Venue?: VenueUncheckedCreateNestedManyWithoutPublisherInput
    UserSettings?: UserSettingsUncheckedCreateNestedOneWithoutUserInput
    Race?: RaceUncheckedCreateNestedManyWithoutPublisherInput
    Result?: ResultUncheckedCreateNestedManyWithoutPublisherInput
    follow?: followUncheckedCreateNestedManyWithoutUserInput
    like?: likeUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutArticleInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutArticleInput, UserUncheckedCreateWithoutArticleInput>
  }

  export type UserUpsertWithoutArticleInput = {
    update: XOR<UserUpdateWithoutArticleInput, UserUncheckedUpdateWithoutArticleInput>
    create: XOR<UserCreateWithoutArticleInput, UserUncheckedCreateWithoutArticleInput>
  }

  export type UserUpdateWithoutArticleInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    session?: SessionUpdateManyWithoutUserNestedInput
    Key?: KeyUpdateManyWithoutUserNestedInput
    Series?: SeriesUpdateManyWithoutPublisherNestedInput
    Event?: EventUpdateManyWithoutPublisherNestedInput
    Organization?: OrganizationUpdateManyWithoutOwnerNestedInput
    Comp?: CompUpdateManyWithoutPublisherNestedInput
    Venue?: VenueUpdateManyWithoutPublisherNestedInput
    UserSettings?: UserSettingsUpdateOneWithoutUserNestedInput
    Race?: RaceUpdateManyWithoutPublisherNestedInput
    Result?: ResultUpdateManyWithoutPublisherNestedInput
    follow?: followUpdateManyWithoutUserNestedInput
    like?: likeUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutArticleInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    session?: SessionUncheckedUpdateManyWithoutUserNestedInput
    Key?: KeyUncheckedUpdateManyWithoutUserNestedInput
    Series?: SeriesUncheckedUpdateManyWithoutPublisherNestedInput
    Event?: EventUncheckedUpdateManyWithoutPublisherNestedInput
    Organization?: OrganizationUncheckedUpdateManyWithoutOwnerNestedInput
    Comp?: CompUncheckedUpdateManyWithoutPublisherNestedInput
    Venue?: VenueUncheckedUpdateManyWithoutPublisherNestedInput
    UserSettings?: UserSettingsUncheckedUpdateOneWithoutUserNestedInput
    Race?: RaceUncheckedUpdateManyWithoutPublisherNestedInput
    Result?: ResultUncheckedUpdateManyWithoutPublisherNestedInput
    follow?: followUncheckedUpdateManyWithoutUserNestedInput
    like?: likeUncheckedUpdateManyWithoutUserNestedInput
  }

  export type EventCreateManySeriesInput = {
    id?: string
    eventeid: string
    uniqueIdString: string
    name: string
    eventwebsite?: string | null
    email?: string | null
    venueName?: string | null
    description?: string | null
    titleImage?: string | null
    public?: boolean
    fileInfo?: NullableJsonNullValueInput | InputJsonValue
    resultColumns?: NullableJsonNullValueInput | InputJsonValue
    rest?: NullableJsonNullValueInput | InputJsonValue
    publisherId?: string | null
    venueId?: string | null
    organizationId?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
  }

  export type followCreateManySeriesInput = {
    id?: string
    userId: string
    type: string
    eventId?: string | null
    organizationId?: string | null
    raceId?: string | null
    compId?: string | null
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type likeCreateManySeriesInput = {
    id?: string
    userId: string
    type: string
    eventId?: string | null
    organizationId?: string | null
    raceId?: string | null
    compId?: string | null
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type VenueUpdateWithoutSeriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    burgee?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Publisher?: UserUpdateOneWithoutVenueNestedInput
    Event?: EventUpdateManyWithoutVenueNestedInput
  }

  export type VenueUncheckedUpdateWithoutSeriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    burgee?: NullableStringFieldUpdateOperationsInput | string | null
    publisherId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Event?: EventUncheckedUpdateManyWithoutVenueNestedInput
  }

  export type VenueUncheckedUpdateManyWithoutVenuesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    burgee?: NullableStringFieldUpdateOperationsInput | string | null
    publisherId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type EventUpdateWithoutSeriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventeid?: StringFieldUpdateOperationsInput | string
    uniqueIdString?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    eventwebsite?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    venueName?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    titleImage?: NullableStringFieldUpdateOperationsInput | string | null
    public?: BoolFieldUpdateOperationsInput | boolean
    fileInfo?: NullableJsonNullValueInput | InputJsonValue
    resultColumns?: NullableJsonNullValueInput | InputJsonValue
    rest?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Publisher?: UserUpdateOneWithoutEventNestedInput
    Venue?: VenueUpdateOneWithoutEventNestedInput
    Organization?: OrganizationUpdateOneWithoutEventsNestedInput
    Races?: RaceUpdateManyWithoutEventNestedInput
    Results?: ResultUpdateManyWithoutEventNestedInput
    Comps?: CompUpdateManyWithoutEventNestedInput
    follow?: followUpdateManyWithoutEventNestedInput
    like?: likeUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateWithoutSeriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventeid?: StringFieldUpdateOperationsInput | string
    uniqueIdString?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    eventwebsite?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    venueName?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    titleImage?: NullableStringFieldUpdateOperationsInput | string | null
    public?: BoolFieldUpdateOperationsInput | boolean
    fileInfo?: NullableJsonNullValueInput | InputJsonValue
    resultColumns?: NullableJsonNullValueInput | InputJsonValue
    rest?: NullableJsonNullValueInput | InputJsonValue
    publisherId?: NullableStringFieldUpdateOperationsInput | string | null
    venueId?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Races?: RaceUncheckedUpdateManyWithoutEventNestedInput
    Results?: ResultUncheckedUpdateManyWithoutEventNestedInput
    Comps?: CompUncheckedUpdateManyWithoutEventNestedInput
    follow?: followUncheckedUpdateManyWithoutEventNestedInput
    like?: likeUncheckedUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateManyWithoutEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventeid?: StringFieldUpdateOperationsInput | string
    uniqueIdString?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    eventwebsite?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    venueName?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    titleImage?: NullableStringFieldUpdateOperationsInput | string | null
    public?: BoolFieldUpdateOperationsInput | boolean
    fileInfo?: NullableJsonNullValueInput | InputJsonValue
    resultColumns?: NullableJsonNullValueInput | InputJsonValue
    rest?: NullableJsonNullValueInput | InputJsonValue
    publisherId?: NullableStringFieldUpdateOperationsInput | string | null
    venueId?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type followUpdateWithoutSeriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    User?: UserUpdateOneRequiredWithoutFollowNestedInput
    Event?: EventUpdateOneWithoutFollowNestedInput
    Organization?: OrganizationUpdateOneWithoutFollowNestedInput
    Race?: RaceUpdateOneWithoutFollowNestedInput
    Comp?: CompUpdateOneWithoutFollowNestedInput
  }

  export type followUncheckedUpdateWithoutSeriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: NullableStringFieldUpdateOperationsInput | string | null
    raceId?: NullableStringFieldUpdateOperationsInput | string | null
    compId?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type followUncheckedUpdateManyWithoutFollowInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: NullableStringFieldUpdateOperationsInput | string | null
    raceId?: NullableStringFieldUpdateOperationsInput | string | null
    compId?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type likeUpdateWithoutSeriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    User?: UserUpdateOneRequiredWithoutLikeNestedInput
    Event?: EventUpdateOneWithoutLikeNestedInput
    Organization?: OrganizationUpdateOneWithoutLikeNestedInput
    Race?: RaceUpdateOneWithoutLikeNestedInput
    Comp?: CompUpdateOneWithoutLikeNestedInput
  }

  export type likeUncheckedUpdateWithoutSeriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: NullableStringFieldUpdateOperationsInput | string | null
    raceId?: NullableStringFieldUpdateOperationsInput | string | null
    compId?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type likeUncheckedUpdateManyWithoutLikeInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: NullableStringFieldUpdateOperationsInput | string | null
    raceId?: NullableStringFieldUpdateOperationsInput | string | null
    compId?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RaceCreateManyEventInput = {
    id?: string
    raceId?: string | null
    uniqueRaceString?: string | null
    name?: string | null
    starts?: NullableJsonNullValueInput | InputJsonValue
    rank?: string | null
    date?: string | null
    time?: string | null
    notes?: string | null
    sailed?: string | null
    resultColumns?: NullableJsonNullValueInput | InputJsonValue
    rest?: NullableJsonNullValueInput | InputJsonValue
    publisherId?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
  }

  export type ResultCreateManyEventInput = {
    id?: string
    resultId?: string | null
    finish?: string | null
    start?: string | null
    points?: string | null
    position?: string | null
    discard?: string | null
    corrected?: string | null
    resultType?: string | null
    elasped?: string | null
    supposedRating?: string | null
    elapsedWin?: string | null
    ratingWin?: string | null
    rrset?: string | null
    publisherId: string
    compId?: string | null
    raceId?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
  }

  export type CompCreateManyEventInput = {
    id?: string
    compId: string
    club?: string | null
    boat?: string | null
    skipper?: string | null
    fleet?: string | null
    division?: string | null
    rating?: string | null
    rank?: string | null
    nett?: string | null
    total?: string | null
    rest?: NullableJsonNullValueInput | InputJsonValue
    publisherId?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
  }

  export type followCreateManyEventInput = {
    id?: string
    userId: string
    type: string
    seriesId?: string | null
    organizationId?: string | null
    raceId?: string | null
    compId?: string | null
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type likeCreateManyEventInput = {
    id?: string
    userId: string
    type: string
    seriesId?: string | null
    organizationId?: string | null
    raceId?: string | null
    compId?: string | null
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type RaceUpdateWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    raceId?: NullableStringFieldUpdateOperationsInput | string | null
    uniqueRaceString?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    starts?: NullableJsonNullValueInput | InputJsonValue
    rank?: NullableStringFieldUpdateOperationsInput | string | null
    date?: NullableStringFieldUpdateOperationsInput | string | null
    time?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    sailed?: NullableStringFieldUpdateOperationsInput | string | null
    resultColumns?: NullableJsonNullValueInput | InputJsonValue
    rest?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Publisher?: UserUpdateOneWithoutRaceNestedInput
    Comps?: CompUpdateManyWithoutRacesNestedInput
    Results?: ResultUpdateManyWithoutRaceNestedInput
    follow?: followUpdateManyWithoutRaceNestedInput
    like?: likeUpdateManyWithoutRaceNestedInput
  }

  export type RaceUncheckedUpdateWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    raceId?: NullableStringFieldUpdateOperationsInput | string | null
    uniqueRaceString?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    starts?: NullableJsonNullValueInput | InputJsonValue
    rank?: NullableStringFieldUpdateOperationsInput | string | null
    date?: NullableStringFieldUpdateOperationsInput | string | null
    time?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    sailed?: NullableStringFieldUpdateOperationsInput | string | null
    resultColumns?: NullableJsonNullValueInput | InputJsonValue
    rest?: NullableJsonNullValueInput | InputJsonValue
    publisherId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Comps?: CompUncheckedUpdateManyWithoutRacesNestedInput
    Results?: ResultUncheckedUpdateManyWithoutRaceNestedInput
    follow?: followUncheckedUpdateManyWithoutRaceNestedInput
    like?: likeUncheckedUpdateManyWithoutRaceNestedInput
  }

  export type RaceUncheckedUpdateManyWithoutRacesInput = {
    id?: StringFieldUpdateOperationsInput | string
    raceId?: NullableStringFieldUpdateOperationsInput | string | null
    uniqueRaceString?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    starts?: NullableJsonNullValueInput | InputJsonValue
    rank?: NullableStringFieldUpdateOperationsInput | string | null
    date?: NullableStringFieldUpdateOperationsInput | string | null
    time?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    sailed?: NullableStringFieldUpdateOperationsInput | string | null
    resultColumns?: NullableJsonNullValueInput | InputJsonValue
    rest?: NullableJsonNullValueInput | InputJsonValue
    publisherId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ResultUpdateWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    resultId?: NullableStringFieldUpdateOperationsInput | string | null
    finish?: NullableStringFieldUpdateOperationsInput | string | null
    start?: NullableStringFieldUpdateOperationsInput | string | null
    points?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    discard?: NullableStringFieldUpdateOperationsInput | string | null
    corrected?: NullableStringFieldUpdateOperationsInput | string | null
    resultType?: NullableStringFieldUpdateOperationsInput | string | null
    elasped?: NullableStringFieldUpdateOperationsInput | string | null
    supposedRating?: NullableStringFieldUpdateOperationsInput | string | null
    elapsedWin?: NullableStringFieldUpdateOperationsInput | string | null
    ratingWin?: NullableStringFieldUpdateOperationsInput | string | null
    rrset?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Publisher?: UserUpdateOneRequiredWithoutResultNestedInput
    Comp?: CompUpdateOneWithoutResultsNestedInput
    Race?: RaceUpdateOneWithoutResultsNestedInput
  }

  export type ResultUncheckedUpdateWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    resultId?: NullableStringFieldUpdateOperationsInput | string | null
    finish?: NullableStringFieldUpdateOperationsInput | string | null
    start?: NullableStringFieldUpdateOperationsInput | string | null
    points?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    discard?: NullableStringFieldUpdateOperationsInput | string | null
    corrected?: NullableStringFieldUpdateOperationsInput | string | null
    resultType?: NullableStringFieldUpdateOperationsInput | string | null
    elasped?: NullableStringFieldUpdateOperationsInput | string | null
    supposedRating?: NullableStringFieldUpdateOperationsInput | string | null
    elapsedWin?: NullableStringFieldUpdateOperationsInput | string | null
    ratingWin?: NullableStringFieldUpdateOperationsInput | string | null
    rrset?: NullableStringFieldUpdateOperationsInput | string | null
    publisherId?: StringFieldUpdateOperationsInput | string
    compId?: NullableStringFieldUpdateOperationsInput | string | null
    raceId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ResultUncheckedUpdateManyWithoutResultsInput = {
    id?: StringFieldUpdateOperationsInput | string
    resultId?: NullableStringFieldUpdateOperationsInput | string | null
    finish?: NullableStringFieldUpdateOperationsInput | string | null
    start?: NullableStringFieldUpdateOperationsInput | string | null
    points?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    discard?: NullableStringFieldUpdateOperationsInput | string | null
    corrected?: NullableStringFieldUpdateOperationsInput | string | null
    resultType?: NullableStringFieldUpdateOperationsInput | string | null
    elasped?: NullableStringFieldUpdateOperationsInput | string | null
    supposedRating?: NullableStringFieldUpdateOperationsInput | string | null
    elapsedWin?: NullableStringFieldUpdateOperationsInput | string | null
    ratingWin?: NullableStringFieldUpdateOperationsInput | string | null
    rrset?: NullableStringFieldUpdateOperationsInput | string | null
    publisherId?: StringFieldUpdateOperationsInput | string
    compId?: NullableStringFieldUpdateOperationsInput | string | null
    raceId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CompUpdateWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    compId?: StringFieldUpdateOperationsInput | string
    club?: NullableStringFieldUpdateOperationsInput | string | null
    boat?: NullableStringFieldUpdateOperationsInput | string | null
    skipper?: NullableStringFieldUpdateOperationsInput | string | null
    fleet?: NullableStringFieldUpdateOperationsInput | string | null
    division?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableStringFieldUpdateOperationsInput | string | null
    rank?: NullableStringFieldUpdateOperationsInput | string | null
    nett?: NullableStringFieldUpdateOperationsInput | string | null
    total?: NullableStringFieldUpdateOperationsInput | string | null
    rest?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Publisher?: UserUpdateOneWithoutCompNestedInput
    Results?: ResultUpdateManyWithoutCompNestedInput
    Races?: RaceUpdateManyWithoutCompsNestedInput
    follow?: followUpdateManyWithoutCompNestedInput
    like?: likeUpdateManyWithoutCompNestedInput
  }

  export type CompUncheckedUpdateWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    compId?: StringFieldUpdateOperationsInput | string
    club?: NullableStringFieldUpdateOperationsInput | string | null
    boat?: NullableStringFieldUpdateOperationsInput | string | null
    skipper?: NullableStringFieldUpdateOperationsInput | string | null
    fleet?: NullableStringFieldUpdateOperationsInput | string | null
    division?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableStringFieldUpdateOperationsInput | string | null
    rank?: NullableStringFieldUpdateOperationsInput | string | null
    nett?: NullableStringFieldUpdateOperationsInput | string | null
    total?: NullableStringFieldUpdateOperationsInput | string | null
    rest?: NullableJsonNullValueInput | InputJsonValue
    publisherId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Results?: ResultUncheckedUpdateManyWithoutCompNestedInput
    Races?: RaceUncheckedUpdateManyWithoutCompsNestedInput
    follow?: followUncheckedUpdateManyWithoutCompNestedInput
    like?: likeUncheckedUpdateManyWithoutCompNestedInput
  }

  export type CompUncheckedUpdateManyWithoutCompsInput = {
    id?: StringFieldUpdateOperationsInput | string
    compId?: StringFieldUpdateOperationsInput | string
    club?: NullableStringFieldUpdateOperationsInput | string | null
    boat?: NullableStringFieldUpdateOperationsInput | string | null
    skipper?: NullableStringFieldUpdateOperationsInput | string | null
    fleet?: NullableStringFieldUpdateOperationsInput | string | null
    division?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableStringFieldUpdateOperationsInput | string | null
    rank?: NullableStringFieldUpdateOperationsInput | string | null
    nett?: NullableStringFieldUpdateOperationsInput | string | null
    total?: NullableStringFieldUpdateOperationsInput | string | null
    rest?: NullableJsonNullValueInput | InputJsonValue
    publisherId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type followUpdateWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    User?: UserUpdateOneRequiredWithoutFollowNestedInput
    Series?: SeriesUpdateOneWithoutFollowNestedInput
    Organization?: OrganizationUpdateOneWithoutFollowNestedInput
    Race?: RaceUpdateOneWithoutFollowNestedInput
    Comp?: CompUpdateOneWithoutFollowNestedInput
  }

  export type followUncheckedUpdateWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    seriesId?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: NullableStringFieldUpdateOperationsInput | string | null
    raceId?: NullableStringFieldUpdateOperationsInput | string | null
    compId?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type likeUpdateWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    User?: UserUpdateOneRequiredWithoutLikeNestedInput
    Series?: SeriesUpdateOneWithoutLikeNestedInput
    Organization?: OrganizationUpdateOneWithoutLikeNestedInput
    Race?: RaceUpdateOneWithoutLikeNestedInput
    Comp?: CompUpdateOneWithoutLikeNestedInput
  }

  export type likeUncheckedUpdateWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    seriesId?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: NullableStringFieldUpdateOperationsInput | string | null
    raceId?: NullableStringFieldUpdateOperationsInput | string | null
    compId?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ResultCreateManyRaceInput = {
    id?: string
    resultId?: string | null
    finish?: string | null
    start?: string | null
    points?: string | null
    position?: string | null
    discard?: string | null
    corrected?: string | null
    resultType?: string | null
    elasped?: string | null
    supposedRating?: string | null
    elapsedWin?: string | null
    ratingWin?: string | null
    rrset?: string | null
    publisherId: string
    eventId?: string | null
    compId?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
  }

  export type followCreateManyRaceInput = {
    id?: string
    userId: string
    type: string
    seriesId?: string | null
    eventId?: string | null
    organizationId?: string | null
    compId?: string | null
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type likeCreateManyRaceInput = {
    id?: string
    userId: string
    type: string
    seriesId?: string | null
    eventId?: string | null
    organizationId?: string | null
    compId?: string | null
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type CompUpdateWithoutRacesInput = {
    id?: StringFieldUpdateOperationsInput | string
    compId?: StringFieldUpdateOperationsInput | string
    club?: NullableStringFieldUpdateOperationsInput | string | null
    boat?: NullableStringFieldUpdateOperationsInput | string | null
    skipper?: NullableStringFieldUpdateOperationsInput | string | null
    fleet?: NullableStringFieldUpdateOperationsInput | string | null
    division?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableStringFieldUpdateOperationsInput | string | null
    rank?: NullableStringFieldUpdateOperationsInput | string | null
    nett?: NullableStringFieldUpdateOperationsInput | string | null
    total?: NullableStringFieldUpdateOperationsInput | string | null
    rest?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Publisher?: UserUpdateOneWithoutCompNestedInput
    Event?: EventUpdateOneWithoutCompsNestedInput
    Results?: ResultUpdateManyWithoutCompNestedInput
    follow?: followUpdateManyWithoutCompNestedInput
    like?: likeUpdateManyWithoutCompNestedInput
  }

  export type CompUncheckedUpdateWithoutRacesInput = {
    id?: StringFieldUpdateOperationsInput | string
    compId?: StringFieldUpdateOperationsInput | string
    club?: NullableStringFieldUpdateOperationsInput | string | null
    boat?: NullableStringFieldUpdateOperationsInput | string | null
    skipper?: NullableStringFieldUpdateOperationsInput | string | null
    fleet?: NullableStringFieldUpdateOperationsInput | string | null
    division?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableStringFieldUpdateOperationsInput | string | null
    rank?: NullableStringFieldUpdateOperationsInput | string | null
    nett?: NullableStringFieldUpdateOperationsInput | string | null
    total?: NullableStringFieldUpdateOperationsInput | string | null
    rest?: NullableJsonNullValueInput | InputJsonValue
    publisherId?: NullableStringFieldUpdateOperationsInput | string | null
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Results?: ResultUncheckedUpdateManyWithoutCompNestedInput
    follow?: followUncheckedUpdateManyWithoutCompNestedInput
    like?: likeUncheckedUpdateManyWithoutCompNestedInput
  }

  export type ResultUpdateWithoutRaceInput = {
    id?: StringFieldUpdateOperationsInput | string
    resultId?: NullableStringFieldUpdateOperationsInput | string | null
    finish?: NullableStringFieldUpdateOperationsInput | string | null
    start?: NullableStringFieldUpdateOperationsInput | string | null
    points?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    discard?: NullableStringFieldUpdateOperationsInput | string | null
    corrected?: NullableStringFieldUpdateOperationsInput | string | null
    resultType?: NullableStringFieldUpdateOperationsInput | string | null
    elasped?: NullableStringFieldUpdateOperationsInput | string | null
    supposedRating?: NullableStringFieldUpdateOperationsInput | string | null
    elapsedWin?: NullableStringFieldUpdateOperationsInput | string | null
    ratingWin?: NullableStringFieldUpdateOperationsInput | string | null
    rrset?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Publisher?: UserUpdateOneRequiredWithoutResultNestedInput
    Event?: EventUpdateOneWithoutResultsNestedInput
    Comp?: CompUpdateOneWithoutResultsNestedInput
  }

  export type ResultUncheckedUpdateWithoutRaceInput = {
    id?: StringFieldUpdateOperationsInput | string
    resultId?: NullableStringFieldUpdateOperationsInput | string | null
    finish?: NullableStringFieldUpdateOperationsInput | string | null
    start?: NullableStringFieldUpdateOperationsInput | string | null
    points?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    discard?: NullableStringFieldUpdateOperationsInput | string | null
    corrected?: NullableStringFieldUpdateOperationsInput | string | null
    resultType?: NullableStringFieldUpdateOperationsInput | string | null
    elasped?: NullableStringFieldUpdateOperationsInput | string | null
    supposedRating?: NullableStringFieldUpdateOperationsInput | string | null
    elapsedWin?: NullableStringFieldUpdateOperationsInput | string | null
    ratingWin?: NullableStringFieldUpdateOperationsInput | string | null
    rrset?: NullableStringFieldUpdateOperationsInput | string | null
    publisherId?: StringFieldUpdateOperationsInput | string
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
    compId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type followUpdateWithoutRaceInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    User?: UserUpdateOneRequiredWithoutFollowNestedInput
    Series?: SeriesUpdateOneWithoutFollowNestedInput
    Event?: EventUpdateOneWithoutFollowNestedInput
    Organization?: OrganizationUpdateOneWithoutFollowNestedInput
    Comp?: CompUpdateOneWithoutFollowNestedInput
  }

  export type followUncheckedUpdateWithoutRaceInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    seriesId?: NullableStringFieldUpdateOperationsInput | string | null
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: NullableStringFieldUpdateOperationsInput | string | null
    compId?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type likeUpdateWithoutRaceInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    User?: UserUpdateOneRequiredWithoutLikeNestedInput
    Series?: SeriesUpdateOneWithoutLikeNestedInput
    Event?: EventUpdateOneWithoutLikeNestedInput
    Organization?: OrganizationUpdateOneWithoutLikeNestedInput
    Comp?: CompUpdateOneWithoutLikeNestedInput
  }

  export type likeUncheckedUpdateWithoutRaceInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    seriesId?: NullableStringFieldUpdateOperationsInput | string | null
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: NullableStringFieldUpdateOperationsInput | string | null
    compId?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ResultCreateManyCompInput = {
    id?: string
    resultId?: string | null
    finish?: string | null
    start?: string | null
    points?: string | null
    position?: string | null
    discard?: string | null
    corrected?: string | null
    resultType?: string | null
    elasped?: string | null
    supposedRating?: string | null
    elapsedWin?: string | null
    ratingWin?: string | null
    rrset?: string | null
    publisherId: string
    eventId?: string | null
    raceId?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
  }

  export type followCreateManyCompInput = {
    id?: string
    userId: string
    type: string
    seriesId?: string | null
    eventId?: string | null
    organizationId?: string | null
    raceId?: string | null
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type likeCreateManyCompInput = {
    id?: string
    userId: string
    type: string
    seriesId?: string | null
    eventId?: string | null
    organizationId?: string | null
    raceId?: string | null
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type ResultUpdateWithoutCompInput = {
    id?: StringFieldUpdateOperationsInput | string
    resultId?: NullableStringFieldUpdateOperationsInput | string | null
    finish?: NullableStringFieldUpdateOperationsInput | string | null
    start?: NullableStringFieldUpdateOperationsInput | string | null
    points?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    discard?: NullableStringFieldUpdateOperationsInput | string | null
    corrected?: NullableStringFieldUpdateOperationsInput | string | null
    resultType?: NullableStringFieldUpdateOperationsInput | string | null
    elasped?: NullableStringFieldUpdateOperationsInput | string | null
    supposedRating?: NullableStringFieldUpdateOperationsInput | string | null
    elapsedWin?: NullableStringFieldUpdateOperationsInput | string | null
    ratingWin?: NullableStringFieldUpdateOperationsInput | string | null
    rrset?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Publisher?: UserUpdateOneRequiredWithoutResultNestedInput
    Event?: EventUpdateOneWithoutResultsNestedInput
    Race?: RaceUpdateOneWithoutResultsNestedInput
  }

  export type ResultUncheckedUpdateWithoutCompInput = {
    id?: StringFieldUpdateOperationsInput | string
    resultId?: NullableStringFieldUpdateOperationsInput | string | null
    finish?: NullableStringFieldUpdateOperationsInput | string | null
    start?: NullableStringFieldUpdateOperationsInput | string | null
    points?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    discard?: NullableStringFieldUpdateOperationsInput | string | null
    corrected?: NullableStringFieldUpdateOperationsInput | string | null
    resultType?: NullableStringFieldUpdateOperationsInput | string | null
    elasped?: NullableStringFieldUpdateOperationsInput | string | null
    supposedRating?: NullableStringFieldUpdateOperationsInput | string | null
    elapsedWin?: NullableStringFieldUpdateOperationsInput | string | null
    ratingWin?: NullableStringFieldUpdateOperationsInput | string | null
    rrset?: NullableStringFieldUpdateOperationsInput | string | null
    publisherId?: StringFieldUpdateOperationsInput | string
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
    raceId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type RaceUpdateWithoutCompsInput = {
    id?: StringFieldUpdateOperationsInput | string
    raceId?: NullableStringFieldUpdateOperationsInput | string | null
    uniqueRaceString?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    starts?: NullableJsonNullValueInput | InputJsonValue
    rank?: NullableStringFieldUpdateOperationsInput | string | null
    date?: NullableStringFieldUpdateOperationsInput | string | null
    time?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    sailed?: NullableStringFieldUpdateOperationsInput | string | null
    resultColumns?: NullableJsonNullValueInput | InputJsonValue
    rest?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Event?: EventUpdateOneWithoutRacesNestedInput
    Publisher?: UserUpdateOneWithoutRaceNestedInput
    Results?: ResultUpdateManyWithoutRaceNestedInput
    follow?: followUpdateManyWithoutRaceNestedInput
    like?: likeUpdateManyWithoutRaceNestedInput
  }

  export type RaceUncheckedUpdateWithoutCompsInput = {
    id?: StringFieldUpdateOperationsInput | string
    raceId?: NullableStringFieldUpdateOperationsInput | string | null
    uniqueRaceString?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    starts?: NullableJsonNullValueInput | InputJsonValue
    rank?: NullableStringFieldUpdateOperationsInput | string | null
    date?: NullableStringFieldUpdateOperationsInput | string | null
    time?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    sailed?: NullableStringFieldUpdateOperationsInput | string | null
    resultColumns?: NullableJsonNullValueInput | InputJsonValue
    rest?: NullableJsonNullValueInput | InputJsonValue
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
    publisherId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Results?: ResultUncheckedUpdateManyWithoutRaceNestedInput
    follow?: followUncheckedUpdateManyWithoutRaceNestedInput
    like?: likeUncheckedUpdateManyWithoutRaceNestedInput
  }

  export type followUpdateWithoutCompInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    User?: UserUpdateOneRequiredWithoutFollowNestedInput
    Series?: SeriesUpdateOneWithoutFollowNestedInput
    Event?: EventUpdateOneWithoutFollowNestedInput
    Organization?: OrganizationUpdateOneWithoutFollowNestedInput
    Race?: RaceUpdateOneWithoutFollowNestedInput
  }

  export type followUncheckedUpdateWithoutCompInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    seriesId?: NullableStringFieldUpdateOperationsInput | string | null
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: NullableStringFieldUpdateOperationsInput | string | null
    raceId?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type likeUpdateWithoutCompInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    User?: UserUpdateOneRequiredWithoutLikeNestedInput
    Series?: SeriesUpdateOneWithoutLikeNestedInput
    Event?: EventUpdateOneWithoutLikeNestedInput
    Organization?: OrganizationUpdateOneWithoutLikeNestedInput
    Race?: RaceUpdateOneWithoutLikeNestedInput
  }

  export type likeUncheckedUpdateWithoutCompInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    seriesId?: NullableStringFieldUpdateOperationsInput | string | null
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: NullableStringFieldUpdateOperationsInput | string | null
    raceId?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SeriesCreateManyOrgInput = {
    id?: string
    name: string
    description?: string | null
    rest?: NullableJsonNullValueInput | InputJsonValue
    publisherId?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
  }

  export type EventCreateManyOrganizationInput = {
    id?: string
    eventeid: string
    uniqueIdString: string
    name: string
    eventwebsite?: string | null
    email?: string | null
    venueName?: string | null
    description?: string | null
    titleImage?: string | null
    public?: boolean
    fileInfo?: NullableJsonNullValueInput | InputJsonValue
    resultColumns?: NullableJsonNullValueInput | InputJsonValue
    rest?: NullableJsonNullValueInput | InputJsonValue
    publisherId?: string | null
    venueId?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    seriesId?: string | null
  }

  export type followCreateManyOrganizationInput = {
    id?: string
    userId: string
    type: string
    seriesId?: string | null
    eventId?: string | null
    raceId?: string | null
    compId?: string | null
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type likeCreateManyOrganizationInput = {
    id?: string
    userId: string
    type: string
    seriesId?: string | null
    eventId?: string | null
    raceId?: string | null
    compId?: string | null
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type SeriesUpdateWithoutOrgInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    rest?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Publisher?: UserUpdateOneWithoutSeriesNestedInput
    Venues?: VenueUpdateManyWithoutSeriesNestedInput
    Events?: EventUpdateManyWithoutSeriesNestedInput
    follow?: followUpdateManyWithoutSeriesNestedInput
    like?: likeUpdateManyWithoutSeriesNestedInput
  }

  export type SeriesUncheckedUpdateWithoutOrgInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    rest?: NullableJsonNullValueInput | InputJsonValue
    publisherId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Venues?: VenueUncheckedUpdateManyWithoutSeriesNestedInput
    Events?: EventUncheckedUpdateManyWithoutSeriesNestedInput
    follow?: followUncheckedUpdateManyWithoutSeriesNestedInput
    like?: likeUncheckedUpdateManyWithoutSeriesNestedInput
  }

  export type SeriesUncheckedUpdateManyWithoutSeriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    rest?: NullableJsonNullValueInput | InputJsonValue
    publisherId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type EventUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventeid?: StringFieldUpdateOperationsInput | string
    uniqueIdString?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    eventwebsite?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    venueName?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    titleImage?: NullableStringFieldUpdateOperationsInput | string | null
    public?: BoolFieldUpdateOperationsInput | boolean
    fileInfo?: NullableJsonNullValueInput | InputJsonValue
    resultColumns?: NullableJsonNullValueInput | InputJsonValue
    rest?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Publisher?: UserUpdateOneWithoutEventNestedInput
    Venue?: VenueUpdateOneWithoutEventNestedInput
    Races?: RaceUpdateManyWithoutEventNestedInput
    Results?: ResultUpdateManyWithoutEventNestedInput
    Comps?: CompUpdateManyWithoutEventNestedInput
    Series?: SeriesUpdateOneWithoutEventsNestedInput
    follow?: followUpdateManyWithoutEventNestedInput
    like?: likeUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventeid?: StringFieldUpdateOperationsInput | string
    uniqueIdString?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    eventwebsite?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    venueName?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    titleImage?: NullableStringFieldUpdateOperationsInput | string | null
    public?: BoolFieldUpdateOperationsInput | boolean
    fileInfo?: NullableJsonNullValueInput | InputJsonValue
    resultColumns?: NullableJsonNullValueInput | InputJsonValue
    rest?: NullableJsonNullValueInput | InputJsonValue
    publisherId?: NullableStringFieldUpdateOperationsInput | string | null
    venueId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    seriesId?: NullableStringFieldUpdateOperationsInput | string | null
    Races?: RaceUncheckedUpdateManyWithoutEventNestedInput
    Results?: ResultUncheckedUpdateManyWithoutEventNestedInput
    Comps?: CompUncheckedUpdateManyWithoutEventNestedInput
    follow?: followUncheckedUpdateManyWithoutEventNestedInput
    like?: likeUncheckedUpdateManyWithoutEventNestedInput
  }

  export type followUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    User?: UserUpdateOneRequiredWithoutFollowNestedInput
    Series?: SeriesUpdateOneWithoutFollowNestedInput
    Event?: EventUpdateOneWithoutFollowNestedInput
    Race?: RaceUpdateOneWithoutFollowNestedInput
    Comp?: CompUpdateOneWithoutFollowNestedInput
  }

  export type followUncheckedUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    seriesId?: NullableStringFieldUpdateOperationsInput | string | null
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
    raceId?: NullableStringFieldUpdateOperationsInput | string | null
    compId?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type likeUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    User?: UserUpdateOneRequiredWithoutLikeNestedInput
    Series?: SeriesUpdateOneWithoutLikeNestedInput
    Event?: EventUpdateOneWithoutLikeNestedInput
    Race?: RaceUpdateOneWithoutLikeNestedInput
    Comp?: CompUpdateOneWithoutLikeNestedInput
  }

  export type likeUncheckedUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    seriesId?: NullableStringFieldUpdateOperationsInput | string | null
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
    raceId?: NullableStringFieldUpdateOperationsInput | string | null
    compId?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventCreateManyVenueInput = {
    id?: string
    eventeid: string
    uniqueIdString: string
    name: string
    eventwebsite?: string | null
    email?: string | null
    venueName?: string | null
    description?: string | null
    titleImage?: string | null
    public?: boolean
    fileInfo?: NullableJsonNullValueInput | InputJsonValue
    resultColumns?: NullableJsonNullValueInput | InputJsonValue
    rest?: NullableJsonNullValueInput | InputJsonValue
    publisherId?: string | null
    organizationId?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    seriesId?: string | null
  }

  export type SeriesUpdateWithoutVenuesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    rest?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Org?: OrganizationUpdateOneWithoutSeriesNestedInput
    Publisher?: UserUpdateOneWithoutSeriesNestedInput
    Events?: EventUpdateManyWithoutSeriesNestedInput
    follow?: followUpdateManyWithoutSeriesNestedInput
    like?: likeUpdateManyWithoutSeriesNestedInput
  }

  export type SeriesUncheckedUpdateWithoutVenuesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    rest?: NullableJsonNullValueInput | InputJsonValue
    organizationId?: NullableStringFieldUpdateOperationsInput | string | null
    publisherId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Events?: EventUncheckedUpdateManyWithoutSeriesNestedInput
    follow?: followUncheckedUpdateManyWithoutSeriesNestedInput
    like?: likeUncheckedUpdateManyWithoutSeriesNestedInput
  }

  export type EventUpdateWithoutVenueInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventeid?: StringFieldUpdateOperationsInput | string
    uniqueIdString?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    eventwebsite?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    venueName?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    titleImage?: NullableStringFieldUpdateOperationsInput | string | null
    public?: BoolFieldUpdateOperationsInput | boolean
    fileInfo?: NullableJsonNullValueInput | InputJsonValue
    resultColumns?: NullableJsonNullValueInput | InputJsonValue
    rest?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Publisher?: UserUpdateOneWithoutEventNestedInput
    Organization?: OrganizationUpdateOneWithoutEventsNestedInput
    Races?: RaceUpdateManyWithoutEventNestedInput
    Results?: ResultUpdateManyWithoutEventNestedInput
    Comps?: CompUpdateManyWithoutEventNestedInput
    Series?: SeriesUpdateOneWithoutEventsNestedInput
    follow?: followUpdateManyWithoutEventNestedInput
    like?: likeUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateWithoutVenueInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventeid?: StringFieldUpdateOperationsInput | string
    uniqueIdString?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    eventwebsite?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    venueName?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    titleImage?: NullableStringFieldUpdateOperationsInput | string | null
    public?: BoolFieldUpdateOperationsInput | boolean
    fileInfo?: NullableJsonNullValueInput | InputJsonValue
    resultColumns?: NullableJsonNullValueInput | InputJsonValue
    rest?: NullableJsonNullValueInput | InputJsonValue
    publisherId?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    seriesId?: NullableStringFieldUpdateOperationsInput | string | null
    Races?: RaceUncheckedUpdateManyWithoutEventNestedInput
    Results?: ResultUncheckedUpdateManyWithoutEventNestedInput
    Comps?: CompUncheckedUpdateManyWithoutEventNestedInput
    follow?: followUncheckedUpdateManyWithoutEventNestedInput
    like?: likeUncheckedUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateManyWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventeid?: StringFieldUpdateOperationsInput | string
    uniqueIdString?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    eventwebsite?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    venueName?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    titleImage?: NullableStringFieldUpdateOperationsInput | string | null
    public?: BoolFieldUpdateOperationsInput | boolean
    fileInfo?: NullableJsonNullValueInput | InputJsonValue
    resultColumns?: NullableJsonNullValueInput | InputJsonValue
    rest?: NullableJsonNullValueInput | InputJsonValue
    publisherId?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    seriesId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SessionCreateManyUserInput = {
    id: string
    active_expires: bigint | number
    idle_expires: bigint | number
  }

  export type KeyCreateManyUserInput = {
    id: string
    hashed_password?: string | null
    primary: boolean
  }

  export type ArticleCreateManyUserInput = {
    id?: string
    title: string
    content?: string | null
    bogus?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
  }

  export type SeriesCreateManyPublisherInput = {
    id?: string
    name: string
    description?: string | null
    rest?: NullableJsonNullValueInput | InputJsonValue
    organizationId?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
  }

  export type EventCreateManyPublisherInput = {
    id?: string
    eventeid: string
    uniqueIdString: string
    name: string
    eventwebsite?: string | null
    email?: string | null
    venueName?: string | null
    description?: string | null
    titleImage?: string | null
    public?: boolean
    fileInfo?: NullableJsonNullValueInput | InputJsonValue
    resultColumns?: NullableJsonNullValueInput | InputJsonValue
    rest?: NullableJsonNullValueInput | InputJsonValue
    venueId?: string | null
    organizationId?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    seriesId?: string | null
  }

  export type OrganizationCreateManyOwnerInput = {
    id?: string
    name: string
    description?: string | null
    tag?: string | null
    website?: string | null
    email?: string | null
    contact?: NullableJsonNullValueInput | InputJsonValue
    titleImage?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
  }

  export type CompCreateManyPublisherInput = {
    id?: string
    compId: string
    club?: string | null
    boat?: string | null
    skipper?: string | null
    fleet?: string | null
    division?: string | null
    rating?: string | null
    rank?: string | null
    nett?: string | null
    total?: string | null
    rest?: NullableJsonNullValueInput | InputJsonValue
    eventId?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
  }

  export type VenueCreateManyPublisherInput = {
    id?: string
    name: string
    website?: string | null
    email?: string | null
    burgee?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
  }

  export type RaceCreateManyPublisherInput = {
    id?: string
    raceId?: string | null
    uniqueRaceString?: string | null
    name?: string | null
    starts?: NullableJsonNullValueInput | InputJsonValue
    rank?: string | null
    date?: string | null
    time?: string | null
    notes?: string | null
    sailed?: string | null
    resultColumns?: NullableJsonNullValueInput | InputJsonValue
    rest?: NullableJsonNullValueInput | InputJsonValue
    eventId?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
  }

  export type ResultCreateManyPublisherInput = {
    id?: string
    resultId?: string | null
    finish?: string | null
    start?: string | null
    points?: string | null
    position?: string | null
    discard?: string | null
    corrected?: string | null
    resultType?: string | null
    elasped?: string | null
    supposedRating?: string | null
    elapsedWin?: string | null
    ratingWin?: string | null
    rrset?: string | null
    eventId?: string | null
    compId?: string | null
    raceId?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
  }

  export type followCreateManyUserInput = {
    id?: string
    type: string
    seriesId?: string | null
    eventId?: string | null
    organizationId?: string | null
    raceId?: string | null
    compId?: string | null
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type likeCreateManyUserInput = {
    id?: string
    type: string
    seriesId?: string | null
    eventId?: string | null
    organizationId?: string | null
    raceId?: string | null
    compId?: string | null
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type SessionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    active_expires?: BigIntFieldUpdateOperationsInput | bigint | number
    idle_expires?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type SessionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    active_expires?: BigIntFieldUpdateOperationsInput | bigint | number
    idle_expires?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type SessionUncheckedUpdateManyWithoutSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    active_expires?: BigIntFieldUpdateOperationsInput | bigint | number
    idle_expires?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type KeyUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    hashed_password?: NullableStringFieldUpdateOperationsInput | string | null
    primary?: BoolFieldUpdateOperationsInput | boolean
  }

  export type KeyUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    hashed_password?: NullableStringFieldUpdateOperationsInput | string | null
    primary?: BoolFieldUpdateOperationsInput | boolean
  }

  export type KeyUncheckedUpdateManyWithoutKeyInput = {
    id?: StringFieldUpdateOperationsInput | string
    hashed_password?: NullableStringFieldUpdateOperationsInput | string | null
    primary?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ArticleUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    bogus?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ArticleUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    bogus?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ArticleUncheckedUpdateManyWithoutArticleInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    bogus?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SeriesUpdateWithoutPublisherInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    rest?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Org?: OrganizationUpdateOneWithoutSeriesNestedInput
    Venues?: VenueUpdateManyWithoutSeriesNestedInput
    Events?: EventUpdateManyWithoutSeriesNestedInput
    follow?: followUpdateManyWithoutSeriesNestedInput
    like?: likeUpdateManyWithoutSeriesNestedInput
  }

  export type SeriesUncheckedUpdateWithoutPublisherInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    rest?: NullableJsonNullValueInput | InputJsonValue
    organizationId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Venues?: VenueUncheckedUpdateManyWithoutSeriesNestedInput
    Events?: EventUncheckedUpdateManyWithoutSeriesNestedInput
    follow?: followUncheckedUpdateManyWithoutSeriesNestedInput
    like?: likeUncheckedUpdateManyWithoutSeriesNestedInput
  }

  export type EventUpdateWithoutPublisherInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventeid?: StringFieldUpdateOperationsInput | string
    uniqueIdString?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    eventwebsite?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    venueName?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    titleImage?: NullableStringFieldUpdateOperationsInput | string | null
    public?: BoolFieldUpdateOperationsInput | boolean
    fileInfo?: NullableJsonNullValueInput | InputJsonValue
    resultColumns?: NullableJsonNullValueInput | InputJsonValue
    rest?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Venue?: VenueUpdateOneWithoutEventNestedInput
    Organization?: OrganizationUpdateOneWithoutEventsNestedInput
    Races?: RaceUpdateManyWithoutEventNestedInput
    Results?: ResultUpdateManyWithoutEventNestedInput
    Comps?: CompUpdateManyWithoutEventNestedInput
    Series?: SeriesUpdateOneWithoutEventsNestedInput
    follow?: followUpdateManyWithoutEventNestedInput
    like?: likeUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateWithoutPublisherInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventeid?: StringFieldUpdateOperationsInput | string
    uniqueIdString?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    eventwebsite?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    venueName?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    titleImage?: NullableStringFieldUpdateOperationsInput | string | null
    public?: BoolFieldUpdateOperationsInput | boolean
    fileInfo?: NullableJsonNullValueInput | InputJsonValue
    resultColumns?: NullableJsonNullValueInput | InputJsonValue
    rest?: NullableJsonNullValueInput | InputJsonValue
    venueId?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    seriesId?: NullableStringFieldUpdateOperationsInput | string | null
    Races?: RaceUncheckedUpdateManyWithoutEventNestedInput
    Results?: ResultUncheckedUpdateManyWithoutEventNestedInput
    Comps?: CompUncheckedUpdateManyWithoutEventNestedInput
    follow?: followUncheckedUpdateManyWithoutEventNestedInput
    like?: likeUncheckedUpdateManyWithoutEventNestedInput
  }

  export type OrganizationUpdateWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    tag?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableJsonNullValueInput | InputJsonValue
    titleImage?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Series?: SeriesUpdateManyWithoutOrgNestedInput
    Events?: EventUpdateManyWithoutOrganizationNestedInput
    follow?: followUpdateManyWithoutOrganizationNestedInput
    like?: likeUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationUncheckedUpdateWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    tag?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableJsonNullValueInput | InputJsonValue
    titleImage?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Series?: SeriesUncheckedUpdateManyWithoutOrgNestedInput
    Events?: EventUncheckedUpdateManyWithoutOrganizationNestedInput
    follow?: followUncheckedUpdateManyWithoutOrganizationNestedInput
    like?: likeUncheckedUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationUncheckedUpdateManyWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    tag?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableJsonNullValueInput | InputJsonValue
    titleImage?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CompUpdateWithoutPublisherInput = {
    id?: StringFieldUpdateOperationsInput | string
    compId?: StringFieldUpdateOperationsInput | string
    club?: NullableStringFieldUpdateOperationsInput | string | null
    boat?: NullableStringFieldUpdateOperationsInput | string | null
    skipper?: NullableStringFieldUpdateOperationsInput | string | null
    fleet?: NullableStringFieldUpdateOperationsInput | string | null
    division?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableStringFieldUpdateOperationsInput | string | null
    rank?: NullableStringFieldUpdateOperationsInput | string | null
    nett?: NullableStringFieldUpdateOperationsInput | string | null
    total?: NullableStringFieldUpdateOperationsInput | string | null
    rest?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Event?: EventUpdateOneWithoutCompsNestedInput
    Results?: ResultUpdateManyWithoutCompNestedInput
    Races?: RaceUpdateManyWithoutCompsNestedInput
    follow?: followUpdateManyWithoutCompNestedInput
    like?: likeUpdateManyWithoutCompNestedInput
  }

  export type CompUncheckedUpdateWithoutPublisherInput = {
    id?: StringFieldUpdateOperationsInput | string
    compId?: StringFieldUpdateOperationsInput | string
    club?: NullableStringFieldUpdateOperationsInput | string | null
    boat?: NullableStringFieldUpdateOperationsInput | string | null
    skipper?: NullableStringFieldUpdateOperationsInput | string | null
    fleet?: NullableStringFieldUpdateOperationsInput | string | null
    division?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableStringFieldUpdateOperationsInput | string | null
    rank?: NullableStringFieldUpdateOperationsInput | string | null
    nett?: NullableStringFieldUpdateOperationsInput | string | null
    total?: NullableStringFieldUpdateOperationsInput | string | null
    rest?: NullableJsonNullValueInput | InputJsonValue
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Results?: ResultUncheckedUpdateManyWithoutCompNestedInput
    Races?: RaceUncheckedUpdateManyWithoutCompsNestedInput
    follow?: followUncheckedUpdateManyWithoutCompNestedInput
    like?: likeUncheckedUpdateManyWithoutCompNestedInput
  }

  export type CompUncheckedUpdateManyWithoutCompInput = {
    id?: StringFieldUpdateOperationsInput | string
    compId?: StringFieldUpdateOperationsInput | string
    club?: NullableStringFieldUpdateOperationsInput | string | null
    boat?: NullableStringFieldUpdateOperationsInput | string | null
    skipper?: NullableStringFieldUpdateOperationsInput | string | null
    fleet?: NullableStringFieldUpdateOperationsInput | string | null
    division?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableStringFieldUpdateOperationsInput | string | null
    rank?: NullableStringFieldUpdateOperationsInput | string | null
    nett?: NullableStringFieldUpdateOperationsInput | string | null
    total?: NullableStringFieldUpdateOperationsInput | string | null
    rest?: NullableJsonNullValueInput | InputJsonValue
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type VenueUpdateWithoutPublisherInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    burgee?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Series?: SeriesUpdateManyWithoutVenuesNestedInput
    Event?: EventUpdateManyWithoutVenueNestedInput
  }

  export type VenueUncheckedUpdateWithoutPublisherInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    burgee?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Series?: SeriesUncheckedUpdateManyWithoutVenuesNestedInput
    Event?: EventUncheckedUpdateManyWithoutVenueNestedInput
  }

  export type VenueUncheckedUpdateManyWithoutVenueInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    burgee?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type RaceUpdateWithoutPublisherInput = {
    id?: StringFieldUpdateOperationsInput | string
    raceId?: NullableStringFieldUpdateOperationsInput | string | null
    uniqueRaceString?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    starts?: NullableJsonNullValueInput | InputJsonValue
    rank?: NullableStringFieldUpdateOperationsInput | string | null
    date?: NullableStringFieldUpdateOperationsInput | string | null
    time?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    sailed?: NullableStringFieldUpdateOperationsInput | string | null
    resultColumns?: NullableJsonNullValueInput | InputJsonValue
    rest?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Event?: EventUpdateOneWithoutRacesNestedInput
    Comps?: CompUpdateManyWithoutRacesNestedInput
    Results?: ResultUpdateManyWithoutRaceNestedInput
    follow?: followUpdateManyWithoutRaceNestedInput
    like?: likeUpdateManyWithoutRaceNestedInput
  }

  export type RaceUncheckedUpdateWithoutPublisherInput = {
    id?: StringFieldUpdateOperationsInput | string
    raceId?: NullableStringFieldUpdateOperationsInput | string | null
    uniqueRaceString?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    starts?: NullableJsonNullValueInput | InputJsonValue
    rank?: NullableStringFieldUpdateOperationsInput | string | null
    date?: NullableStringFieldUpdateOperationsInput | string | null
    time?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    sailed?: NullableStringFieldUpdateOperationsInput | string | null
    resultColumns?: NullableJsonNullValueInput | InputJsonValue
    rest?: NullableJsonNullValueInput | InputJsonValue
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Comps?: CompUncheckedUpdateManyWithoutRacesNestedInput
    Results?: ResultUncheckedUpdateManyWithoutRaceNestedInput
    follow?: followUncheckedUpdateManyWithoutRaceNestedInput
    like?: likeUncheckedUpdateManyWithoutRaceNestedInput
  }

  export type RaceUncheckedUpdateManyWithoutRaceInput = {
    id?: StringFieldUpdateOperationsInput | string
    raceId?: NullableStringFieldUpdateOperationsInput | string | null
    uniqueRaceString?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    starts?: NullableJsonNullValueInput | InputJsonValue
    rank?: NullableStringFieldUpdateOperationsInput | string | null
    date?: NullableStringFieldUpdateOperationsInput | string | null
    time?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    sailed?: NullableStringFieldUpdateOperationsInput | string | null
    resultColumns?: NullableJsonNullValueInput | InputJsonValue
    rest?: NullableJsonNullValueInput | InputJsonValue
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ResultUpdateWithoutPublisherInput = {
    id?: StringFieldUpdateOperationsInput | string
    resultId?: NullableStringFieldUpdateOperationsInput | string | null
    finish?: NullableStringFieldUpdateOperationsInput | string | null
    start?: NullableStringFieldUpdateOperationsInput | string | null
    points?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    discard?: NullableStringFieldUpdateOperationsInput | string | null
    corrected?: NullableStringFieldUpdateOperationsInput | string | null
    resultType?: NullableStringFieldUpdateOperationsInput | string | null
    elasped?: NullableStringFieldUpdateOperationsInput | string | null
    supposedRating?: NullableStringFieldUpdateOperationsInput | string | null
    elapsedWin?: NullableStringFieldUpdateOperationsInput | string | null
    ratingWin?: NullableStringFieldUpdateOperationsInput | string | null
    rrset?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Event?: EventUpdateOneWithoutResultsNestedInput
    Comp?: CompUpdateOneWithoutResultsNestedInput
    Race?: RaceUpdateOneWithoutResultsNestedInput
  }

  export type ResultUncheckedUpdateWithoutPublisherInput = {
    id?: StringFieldUpdateOperationsInput | string
    resultId?: NullableStringFieldUpdateOperationsInput | string | null
    finish?: NullableStringFieldUpdateOperationsInput | string | null
    start?: NullableStringFieldUpdateOperationsInput | string | null
    points?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    discard?: NullableStringFieldUpdateOperationsInput | string | null
    corrected?: NullableStringFieldUpdateOperationsInput | string | null
    resultType?: NullableStringFieldUpdateOperationsInput | string | null
    elasped?: NullableStringFieldUpdateOperationsInput | string | null
    supposedRating?: NullableStringFieldUpdateOperationsInput | string | null
    elapsedWin?: NullableStringFieldUpdateOperationsInput | string | null
    ratingWin?: NullableStringFieldUpdateOperationsInput | string | null
    rrset?: NullableStringFieldUpdateOperationsInput | string | null
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
    compId?: NullableStringFieldUpdateOperationsInput | string | null
    raceId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ResultUncheckedUpdateManyWithoutResultInput = {
    id?: StringFieldUpdateOperationsInput | string
    resultId?: NullableStringFieldUpdateOperationsInput | string | null
    finish?: NullableStringFieldUpdateOperationsInput | string | null
    start?: NullableStringFieldUpdateOperationsInput | string | null
    points?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    discard?: NullableStringFieldUpdateOperationsInput | string | null
    corrected?: NullableStringFieldUpdateOperationsInput | string | null
    resultType?: NullableStringFieldUpdateOperationsInput | string | null
    elasped?: NullableStringFieldUpdateOperationsInput | string | null
    supposedRating?: NullableStringFieldUpdateOperationsInput | string | null
    elapsedWin?: NullableStringFieldUpdateOperationsInput | string | null
    ratingWin?: NullableStringFieldUpdateOperationsInput | string | null
    rrset?: NullableStringFieldUpdateOperationsInput | string | null
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
    compId?: NullableStringFieldUpdateOperationsInput | string | null
    raceId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type followUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Series?: SeriesUpdateOneWithoutFollowNestedInput
    Event?: EventUpdateOneWithoutFollowNestedInput
    Organization?: OrganizationUpdateOneWithoutFollowNestedInput
    Race?: RaceUpdateOneWithoutFollowNestedInput
    Comp?: CompUpdateOneWithoutFollowNestedInput
  }

  export type followUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    seriesId?: NullableStringFieldUpdateOperationsInput | string | null
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: NullableStringFieldUpdateOperationsInput | string | null
    raceId?: NullableStringFieldUpdateOperationsInput | string | null
    compId?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type likeUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Series?: SeriesUpdateOneWithoutLikeNestedInput
    Event?: EventUpdateOneWithoutLikeNestedInput
    Organization?: OrganizationUpdateOneWithoutLikeNestedInput
    Race?: RaceUpdateOneWithoutLikeNestedInput
    Comp?: CompUpdateOneWithoutLikeNestedInput
  }

  export type likeUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    seriesId?: NullableStringFieldUpdateOperationsInput | string | null
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: NullableStringFieldUpdateOperationsInput | string | null
    raceId?: NullableStringFieldUpdateOperationsInput | string | null
    compId?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}